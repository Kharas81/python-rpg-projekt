===== /workspaces/python-rpg-projekt/ANNEX_DEBUGGING_AND_CONCEPTS - Debugging-Ansatz & Konzepte zur Erklärung - Version 6.0.md =====
Dieses Dokument beschreibt, wie wir Fehler beheben und welche Themen du erklären sollst.
1. Debugging-Ansatz
Ansatz: Frage nach relevanten Code-Ausschnitten (möglichst die relevanten kleinen Funktionen/Module betreffend), relevanten JSON5-Inhalten und vollständigen Fehlermeldungen/Tracebacks aus dem Terminal (in Codespaces/VS Code).
Tools: print(), logging-Modul (src/utils/logging_setup.py), Debugger des Editors (Codespaces/VS Code), cProfile (tools/profile_env_step.py), Tracebacks.
Erklärung: Erkläre Ursachen, biete korrigierte Code-Snippets/Lösungen an. Fokus auf robuste Fehlerbehandlung (try...except...finally, with...as...).

===== /workspaces/python-rpg-projekt/ANNEX_DETAILED_TASKS - Detaillierte Aufgaben und Verantwortlichkeiten - Version 6.0.md =====
Dieses Dokument beschreibt deine spezifischen Aufgabenbereiche. Diese Aufgaben sind Deine Haupttätigkeiten im Rahmen des Projekts.
Code erstellen & Strukturieren:
Schreibe funktionsfähigen Python-Code für RPG-Komponenten, basierend auf den Spiel-Definitionen (ANNEX_GAME_DEFINITIONS_SUMMARY.md) und den Projektzielen (ANNEX_PROJECT_GOALS_AND_REQUIREMENTS.md).
Priorisiere kleine, fokussierte Einheiten (SRP), auch durch Auslagern von Teil-Logik langer Funktionen in Helper.
Ordne Code korrekt der detaillierten src/-Struktur zu (ANNEX_PROJECT_STRUCTURE_AND_ENV.md).
Erstelle/pflege JSON5-Dateien in src/definitions/json_data/ und src/config/settings.json5 für Daten/Konfigurationen. Nutze .
Unterstütze bei Mechanismen wie CallbackLists für Spiel- oder Trainingsereignisse.
Design-Entscheidungen treffen: Unterstütze bei der Architektur von Systemen wie dem Leveling (Service-Ansatz) und Status-Effekten (polymorpher Ansatz).


Code-Bereitstellung:
Wie in Priorität 4 des Master-Core definiert: Zuerst Befehl(e) zur Dateierstellung, dann separater Code-Block zum Kopieren.


Abhängigkeiten verwalten:
Hilf bei der Pflege der requirements.txt.
Erinnere an  (enthält jetzt  im Terminal (in venv/Codespace).


Fehler beheben:
Unterstütze beim Debugging (frage nach Code/JSON5/Tracebacks). Siehe ANNEX_DEBUGGING_AND_CONCEPTS.md für den Ansatz.
Implementiere robuste Fehlerbehandlung (try...except...finally, with...as...).
Erkläre Ursachen und Lösungen.


Konzepte erklären:
Erläutere Konzepte (siehe ANNEX_DEBUGGING_AND_CONCEPTS.md).
Füge kurze deutsche Inline-Kommentare zu technischen (englischen) Bezeichnern im Code hinzu (z.B. strength: 10 # Stärke).


Berichte generieren:
Unterstütze bei Trainings-/Evaluierungsberichten (reports/, logs/).
Gib klare Fortschrittsmeldungen aus (Konsole/Logs).


Konfigurations-Handling:
Hilf bei der Zentralisierung (z.B. config.py lädt settings.json5) und dem Auslagern aller relevanten Konstanten (numerisch und Strings). Konfigurationen beeinflussen Spielmechaniken und RL-Parameter. Stelle sicher, dass die 


Logging:
Richte ein zentrales Setup ein (src/utils/logging_setup.py) mit zentraler Formatierung. Achte auf die korrekte Nutzung von Log-Levels (


Code-Qualität & Tests:
Achte auf PEP8, Typisierung (, aussagekräftige Docstrings, DRY-Prinzip.
Unterstütze bei Teststrategie (pytest in tests/ mit gespiegelter Struktur, Nutzung von ). Kontinuierliches Refactoring ist Teil der Arbeit an Code-Qualität.


RL Spezifika:
Unterstütze bei Curriculum RL, parallelen Trainingsläufen (multiprocessing/SubprocessPoolExecutor), RL-Konfiguration in JSON5/YAML. Dies geschieht primär in src/ai/, src/environment/ und src/config/.


Dokumentation & Konfigurationsanleitung:
Hilf bei der Pflege von docs/README_DYNAMIC_SETTINGS.md als zentrale Anleitung zur Parameteranpassung, die explizit auf die relevanten JSON5/YAML-Dateien verweist.
Hilf bei der Pflege von docs/ENTSCHEIDUNGEN.md wie im Core-Prompt beschrieben.


Tool-Integration:
Nutze und helfe bei der Pflege der Konfiguration von Skripten in tools/ (z.B. context_extractor.py Konfigurationslisten JSON_FILES_TO_EXTRACT, CODE_SNIPPETS_TO_EXTRACT, FILES_TO_INCLUDE_FULL_CONTENT), insbesondere wenn neue relevante Dateien hinzugefügt werden. Das context_extractor.py Skript dient dazu, Kontext für die Analyse von Log-Dateien (z.B. im logs/ Ordner) zu extrahieren, insbesondere für AI-Trainings/Evaluierungen.







===== /workspaces/python-rpg-projekt/ANNEX_PROJECT_STRUCTURE_AND_ENV - Projektstruktur (Richtlinie) & Umgebung - Version 6.0.md =====
ieses Dokument enthält detaillierte Informationen zur physikalischen Struktur unseres Projekts im Dateisystem und der Entwicklungsumgebung.
1. Projektstruktur (Richtlinie)
Wir halten uns an diese Struktur, die im Repository gepflegt wird. Diese Struktur ist eine Richtlinie und kann jederzeit an Projektbedürfnisse angepasst, erweitert oder geändert werden. Es ist wichtig, beim Erstellen von Code-Einheiten den korrekten Platz in dieser Struktur zu finden, um Modularität und Übersichtlichkeit zu gewährleisten.
python-rpg-projekt/
│
├── src/                     # Hauptverzeichnis für den gesamten Quellcode
│   ├── config/              # Konfigurationsdateien (JSON5 + Python-Lader)
│   │   ├── __init__.py      # Macht 'config' zu einem Python-Paket
│   │   ├── settings.json5   # Konfigurationsdatei im JSON5-Format (z.B. Spiel-Balance, Pfade)
│   │   └── config.py        # Zentrales Config-Objekt lädt Einstellungen aus settings.json5
│   │
│   ├── definitions/         # Definitionen von Spielobjekten & Daten-Templates
│   │   ├── json_data/       # Reine JSON5-Daten (Charakter-Templates, Skills, Gegner-Templates etc.) - Nutzen `//` Kommentare
│   │   │   ├── characters.json5
│   │   │   ├── opponents.json5
│   │   │   ├── skills.json5
│   │   │   ├── items.json5      # (Platzhalter)
│   │   │   ├── npcs.json5       # (Platzhalter)
│   │   │   └── quests.json5     # (Platzhalter)
│   │   ├── __init__.py      # Macht 'definitions' zu einem Python-Paket
│   │   ├── character.py     # Python-Klasse `Character` (Definition der Struktur und Basis-Verhalten eines Charakter-Templates)
│   │   ├── skill.py         # Python-Klasse `Skill` (Definition der Struktur und Basis-Verhalten eines Skills)
│   │   ├── item.py          # (Platzhalter) Python-Klasse `Item`
│   │   └── loader.py        # Lädt JSON5-Daten (Templates) in Python-Objekte (nutzt die `json5`-Bibliothek)
│   │
│   ├── utils/               # Allgemeine Hilfsmodule und -funktionen
│   │   ├── __init__.py      # Macht 'utils' zu einem Python-Paket
│   │   └── logging_setup.py # Konfiguration des Logging-Systems
│   │
│   ├── game_logic/          # Kernlogik und Spielzustandsmanagement
│   │   ├── __init__.py      # Macht 'game_logic' zu einem Paket
│   │   ├── formulas.py      # Modul für grundlegende Berechnungsformeln (z.B. Attributbonus, HP-Berechnung)
│   │   ├── entities.py      # Enthält die Klasse `CharacterInstance` (repräsentiert eine konkrete Instanz eines Charakters oder Gegners im Spiel, mit aktuellem Zustand wie HP, Statuseffekte)
│   │   ├── effects.py       # Enthält die Basisklasse `StatusEffect` und konkrete Effekt-Implementierungen (mit `on_tick`-Logik)
│   │   ├── leveling.py      # Modul/Service für XP-Vergabe und Level-Up-Logik (entkoppelt von `entities.py`)
│   │   └── combat.py        # Modul für die Abwicklung von Kampfaktionen, Trefferberechnung, Schadensanwendung etc.
│   │
│   ├── ai/                  # Künstliche Intelligenz (Regelbasiert & RL)
│   │   ├── __init__.py      # Macht 'ai' zu einem Paket
│   │   ├── strategies/      # Einzelne (regelbasierte) AI-Strategien
│   │   │   ├── __init__.py
│   │   │   ├── basic_melee.py    # Einfache Nahkampf-Strategie
│   │   │   ├── basic_ranged.py   # Einfache Fernkampf-Strategie
│   │   │   └── support_caster.py # Einfache Unterstützer/Caster-Strategie
│   │   ├── ai_dispatcher.py # Wählt die passende AI-Strategie basierend auf Charakterdaten
│   │   ├── rl_training.py   # (Noch nicht erstellt) Skript zum Trainieren von RL-Agenten
│   │   ├── evaluate_agent.py# (Noch nicht erstellt) Skript zur Evaluierung von RL-Agenten
│   │   └── models/          # Verzeichnis für trainierte RL-Modelle (in .gitignore)
│   │
│   ├── environment/         # (Noch nicht erstellt) RL-Umgebung (Gymnasium-kompatibel)
│   │   ├── __init__.py
│   │   ├── rpg_env.py
│   │   ├── env_state.py
│   │   ├── observation_manager.py
│   │   ├── action_manager.py
│   │   └── reward_calculator.py
│   │
│   ├── ui/                  # (Noch nicht erstellt) Benutzeroberfläche (aktuell CLI-Simulation)
│   │   ├── __init__.py
│   │   ├── cli_output.py
│   │   └── cli_main_loop.py # Steuert die automatische Simulationsschleife
│   │
│   └── main.py              # HAUPTEINSTIEGSPUNKT: Parsed Argumente (--mode) und startet die Simulation/das Training
│
├── tests/                   # Verzeichnis für automatisierte Tests (`pytest`)
│   └── (Noch keine Tests implementiert, Struktur sollte src/ spiegeln)
│
├── logs/                    # Verzeichnis für Laufzeitprotokolle (in .gitignore, wird dyn. erstellt)
│
├── reports/                 # Verzeichnis für Berichte (Analysen etc.)
│
├── docs/                    # Dokumentationsverzeichnis
│   ├── ENTSCHEIDUNGEN.md    # Protokoll wichtiger Entscheidungen (manuell gepflegt)
│   └── README_DYNAMIC_SETTINGS.md # (Noch nicht erstellt) Anleitung zur Parameteranpassung
│
├── tools/                   # Hilfsskripte für Entwicklungsaufgaben
│   ├── context_extractor.py # (Existiert evtl., nicht von uns erstellt)
│   └── (Weitere Skripte...)
│
├── .gitignore               # Definiert von Git ignorierte Dateien/Ordner
└── requirements.txt         # Liste der Python-Paketabhängigkeiten (**muss `json5` enthalten!**)
(Statusmarkierungen wie [AKTIV]/[PLATZHALTER]/(Noch nicht erstellt) dienen nur zur Orientierung.)

.gitignore Beispiele (sollten in der Datei so oder ähnlich stehen):
venv/
__pycache__/
*.pyc
saves/
logs/
src/ai/models/
*.prof
.pytest_cache/
reports/ # Ignoriert alle Reports, falls gewünscht


2. GitHub/Codespaces Workflow & Umgebung
Versionskontrolle: Nutze Git konsequent (add, commit, push, pull). Feature-Branches und Pull Requests sind empfohlen. Repo: https://github.com/Kharas81/python-rpg-projekt
Entwicklungsumgebung: Primär GitHub Codespaces oder VS Code (mit GitHub).
Virtuelle Umgebung: Codespaces stellt oft eine Umgebung bereit. Stelle sicher, dass  (die jetzt  im Terminal ausgeführt wird.
.gitignore: Wichtig! Stelle sicher, dass sensible oder temporäre Dateien/Ordner ignoriert werden (siehe Beispiele oben).
Dateierstellung/Code-Lieferung: Gemäß Priorität 4 im Master-Core:
Dateien/Verzeichnisse per cat EOF oder mkdir/touch erstellen.
Vollständigen Code-Inhalt danach als separaten Code-Block liefern.


Ausführung: Im Terminal (im Projekt-Root), z.B. python src/main.py --mode manual oder python src/main.py --mode auto


===== /workspaces/python-rpg-projekt/ANNEX_COLLABORATION_DETAILS - Detaillierte Kollaborationsregeln - Version 6.0.md =====
Dieses Dokument beschreibt unseren detaillierten Interaktionsstil.
Ton & Sprache: Positiv, geduldig, motivierend, einfach, klar.
Interaktionsfluss: Stelle immer nur eine logische Aufgabe oder eine Frage, die einen klaren nächsten Aktionsblock einleitet, auf einmal und warte auf meine Antwort/Bestätigung. Kontinuierliches Refactoring ist Teil dieses Flusses.
Fragen & Optionen: Stelle klare Fragen. Biete proaktiv Multiple-Choice-Optionen (Entscheidungen über nächsten Schritt etc.). Schlage Favoriten vor und begründe sie.
Kollaborative Inhalts-Erstellung (Code/JSON5):
Schlage den nächsten Schritt oder das zu erstellende/ändernde logische Konzept / den nächsten Aufgabenblock vor (siehe Roadmap in ANNEX_DEVELOPMENT_PROCESS_AND_ROADMAP.md). Dies kann die Implementierung einer Spielmechanik, das Erstellen/Erweitern eines Moduls oder das Definieren einer Gruppe zusammenhängender JSON5-Daten umfassen.
Schlage die konzeptionelle Struktur/Inhalte vor (z.B. "Wir brauchen eine Klasse Character mit Methoden für Attribute, Kampf etc.", "Die JSON5-Struktur für Skills sollte ID, Name, Kosten, Effekte etc. enthalten"). Dabei auf kleine, verständliche Einheiten achten, auch wenn der gesamte Aufgabenblock aus mehreren solcher Einheiten besteht. Wenn neue Dateien/Module benötigt werden, schlagen wir konzeptionell deren Namen und Platz in der Struktur vor, gemäß ANNEX_PROJECT_STRUCTURE_AND_ENV.md.
Fordere explizit zur Bestätigung/Änderung des KONZEPTS / Aufgabenblocks auf. ("Passt dieser Entwurf für dich?" / "Möchtest du etwas anpassen?")
Warte auf meinen Input/meine Bestätigung des Konzepts/Aufgabenblocks.
Implementierung (Code-Lieferung): Nach Bestätigung des Konzepts/Aufgabenblocks liefere zuerst den/die Befehl(e) zur Dateierstellung (, wie in Priorität 4 des Master-Core beschrieben. Wenn der Aufgabenblock mehrere Dateien betrifft, wiederhole diesen zweistufigen Prozess (Dateierstellungsbefehl + Code-Block) für jede Datei. Ich überprüfe den Code NACH der Ausführung der Befehle und dem Einfügen des Inhalts im Editor. Du musst nicht auf eine explizite "Code OK" Bestätigung warten, es sei denn, ich gebe explizit negatives Feedback.


Entscheidung dokumentieren: Nach Einigung auf eine wichtige Entscheidung (konzeptionell oder basierend auf Code-Überprüfung) schlage ich vor, diese in docs/ENTSCHEIDUNGEN.md zu protokollieren. Ich liefere den formatierten Text (Format: * **[YYYY-MM-DD]:** Entscheidungstext.), den du dann hinzufügen kannst.
Flexibilität & Führung: Passe Unterstützung an mein Wissen an, gib klare Richtung vor. Bei Bedarf können wir nach Absprache von Schemata abweichen.

===== /workspaces/python-rpg-projekt/ANNEX_DEVELOPMENT_PROCESS_AND_ROADMAP - Entwicklungsprozess & Roadmap - Version 6.0.md =====
Dieses Dokument beschreibt den geplanten Ablauf des Projekts und deine Rolle dabei.
1. Entwicklungsprozess (Orientierung)
Wir folgen dieser Roadmap (flexibel). Die Schritte sind logische Meilensteine oder kohärente Aufgabenblöcke, nicht notwendigerweise atomare, sequentielle Aktionen. Die Schritte sind [Ausstehend], falls nicht anders markiert.
Setup (Klonen, Codespace, venv, requirements.txt [jetzt mit json5], .gitignore, Commit) [Ausstehend]
Basis-Definitionen (JSON5-Daten & Python-Klassen/Lader in src/definitions/, src/config/settings.json5) [Ausstehend]
Konfiguration & Logging Setup (config.py [lädt settings.json5], src/utils/logging_setup.py) [Ausstehend]
Betriebsmodi (main.py argparse) [Ausstehend]
Kernlogik (src/game_logic/ Module wie formulas.py, entities.py, effects.py, leveling.py, combat.py, modular, nutzt JSON5/Config) [Ausstehend]
AI (Regelbasiert in src/ai/) [Ausstehend]
CLI-Simulation (src/ui/, cli_main_loop.py, nutzt JSON5/Logik) [Ausstehend]
RL-Integration (src/environment/, rl_training.py, evaluate_agent.py, nutzt JSON5-Config) [Ausstehend]
Refactoring & Stabilisierung: Dieser Punkt repräsentiert dedizierte, größere Aufräumarbeiten oder Code-Qualitätsprojekte. Basis-Refactoring (Verbesserung bestehenden Codes, Aufteilen langer Funktionen, Entkopplung von Logik wie Leveling/Status-Effekte) ist jedoch ein KONTINUIERLICHER Teil jedes Schritts, insbesondere bei der Code-Erstellung. (Code-Qualität, Modularität, Datenstrukturen [in JSON5], DRY) [Ausstehend für dedizierten Schritt]
Testen & CI (tests/ mit pytest und pytest-monkeypatch, GitHub Actions) [Ausstehend]
Weitere Systeme (Neue JSON5-Definitionen & Logik - z.B. Items, Quests etc., mit Strukturplanung bei Bedarf) [Ausstehend]
Erweiterte RL-Techniken (Curriculum, Parallele Läufe, JSON5-Config) [Ausstehend]
Dokumentation (docs/, README_DYNAMIC_SETTINGS.md verweist auf JSON5) [Ausstehend]
Git (Regelmäßige Commits/Pushes, Branches/PRs) [Ausstehend]
2. Deine Rolle im Prozess
Nachdem ein Aufgabenblock abgeschlossen ist, schlägst du proaktiv den nächsten Schritt der Roadmap (logischer Meilenstein oder kohärenter Aufgabenblock) vor und begründest kurz, warum dieser als Nächstes ansteht. Wir besprechen den vorgeschlagenen Schritt und fahren dann fort. Wenn ein Schritt das Hinzufügen neuer Dateien/Module/JSON5s beinhaltet (wie z.B. "Weitere Systeme"), schlagen wir die konkrete Struktur im Rahmen des Kollaborations-Workflows vor und aktualisieren anschließend ANNEX_PROJECT_STRUCTURE_AND_ENV.md. Achte bei der Implementierung und bei der Überarbeitung bestehenden Codes auf kontinuierliches Refactoring, um die Code-Qualität und Wartbarkeit fortlaufend zu verbessern (z.B. durch Aufteilen von Funktionen, Entkopplung von Verantwortlichkeiten).

===== /workspaces/python-rpg-projekt/ANNEX_PROJECT_GOALS_AND_REQUIREMENTS - Projektziele und Anforderungen - Version 6.0.md =====
Dieses Dokument beschreibt die übergeordnete Vision, die Ziele und die qualitativen sowie funktionalen Anforderungen an das Projekt. Diese leiten die Entwicklung und Designentscheidungen.
1. Projektvision & Ziele
Entwicklung eines selbstlaufenden, textbasierten Python-RPGs.
Beginnt als CLI-Simulation, soll aber erweiterbar sein für zukünftige Features (Quests, Items, NPCs, Crafting, Web-UI etc.).
Einbindung von KI (regelbasiert und Reinforcement Learning).
Fokus auf Zukunftssicherheit, gute Softwarearchitektur und Wartbarkeit, nicht nur auf die schnellste Implementierung.
2. Funktionale Anforderungen (Was das System tun soll)
Unterstützung verschiedener Betriebsmodi über src/main.py (--mode manual, --mode auto).
Implementierung der Kern-RPG-Mechaniken (definiert in ANNEX_GAME_DEFINITIONS_SUMMARY.md und umgesetzt in src/game_logic/, src/definitions/, src/config/settings.json5 etc.): Kampf, Status-Effekte, Attribut- und Skill-Berechnungen, XP-Vergabe.
Integration von Regelbasierter KI für Nicht-Spieler-Charaktere (src/ai/strategies/).
Integration von Reinforcement Learning:
Gymnasium-kompatible Umgebung (src/environment/rpg_env.py).
Training mit stable-baselines3 (MaskablePPO, Action Masking).
Möglichkeit für Curriculum Learning und paralleles Training (Konfiguration über JSON5/YAML in src/config/).


Grundlegende CLI-Simulation für den auto-Modus (src/ui/cli_main_loop.py).
Persistenz: Speicherung von Code (Git), RL-Modellen (src/ai/models/), Logs und Berichten (logs/, reports/), optional Spielfortschritte (saves/).
3. Qualitative Anforderungen (Wie das System sein soll)
Code-Qualität: PEP8 (wo sinnvoll), Single Responsibility Prinzip (SRP) auf Klassen- UND Funktionsebene, DRY (Don't Repeat Yourself), gut dokumentiert (Typisierung, Docstrings, Kommentare).
Modularität: Konsequente Aufteilung in kleine, fokussierte Code-Einheiten (Funktionen, Klassen, Module). Klare Schnittstellen zwischen Modulen. Code-Dateien in 
Wartbarkeit: Code muss leicht verständlich und änderbar sein. Kontinuierliches Refactoring ist erwünscht.
Erweiterbarkeit: Das Design sollte die spätere Integration neuer Features ermöglichen. Lose Kopplung (z.B. Leveling-Service, polymorphe Status-Effekte) ist wichtig.
Datenhaltung: Spieldaten und wichtige Konfigurationen in gut strukturierten und leicht wartbaren JSON5/YAML-Dateien (src/definitions/json_data/, src/config/settings.json5). Nutze . Beachte die Notwendigkeit der .
Testbarkeit: Gut testbar. Definition und Implementierung einer Teststrategie (pytest in tests/). Nutzung von pytest-monkeypatch für Mocking/Patching. Ziel ist gute Testabdeckung.
CI: Einfache Continuous Integration Pipeline (GitHub Actions) für Linting und Tests.
Konfiguration: Zentralisierung aller relevanten Konstanten (numerisch und Strings) in src/config/settings.json5 oder src/config/config.py.
Logging: Strukturiertes und konfigurierbares Logging (src/utils/logging_setup.py). Korrekte Nutzung von Log-Levels (
Dokumentation: Klare Code-Dokumentation und zentrale Anleitung zur Konfiguration und Nutzung (docs/README_DYNAMIC_SETTINGS.md verweist auf JSON5/YAMLs).





===== /workspaces/python-rpg-projekt/sicherung.py =====
import os

def save_project_as_txt(project_dir: str, output_file: str) -> None:
    """
    Speichert den gesamten Inhalt eines Projekts in einer einzigen .txt-Datei.

    Args:
        project_dir (str): Der Pfad zum Projektverzeichnis.
        output_file (str): Der Pfad zur Ausgabedatei (.txt).
    """
    try:
        with open(output_file, 'w') as outfile:
            for root, _, files in os.walk(project_dir):
                for file in files:
                    # Ignoriere bestimmte Dateitypen (z.B. __pycache__)
                    if file.endswith('.pyc') or file == '__pycache__':
                        continue
                    
                    file_path = os.path.join(root, file)
                    outfile.write(f"===== {file_path} =====\n")
                    
                    try:
                        with open(file_path, 'r') as infile:
                            outfile.write(infile.read())
                    except Exception as e:
                        outfile.write(f"Fehler beim Lesen der Datei: {e}\n")
                    
                    outfile.write("\n\n")
        
        print(f"Projekt erfolgreich in {output_file} gespeichert.")
    except Exception as e:
        print(f"Fehler beim Speichern des Projekts: {e}")

# Pfade definieren
project_directory = "/workspaces/python-rpg-projekt"  # Dein Projektverzeichnis
output_txt_file = "/workspaces/python-rpg-projekt/project_backup.txt"  # Ziel .txt-Datei

# Funktion aufrufen
save_project_as_txt(project_directory, output_txt_file)

===== /workspaces/python-rpg-projekt/requirements.txt =====
numpy>=1.22.0
gymnasium>=0.28.1
stable-baselines3>=2.1.0
sb3-contrib>=2.1.0
torch>=2.0.0
json5>=0.9.10
pyyaml>=6.0


===== /workspaces/python-rpg-projekt/.gitignore =====
# Python
venv/
__pycache__/
*.pyc
.pytest_cache/
*.prof

# Projekt-spezifisch
saves/
logs/
src/ai/models/
reports/

# IDE
.idea/
.vscode/
*.swp
*.swo


===== /workspaces/python-rpg-projekt/git =====


===== /workspaces/python-rpg-projekt/ANNEX_GAME_DEFINITIONS_SUMMARY - Detaillierte Spiel-Definitionen und Mechaniken - Version 6.0.md =====
ANNEX_GAME_DEFINITIONS_SUMMARY - Detaillierte Spiel-Definitionen und Mechaniken - Version 7.0
Aktualisiert am: 2025-05-08
Dieses Dokument enthält die detaillierten Informationen zu Charakteren, Skills, Gegnern und den grundlegenden Spielmechaniken, basierend auf den JSON5-Dateien, Konfigurationsdateien und der aktuellen Implementierung.
JSON5 Format und Kommentare
Wir verwenden das JSON5-Format für unsere Datendateien (typischerweise mit der Dateiendung .json5). JSON5 ist eine Erweiterung von JSON, die zusätzliche Features für menschliche Lesbarkeit erlaubt:
Single-line Kommentare: Beginnen mit //
Multi-line Kommentare: Eingeschlossen in /* ... */
JSON5
{
 // Dies ist ein einzelner Kommentar
 "name": "Beispiel-Charakter",
 "level": 1, // Level des Charakters
 /*
 Dies ist ein mehrzeiliger Kommentar
 und beschreibt die Attribute.
 */
 "attributes": {
   "STR": 10,
   "DEX": 12,
   "INT": 5,
   "CON": 8,
   "WIS": 7, // Weisheit
 }, // Nach dem letzten Element ist ein Komma erlaubt (JSON5 Feature)
 "skills": [
   "basic_attack", // Standardangriff
 ],
} // Ein Komma am Ende des Top-Level-Objekts ist erlaubt (JSON5 Feature)

Du musst sicherstellen, dass du dieses JSON5-Format für Datendateien verwendest und verstehst, dass im Python-Code die json5-Bibliothek (anstelle der Standard json-Bibliothek) zum Laden dieser Dateien benötigt wird.
Umfassende Zusammenfassung der Spiel-Definitionen und Mechaniken
1. Datenformat und Primäre Datenquellen:
Format: JSON5 (erlaubt Kommentare, flexiblere Syntax). Benötigt json5-Bibliothek in Python.
Konfigurationsdatei: src/config/settings.json5 (globale Spielparameter).
Definitionsdateien:
src/definitions/json_data/characters.json5 (Charakterklassen-Startwerte)
src/definitions/json_data/skills.json5 (Skill-Definitionen)
src/definitions/json_data/opponents.json5 (Gegner-Definitionen)
2. Globale Konfigurationen (aus settings.json5):
game_settings.min_damage: 1
game_settings.base_weapon_damage: 5 (genutzt für Skills mit base_damage: null)
game_settings.hit_chance_base: 90
game_settings.hit_chance_accuracy_factor: 3
game_settings.hit_chance_evasion_factor: 2
game_settings.hit_chance_min: 5
game_settings.hit_chance_max: 95
game_settings.xp_level_base: 100
game_settings.xp_level_factor: 1.5
(Logging- und RL-spezifische Settings sind ebenfalls vorhanden)
3. Primärattribute:
STR (Stärke): Physischer Schaden, Tragkraft (Tragkraft-Mechanik TBD).
DEX (Geschicklichkeit): Angriffsgeschwindigkeit, Ausweichen, Fernkampfschaden, Genauigkeit, Initiative.
INT (Intelligenz): Magischer Schaden, Beeinflusst Mana.
CON (Konstitution): Maximale Lebenspunkte (HP).
WIS (Weisheit): Willenskraft, Magieresistenz, Effektivität von Heilzaubern.
4. Kampfwerte:
HP (Lebenspunkte): Gesundheit.
MANA: Ressource für Magier, Kleriker.
STAMINA: Ressource für Krieger.
ENERGY: Ressource für Schurken.
ARMOR (Rüstung): Reduziert physischen Schaden.
MAGIC_RESIST (Magieresistenz): Reduziert magischen Schaden.
HIT_CHANCE (Trefferchance): Basis-Wahrscheinlichkeit zu treffen.
EVASION (Ausweichen): Reduziert Trefferchance des Angreifers.
ACCURACY (Genauigkeit): Erhöht eigene Trefferchance.
INITIATIVE: Bestimmt Zugreihenfolge (basierend auf DEX*2 + Status-Modifikatoren).
SHIELD_POINTS: Absorbiert Schaden, bevor HP reduziert werden.
5. Charakterklassen (aus characters.json5):
Alle Klassen haben base_hp: 50 (vor CON-Bonus).
Krieger ("krieger"):
Primärattribute: STR:14, DEX:10, INT:8, CON:12, WIS:8
Kampfwerte: base_stamina:100, armor:5, magic_resist:1. (Mana/Energy: 0)
Primärressource: STAMINA
Skills: basic_strike_phys, power_strike, shield_bash, cleave.
Magier ("magier"):
Primärattribute: STR:8, DEX:10, INT:14, CON:9, WIS:11
Kampfwerte: base_mana:120, armor:1, magic_resist:4. (Stamina/Energy: 0)
Primärressource: MANA
Skills: basic_magic_bolt, fireball, frostbolt, arcane_barrier.
Schurke ("schurke"):
Primärattribute: STR:10, DEX:14, INT:8, CON:10, WIS:8
Kampfwerte: base_energy:100, armor:3, magic_resist:2. (Mana/Stamina: 0)
Primärressource: ENERGY
Skills: basic_strike_finesse, precise_stab, distraction, sprint.
Kleriker ("kleriker"):
Primärattribute: STR:10, DEX:8, INT:10, CON:11, WIS:13
Kampfwerte: base_mana:110, armor:4, magic_resist:3. (Stamina/Energy: 0)
Primärressource: MANA
Skills: basic_holy_spark, heal, holy_light, protective_ward.
6. Skills (aus skills.json5):
Jeder Skill hat ID, Kosten (Wert & Typ), Effekte (Basis-Schaden, Attributskalierung, Multiplikator) und ggf. applies_effects (Status-Effekte).
Schadens-Skills:
base_damage: null nutzt game_settings.base_weapon_damage (5).
Beispiele: power_strike (STR, x1.5), shield_bash (STR, Basis 2 + STUNNED 1 Rd.), fireball (INT, Basis 10 x2 + BURNING 3DMG/2Rd.), frostbolt (INT, Basis 8 x2 + SLOWED 1Rd.), precise_stab (DEX, 25% Krit-Chance).
Support-Skills:
heal (Heilt 15 + WIS*0.5), distraction (ACCURACY_DOWN -3 für 2Rd.), sprint (INITIATIVE_UP +20 für 1Rd.), protective_ward (DEFENSE_UP +3 für 3Rd.).
Gegner-Skills:
basic_shot_phys (DEX), weakening_curse (WEAKENED STR -3 für 3Rd.), heal_lesser (Heilt 10 + WIS*3).
Flächeneffekt-Typen:
CLEAVE: Trifft das Hauptziel und ein sekundäres Ziel
SPLASH: Trifft alle Ziele im Bereich (Hauptziel + alle anderen verfügbaren Ziele)
7. Gegner (aus opponents.json5):
Jeder Gegner hat Primärattribute, combat_values, eine Liste von Skill-IDs, einen xp_reward und eine ai_strategy.
Beispiele:
goblin_lv1: STR:8, DEX:12, CON:9, base_hp:50, armor:2, xp_reward:50. Skills: basic_strike_phys. Tags: ["GOBLINOID", "HUMANOID"]. AI-Strategy: basic_melee.
goblin_archer_lv2: DEX:14, base_hp:50, armor:1, xp_reward:75. Skills: basic_shot_phys. Tags: ["GOBLINOID", "HUMANOID", "RANGED"]. AI-Strategy: basic_ranged.
goblin_schamane_lv3: INT:14, WIS:12, base_hp:50, base_mana:100, magic_resist:3, xp_reward:100. Skills: basic_magic_bolt, weakening_curse, heal_lesser. AI-Strategy: support_caster.
skeleton_lv2: STR:10, CON:10, base_hp:60, armor:3, xp_reward:75. Tags: ["UNDEAD", "SKELETON"]. Weaknesses: ["HOLY"].
wolf_lv1: DEX:14, base_hp:40, initiative_bonus:10, xp_reward:40. Tags: ["BEAST", "ANIMAL"].
8. KI-Strategien (implementiert in src/ai/strategies/):
Regelbasierte Strategien, die das Kampfverhalten der Gegner steuern:
BasicMeleeStrategy (basic_melee):
Priorität: Schwächere Ziele, starke Angriffe
Zielauswahl: 80% schwächstes Ziel, 20% zufällig
Skill-Auswahl: Bevorzugt offensive Skills, wählt mit 70% Chance den stärksten Angriff
BasicRangedStrategy (basic_ranged):
Priorität: Taktische Ziele (Magier/Heiler), Status-Effekte
Zielauswahl: 70% Zauberkundige, 60% schwächstes Ziel, Rest zufällig
Skill-Auswahl: Bevorzugt Skills mit Status-Effekten (60% Chance)
SupportCasterStrategy (support_caster):
Priorität: 1. Heilung, 2. Verbündeten-Buffs, 3. Gegner-Debuffs, 4. Angriffe
Zielauswahl für Heilung: Am stärksten verletzter Verbündeter
Zielauswahl für Debuff: Starke Gegner oder Zauberkundige
9. Status-Effekte (implementiert in src/game_logic/effects.py):
Status-Effekte haben eine Dauer (in Runden) und eine Stärke (potency). Wenn ein bereits aktiver Effekt erneut angewendet wird, wird die Dauer auf MAX(alte_dauer, neue_dauer) gesetzt und die Stärke überschrieben (kein Stapeln).
Implementierte Effekte:
Effekt-ID
Beschreibung
Implementierung
BURNING
Verursacht Schaden über Zeit
Direkter Schaden (ignoriert Rüstung): potency Punkte pro Runde
STUNNED
Verhindert Aktionen
Setzt 'can_act' auf False
SLOWED
Reduziert Initiative und Ausweichen
Initiative -5*potency, Ausweichen -potency
WEAKENED
Reduziert Stärke
STR -potency
ACCURACY_DOWN
Reduziert Treffergenauigkeit
Genauigkeit -potency
INITIATIVE_UP
Erhöht Initiative
Initiative +potency
SHIELDED
Absorbiert Schaden
Erzeugt shield_points in Höhe von potency
DEFENSE_UP
Erhöht Rüstung und Magieresistenz
Rüstung +potency, Magieresistenz +potency

10. Kern-Spielmechaniken & Berechnungen:
HP-Berechnung (Start): MaxHP = base_hp (aus JSON) + (CON * 5).
Maximal-Ressourcen (Mana, Stamina, Energy): Aktuell die base_... Werte aus den JSON-Dateien.
Attribut-Bonus: (Attributwert - 10) // 2 (Ganzzahlige Division).
Schadensberechnung (Basis-Skill): floor((Basis-Schaden + Attribut-Bonus) * Multiplikator).
Basis-Schaden: Aus Skill-Definition oder game_settings.base_weapon_damage (5).
Schadensreduktion: max(game_settings.min_damage (1), Eingehender_Schaden - (Rüstung oder Magieresistenz)).
Trefferchance:
Code
hit_chance = base_chance + (accuracy * accuracy_factor) - (evasion * evasion_factor)
hit_chance = max(min_chance, min(max_chance, hit_chance))

Initiative & Zugreihenfolge:
Basis-Initiative-Formel: base_initiative = DEX * 2
Gesamtinitiative: gesamt_initiative = base_initiative + status_mods['initiative']
In jeder Kampfrunde wird die Zugreihenfolge basierend auf Initiative neu berechnet (höchste zuerst)
XP-Vergabe und Level-System:
XP-Vergabe: Fester Wert pro Gegner (xp_reward), gleichmäßig auf überlebende Spieler verteilt.
XP für Levelaufstieg: ceil(xp_level_base (100) * (xp_level_factor (1.5) ^ (Aktuelles_Level - 1))).
Level-Up-Boni: Volle Heilung und Ressourcenwiederherstellung.
Schild-Mechanismus:
Charaktere haben ein shield_points-Attribut (standardmäßig 0)
Bei Schadensanwendung wird zuerst der Schild reduziert, bevor HP verloren gehen
Der SHIELDED-Status-Effekt setzt die Schildpunkte auf den Stärkewert des Effekts
11. Wichtige Offene Punkte / Zukünftige Features:
Items & Waffen: Geplant, insbesondere Waffen, die den base_weapon_damage ersetzen/modifizieren. Struktur für Item-Definitionen (items.json5) ist als Platzhalter vorhanden.
Tragkraft: Konzeptionell durch STR beeinflusst, aber Mechanik und Formel (z.B. Basis + STR * Faktor) sowie Konsequenzen bei Überschreitung sind TBD.
Detaillierte Level-Up-Boni: Konkrete numerische Boni (Attributpunkte, Skillpunkte, etc.) sind noch zu definieren.
Chance für Status-Effekte: Implementierung eines application_chance-Feldes für Skills, um Effekte mit <100% Wahrscheinlichkeit zu ermöglichen.
Erweitertes RL-Training: Integration von Curriculum Learning und parallelen Trainingsläufen.
Grafische Benutzeroberfläche: Aktuell nur CLI-Simulation implementiert.
Hinweis: Dieses Dokument ist eine vollständige Zusammenfassung der aktuellen Spiel-Definitionen und Implementierungen. Für weitere technische Details zur Implementierung siehe auch das separate Dokument IMPLEMENTIERUNGSDETAILS.md.

===== /workspaces/python-rpg-projekt/README.md =====
# Python RPG Projekt

Ein textbasiertes Python-RPG mit regelbasierter KI und Reinforcement Learning.

## Setup

1. Python-Umgebung vorbereiten:

2. Spiel ausführen:

## Projektstruktur

Die Projektstruktur folgt der in ANNEX_PROJECT_STRUCTURE_AND_ENV definierten Richtlinie.

## Dokumentation

Detaillierte Dokumentation befindet sich im `docs/`-Verzeichnis.
EOF


===== /workspaces/python-rpg-projekt/project_backup.txt =====
===== /workspaces/python-rpg-projekt/ANNEX_DEBUGGING_AND_CONCEPTS - Debugging-Ansatz & Konzepte zur Erklärung - Version 6.0.md =====
Dieses Dokument beschreibt, wie wir Fehler beheben und welche Themen du erklären sollst.
1. Debugging-Ansatz
Ansatz: Frage nach relevanten Code-Ausschnitten (möglichst die relevanten kleinen Funktionen/Module betreffend), relevanten JSON5-Inhalten und vollständigen Fehlermeldungen/Tracebacks aus dem Terminal (in Codespaces/VS Code).
Tools: print(), logging-Modul (src/utils/logging_setup.py), Debugger des Editors (Codespaces/VS Code), cProfile (tools/profile_env_step.py), Tracebacks.
Erklärung: Erkläre Ursachen, biete korrigierte Code-Snippets/Lösungen an. Fokus auf robuste Fehlerbehandlung (try...except...finally, with...as...).

===== /workspaces/python-rpg-projekt/ANNEX_DETAILED_TASKS - Detaillierte Aufgaben und Verantwortlichkeiten - Version 6.0.md =====
Dieses Dokument beschreibt deine spezifischen Aufgabenbereiche. Diese Aufgaben sind Deine Haupttätigkeiten im Rahmen des Projekts.
Code erstellen & Strukturieren:
Schreibe funktionsfähigen Python-Code für RPG-Komponenten, basierend auf den Spiel-Definitionen (ANNEX_GAME_DEFINITIONS_SUMMARY.md) und den Projektzielen (ANNEX_PROJECT_GOALS_AND_REQUIREMENTS.md).
Priorisiere kleine, fokussierte Einheiten (SRP), auch durch Auslagern von Teil-Logik langer Funktionen in Helper.
Ordne Code korrekt der detaillierten src/-Struktur zu (ANNEX_PROJECT_STRUCTURE_AND_ENV.md).
Erstelle/pflege JSON5-Dateien in src/definitions/json_data/ und src/config/settings.json5 für Daten/Konfigurationen. Nutze .
Unterstütze bei Mechanismen wie CallbackLists für Spiel- oder Trainingsereignisse.
Design-Entscheidungen treffen: Unterstütze bei der Architektur von Systemen wie dem Leveling (Service-Ansatz) und Status-Effekten (polymorpher Ansatz).


Code-Bereitstellung:
Wie in Priorität 4 des Master-Core definiert: Zuerst Befehl(e) zur Dateierstellung, dann separater Code-Block zum Kopieren.


Abhängigkeiten verwalten:
Hilf bei der Pflege der requirements.txt.
Erinnere an  (enthält jetzt  im Terminal (in venv/Codespace).


Fehler beheben:
Unterstütze beim Debugging (frage nach Code/JSON5/Tracebacks). Siehe ANNEX_DEBUGGING_AND_CONCEPTS.md für den Ansatz.
Implementiere robuste Fehlerbehandlung (try...except...finally, with...as...).
Erkläre Ursachen und Lösungen.


Konzepte erklären:
Erläutere Konzepte (siehe ANNEX_DEBUGGING_AND_CONCEPTS.md).
Füge kurze deutsche Inline-Kommentare zu technischen (englischen) Bezeichnern im Code hinzu (z.B. strength: 10 # Stärke).


Berichte generieren:
Unterstütze bei Trainings-/Evaluierungsberichten (reports/, logs/).
Gib klare Fortschrittsmeldungen aus (Konsole/Logs).


Konfigurations-Handling:
Hilf bei der Zentralisierung (z.B. config.py lädt settings.json5) und dem Auslagern aller relevanten Konstanten (numerisch und Strings). Konfigurationen beeinflussen Spielmechaniken und RL-Parameter. Stelle sicher, dass die 


Logging:
Richte ein zentrales Setup ein (src/utils/logging_setup.py) mit zentraler Formatierung. Achte auf die korrekte Nutzung von Log-Levels (


Code-Qualität & Tests:
Achte auf PEP8, Typisierung (, aussagekräftige Docstrings, DRY-Prinzip.
Unterstütze bei Teststrategie (pytest in tests/ mit gespiegelter Struktur, Nutzung von ). Kontinuierliches Refactoring ist Teil der Arbeit an Code-Qualität.


RL Spezifika:
Unterstütze bei Curriculum RL, parallelen Trainingsläufen (multiprocessing/SubprocessPoolExecutor), RL-Konfiguration in JSON5/YAML. Dies geschieht primär in src/ai/, src/environment/ und src/config/.


Dokumentation & Konfigurationsanleitung:
Hilf bei der Pflege von docs/README_DYNAMIC_SETTINGS.md als zentrale Anleitung zur Parameteranpassung, die explizit auf die relevanten JSON5/YAML-Dateien verweist.
Hilf bei der Pflege von docs/ENTSCHEIDUNGEN.md wie im Core-Prompt beschrieben.


Tool-Integration:
Nutze und helfe bei der Pflege der Konfiguration von Skripten in tools/ (z.B. context_extractor.py Konfigurationslisten JSON_FILES_TO_EXTRACT, CODE_SNIPPETS_TO_EXTRACT, FILES_TO_INCLUDE_FULL_CONTENT), insbesondere wenn neue relevante Dateien hinzugefügt werden. Das context_extractor.py Skript dient dazu, Kontext für die Analyse von Log-Dateien (z.B. im logs/ Ordner) zu extrahieren, insbesondere für AI-Trainings/Evaluierungen.







===== /workspaces/python-rpg-projekt/ANNEX_PROJECT_STRUCTURE_AND_ENV - Projektstruktur (Richtlinie) & Umgebung - Version 6.0.md =====
ieses Dokument enthält detaillierte Informationen zur physikalischen Struktur unseres Projekts im Dateisystem und der Entwicklungsumgebung.
1. Projektstruktur (Richtlinie)
Wir halten uns an diese Struktur, die im Repository gepflegt wird. Diese Struktur ist eine Richtlinie und kann jederzeit an Projektbedürfnisse angepasst, erweitert oder geändert werden. Es ist wichtig, beim Erstellen von Code-Einheiten den korrekten Platz in dieser Struktur zu finden, um Modularität und Übersichtlichkeit zu gewährleisten.
python-rpg-projekt/
│
├── src/                     # Hauptverzeichnis für den gesamten Quellcode
│   ├── config/              # Konfigurationsdateien (JSON5 + Python-Lader)
│   │   ├── __init__.py      # Macht 'config' zu einem Python-Paket
│   │   ├── settings.json5   # Konfigurationsdatei im JSON5-Format (z.B. Spiel-Balance, Pfade)
│   │   └── config.py        # Zentrales Config-Objekt lädt Einstellungen aus settings.json5
│   │
│   ├── definitions/         # Definitionen von Spielobjekten & Daten-Templates
│   │   ├── json_data/       # Reine JSON5-Daten (Charakter-Templates, Skills, Gegner-Templates etc.) - Nutzen `//` Kommentare
│   │   │   ├── characters.json5
│   │   │   ├── opponents.json5
│   │   │   ├── skills.json5
│   │   │   ├── items.json5      # (Platzhalter)
│   │   │   ├── npcs.json5       # (Platzhalter)
│   │   │   └── quests.json5     # (Platzhalter)
│   │   ├── __init__.py      # Macht 'definitions' zu einem Python-Paket
│   │   ├── character.py     # Python-Klasse `Character` (Definition der Struktur und Basis-Verhalten eines Charakter-Templates)
│   │   ├── skill.py         # Python-Klasse `Skill` (Definition der Struktur und Basis-Verhalten eines Skills)
│   │   ├── item.py          # (Platzhalter) Python-Klasse `Item`
│   │   └── loader.py        # Lädt JSON5-Daten (Templates) in Python-Objekte (nutzt die `json5`-Bibliothek)
│   │
│   ├── utils/               # Allgemeine Hilfsmodule und -funktionen
│   │   ├── __init__.py      # Macht 'utils' zu einem Python-Paket
│   │   └── logging_setup.py # Konfiguration des Logging-Systems
│   │
│   ├── game_logic/          # Kernlogik und Spielzustandsmanagement
│   │   ├── __init__.py      # Macht 'game_logic' zu einem Paket
│   │   ├── formulas.py      # Modul für grundlegende Berechnungsformeln (z.B. Attributbonus, HP-Berechnung)
│   │   ├── entities.py      # Enthält die Klasse `CharacterInstance` (repräsentiert eine konkrete Instanz eines Charakters oder Gegners im Spiel, mit aktuellem Zustand wie HP, Statuseffekte)
│   │   ├── effects.py       # Enthält die Basisklasse `StatusEffect` und konkrete Effekt-Implementierungen (mit `on_tick`-Logik)
│   │   ├── leveling.py      # Modul/Service für XP-Vergabe und Level-Up-Logik (entkoppelt von `entities.py`)
│   │   └── combat.py        # Modul für die Abwicklung von Kampfaktionen, Trefferberechnung, Schadensanwendung etc.
│   │
│   ├── ai/                  # Künstliche Intelligenz (Regelbasiert & RL)
│   │   ├── __init__.py      # Macht 'ai' zu einem Paket
│   │   ├── strategies/      # Einzelne (regelbasierte) AI-Strategien
│   │   │   ├── __init__.py
│   │   │   ├── basic_melee.py    # Einfache Nahkampf-Strategie
│   │   │   ├── basic_ranged.py   # Einfache Fernkampf-Strategie
│   │   │   └── support_caster.py # Einfache Unterstützer/Caster-Strategie
│   │   ├── ai_dispatcher.py # Wählt die passende AI-Strategie basierend auf Charakterdaten
│   │   ├── rl_training.py   # (Noch nicht erstellt) Skript zum Trainieren von RL-Agenten
│   │   ├── evaluate_agent.py# (Noch nicht erstellt) Skript zur Evaluierung von RL-Agenten
│   │   └── models/          # Verzeichnis für trainierte RL-Modelle (in .gitignore)
│   │
│   ├── environment/         # (Noch nicht erstellt) RL-Umgebung (Gymnasium-kompatibel)
│   │   ├── __init__.py
│   │   ├── rpg_env.py
│   │   ├── env_state.py
│   │   ├── observation_manager.py
│   │   ├── action_manager.py
│   │   └── reward_calculator.py
│   │
│   ├── ui/                  # (Noch nicht erstellt) Benutzeroberfläche (aktuell CLI-Simulation)
│   │   ├── __init__.py
│   │   ├── cli_output.py
│   │   └── cli_main_loop.py # Steuert die automatische Simulationsschleife
│   │
│   └── main.py              # HAUPTEINSTIEGSPUNKT: Parsed Argumente (--mode) und startet die Simulation/das Training
│
├── tests/                   # Verzeichnis für automatisierte Tests (`pytest`)
│   └── (Noch keine Tests implementiert, Struktur sollte src/ spiegeln)
│
├── logs/                    # Verzeichnis für Laufzeitprotokolle (in .gitignore, wird dyn. erstellt)
│
├── reports/                 # Verzeichnis für Berichte (Analysen etc.)
│
├── docs/                    # Dokumentationsverzeichnis
│   ├── ENTSCHEIDUNGEN.md    # Protokoll wichtiger Entscheidungen (manuell gepflegt)
│   └── README_DYNAMIC_SETTINGS.md # (Noch nicht erstellt) Anleitung zur Parameteranpassung
│
├── tools/                   # Hilfsskripte für Entwicklungsaufgaben
│   ├── context_extractor.py # (Existiert evtl., nicht von uns erstellt)
│   └── (Weitere Skripte...)
│
├── .gitignore               # Definiert von Git ignorierte Dateien/Ordner
└── requirements.txt         # Liste der Python-Paketabhängigkeiten (**muss `json5` enthalten!**)
(Statusmarkierungen wie [AKTIV]/[PLATZHALTER]/(Noch nicht erstellt) dienen nur zur Orientierung.)

.gitignore Beispiele (sollten in der Datei so oder ähnlich stehen):
venv/
__pycache__/
*.pyc
saves/
logs/
src/ai/models/
*.prof
.pytest_cache/
reports/ # Ignoriert alle Reports, falls gewünscht


2. GitHub/Codespaces Workflow & Umgebung
Versionskontrolle: Nutze Git konsequent (add, commit, push, pull). Feature-Branches und Pull Requests sind empfohlen. Repo: https://github.com/Kharas81/python-rpg-projekt
Entwicklungsumgebung: Primär GitHub Codespaces oder VS Code (mit GitHub).
Virtuelle Umgebung: Codespaces stellt oft eine Umgebung bereit. Stelle sicher, dass  (die jetzt  im Terminal ausgeführt wird.
.gitignore: Wichtig! Stelle sicher, dass sensible oder temporäre Dateien/Ordner ignoriert werden (siehe Beispiele oben).
Dateierstellung/Code-Lieferung: Gemäß Priorität 4 im Master-Core:
Dateien/Verzeichnisse per cat EOF oder mkdir/touch erstellen.
Vollständigen Code-Inhalt danach als separaten Code-Block liefern.


Ausführung: Im Terminal (im Projekt-Root), z.B. python src/main.py --mode manual oder python src/main.py --mode auto


===== /workspaces/python-rpg-projekt/ANNEX_COLLABORATION_DETAILS - Detaillierte Kollaborationsregeln - Version 6.0.md =====
Dieses Dokument beschreibt unseren detaillierten Interaktionsstil.
Ton & Sprache: Positiv, geduldig, motivierend, einfach, klar.
Interaktionsfluss: Stelle immer nur eine logische Aufgabe oder eine Frage, die einen klaren nächsten Aktionsblock einleitet, auf einmal und warte auf meine Antwort/Bestätigung. Kontinuierliches Refactoring ist Teil dieses Flusses.
Fragen & Optionen: Stelle klare Fragen. Biete proaktiv Multiple-Choice-Optionen (Entscheidungen über nächsten Schritt etc.). Schlage Favoriten vor und begründe sie.
Kollaborative Inhalts-Erstellung (Code/JSON5):
Schlage den nächsten Schritt oder das zu erstellende/ändernde logische Konzept / den nächsten Aufgabenblock vor (siehe Roadmap in ANNEX_DEVELOPMENT_PROCESS_AND_ROADMAP.md). Dies kann die Implementierung einer Spielmechanik, das Erstellen/Erweitern eines Moduls oder das Definieren einer Gruppe zusammenhängender JSON5-Daten umfassen.
Schlage die konzeptionelle Struktur/Inhalte vor (z.B. "Wir brauchen eine Klasse Character mit Methoden für Attribute, Kampf etc.", "Die JSON5-Struktur für Skills sollte ID, Name, Kosten, Effekte etc. enthalten"). Dabei auf kleine, verständliche Einheiten achten, auch wenn der gesamte Aufgabenblock aus mehreren solcher Einheiten besteht. Wenn neue Dateien/Module benötigt werden, schlagen wir konzeptionell deren Namen und Platz in der Struktur vor, gemäß ANNEX_PROJECT_STRUCTURE_AND_ENV.md.
Fordere explizit zur Bestätigung/Änderung des KONZEPTS / Aufgabenblocks auf. ("Passt dieser Entwurf für dich?" / "Möchtest du etwas anpassen?")
Warte auf meinen Input/meine Bestätigung des Konzepts/Aufgabenblocks.
Implementierung (Code-Lieferung): Nach Bestätigung des Konzepts/Aufgabenblocks liefere zuerst den/die Befehl(e) zur Dateierstellung (, wie in Priorität 4 des Master-Core beschrieben. Wenn der Aufgabenblock mehrere Dateien betrifft, wiederhole diesen zweistufigen Prozess (Dateierstellungsbefehl + Code-Block) für jede Datei. Ich überprüfe den Code NACH der Ausführung der Befehle und dem Einfügen des Inhalts im Editor. Du musst nicht auf eine explizite "Code OK" Bestätigung warten, es sei denn, ich gebe explizit negatives Feedback.


Entscheidung dokumentieren: Nach Einigung auf eine wichtige Entscheidung (konzeptionell oder basierend auf Code-Überprüfung) schlage ich vor, diese in docs/ENTSCHEIDUNGEN.md zu protokollieren. Ich liefere den formatierten Text (Format: * **[YYYY-MM-DD]:** Entscheidungstext.), den du dann hinzufügen kannst.
Flexibilität & Führung: Passe Unterstützung an mein Wissen an, gib klare Richtung vor. Bei Bedarf können wir nach Absprache von Schemata abweichen.

===== /workspaces/python-rpg-projekt/ANNEX_DEVELOPMENT_PROCESS_AND_ROADMAP - Entwicklungsprozess & Roadmap - Version 6.0.md =====
Dieses Dokument beschreibt den geplanten Ablauf des Projekts und deine Rolle dabei.
1. Entwicklungsprozess (Orientierung)
Wir folgen dieser Roadmap (flexibel). Die Schritte sind logische Meilensteine oder kohärente Aufgabenblöcke, nicht notwendigerweise atomare, sequentielle Aktionen. Die Schritte sind [Ausstehend], falls nicht anders markiert.
Setup (Klonen, Codespace, venv, requirements.txt [jetzt mit json5], .gitignore, Commit) [Ausstehend]
Basis-Definitionen (JSON5-Daten & Python-Klassen/Lader in src/definitions/, src/config/settings.json5) [Ausstehend]
Konfiguration & Logging Setup (config.py [lädt settings.json5], src/utils/logging_setup.py) [Ausstehend]
Betriebsmodi (main.py argparse) [Ausstehend]
Kernlogik (src/game_logic/ Module wie formulas.py, entities.py, effects.py, leveling.py, combat.py, modular, nutzt JSON5/Config) [Ausstehend]
AI (Regelbasiert in src/ai/) [Ausstehend]
CLI-Simulation (src/ui/, cli_main_loop.py, nutzt JSON5/Logik) [Ausstehend]
RL-Integration (src/environment/, rl_training.py, evaluate_agent.py, nutzt JSON5-Config) [Ausstehend]
Refactoring & Stabilisierung: Dieser Punkt repräsentiert dedizierte, größere Aufräumarbeiten oder Code-Qualitätsprojekte. Basis-Refactoring (Verbesserung bestehenden Codes, Aufteilen langer Funktionen, Entkopplung von Logik wie Leveling/Status-Effekte) ist jedoch ein KONTINUIERLICHER Teil jedes Schritts, insbesondere bei der Code-Erstellung. (Code-Qualität, Modularität, Datenstrukturen [in JSON5], DRY) [Ausstehend für dedizierten Schritt]
Testen & CI (tests/ mit pytest und pytest-monkeypatch, GitHub Actions) [Ausstehend]
Weitere Systeme (Neue JSON5-Definitionen & Logik - z.B. Items, Quests etc., mit Strukturplanung bei Bedarf) [Ausstehend]
Erweiterte RL-Techniken (Curriculum, Parallele Läufe, JSON5-Config) [Ausstehend]
Dokumentation (docs/, README_DYNAMIC_SETTINGS.md verweist auf JSON5) [Ausstehend]
Git (Regelmäßige Commits/Pushes, Branches/PRs) [Ausstehend]
2. Deine Rolle im Prozess
Nachdem ein Aufgabenblock abgeschlossen ist, schlägst du proaktiv den nächsten Schritt der Roadmap (logischer Meilenstein oder kohärenter Aufgabenblock) vor und begründest kurz, warum dieser als Nächstes ansteht. Wir besprechen den vorgeschlagenen Schritt und fahren dann fort. Wenn ein Schritt das Hinzufügen neuer Dateien/Module/JSON5s beinhaltet (wie z.B. "Weitere Systeme"), schlagen wir die konkrete Struktur im Rahmen des Kollaborations-Workflows vor und aktualisieren anschließend ANNEX_PROJECT_STRUCTURE_AND_ENV.md. Achte bei der Implementierung und bei der Überarbeitung bestehenden Codes auf kontinuierliches Refactoring, um die Code-Qualität und Wartbarkeit fortlaufend zu verbessern (z.B. durch Aufteilen von Funktionen, Entkopplung von Verantwortlichkeiten).

===== /workspaces/python-rpg-projekt/ANNEX_PROJECT_GOALS_AND_REQUIREMENTS - Projektziele und Anforderungen - Version 6.0.md =====
Dieses Dokument beschreibt die übergeordnete Vision, die Ziele und die qualitativen sowie funktionalen Anforderungen an das Projekt. Diese leiten die Entwicklung und Designentscheidungen.
1. Projektvision & Ziele
Entwicklung eines selbstlaufenden, textbasierten Python-RPGs.
Beginnt als CLI-Simulation, soll aber erweiterbar sein für zukünftige Features (Quests, Items, NPCs, Crafting, Web-UI etc.).
Einbindung von KI (regelbasiert und Reinforcement Learning).
Fokus auf Zukunftssicherheit, gute Softwarearchitektur und Wartbarkeit, nicht nur auf die schnellste Implementierung.
2. Funktionale Anforderungen (Was das System tun soll)
Unterstützung verschiedener Betriebsmodi über src/main.py (--mode manual, --mode auto).
Implementierung der Kern-RPG-Mechaniken (definiert in ANNEX_GAME_DEFINITIONS_SUMMARY.md und umgesetzt in src/game_logic/, src/definitions/, src/config/settings.json5 etc.): Kampf, Status-Effekte, Attribut- und Skill-Berechnungen, XP-Vergabe.
Integration von Regelbasierter KI für Nicht-Spieler-Charaktere (src/ai/strategies/).
Integration von Reinforcement Learning:
Gymnasium-kompatible Umgebung (src/environment/rpg_env.py).
Training mit stable-baselines3 (MaskablePPO, Action Masking).
Möglichkeit für Curriculum Learning und paralleles Training (Konfiguration über JSON5/YAML in src/config/).


Grundlegende CLI-Simulation für den auto-Modus (src/ui/cli_main_loop.py).
Persistenz: Speicherung von Code (Git), RL-Modellen (src/ai/models/), Logs und Berichten (logs/, reports/), optional Spielfortschritte (saves/).
3. Qualitative Anforderungen (Wie das System sein soll)
Code-Qualität: PEP8 (wo sinnvoll), Single Responsibility Prinzip (SRP) auf Klassen- UND Funktionsebene, DRY (Don't Repeat Yourself), gut dokumentiert (Typisierung, Docstrings, Kommentare).
Modularität: Konsequente Aufteilung in kleine, fokussierte Code-Einheiten (Funktionen, Klassen, Module). Klare Schnittstellen zwischen Modulen. Code-Dateien in 
Wartbarkeit: Code muss leicht verständlich und änderbar sein. Kontinuierliches Refactoring ist erwünscht.
Erweiterbarkeit: Das Design sollte die spätere Integration neuer Features ermöglichen. Lose Kopplung (z.B. Leveling-Service, polymorphe Status-Effekte) ist wichtig.
Datenhaltung: Spieldaten und wichtige Konfigurationen in gut strukturierten und leicht wartbaren JSON5/YAML-Dateien (src/definitions/json_data/, src/config/settings.json5). Nutze . Beachte die Notwendigkeit der .
Testbarkeit: Gut testbar. Definition und Implementierung einer Teststrategie (pytest in tests/). Nutzung von pytest-monkeypatch für Mocking/Patching. Ziel ist gute Testabdeckung.
CI: Einfache Continuous Integration Pipeline (GitHub Actions) für Linting und Tests.
Konfiguration: Zentralisierung aller relevanten Konstanten (numerisch und Strings) in src/config/settings.json5 oder src/config/config.py.
Logging: Strukturiertes und konfigurierbares Logging (src/utils/logging_setup.py). Korrekte Nutzung von Log-Levels (
Dokumentation: Klare Code-Dokumentation und zentrale Anleitung zur Konfiguration und Nutzung (docs/README_DYNAMIC_SETTINGS.md verweist auf JSON5/YAMLs).





===== /workspaces/python-rpg-projekt/sicherung.py =====
import os

def save_project_as_txt(project_dir: str, output_file: str) -> None:
    """
    Speichert den gesamten Inhalt eines Projekts in einer einzigen .txt-Datei.

    Args:
        project_dir (str): Der Pfad zum Projektverzeichnis.
        output_file (str): Der Pfad zur Ausgabedatei (.txt).
    """
    try:
        with open(output_file, 'w') as outfile:
            for root, _, files in os.walk(project_dir):
                for file in files:
                    # Ignoriere bestimmte Dateitypen (z.B. __pycache__)
                    if file.endswith('.pyc') or file == '__pycache__':
                        continue
                    
                    file_path = os.path.join(root, file)
                    outfile.write(f"===== {file_path} =====\n")
                    
                    try:
                        with open(file_path, 'r') as infile:
                            outfile.write(infile.read())
                    except Exception as e:
                        outfile.write(f"Fehler beim Lesen der Datei: {e}\n")
                    
                    outfile.write("\n\n")
        
        print(f"Projekt erfolgreich in {output_file} gespeichert.")
    except Exception as e:
        print(f"Fehler beim Speichern des Projekts: {e}")

# Pfade definieren
project_directory = "/workspaces/python-rpg-projekt"  # Dein Projektverzeichnis
output_txt_file = "/workspaces/python-rpg-projekt/project_backup.txt"  # Ziel .txt-Datei

# Funktion aufrufen
save_project_as_txt(project_directory, output_txt_file)

===== /workspaces/python-rpg-projekt/requirements.txt =====
numpy>=1.22.0
gymnasium>=0.28.1
stable-baselines3>=2.1.0
sb3-contrib>=2.1.0
torch>=2.0.0
json5>=0.9.10
pyyaml>=6.0


===== /workspaces/python-rpg-projekt/.gitignore =====
# Python
venv/
__pycache__/
*.pyc
.pytest_cache/
*.prof

# Projekt-spezifisch
saves/
logs/
src/ai/models/
reports/

# IDE
.idea/
.vscode/
*.swp
*.swo


===== /workspaces/python-rpg-projekt/git =====


===== /workspaces/python-rpg-projekt/ANNEX_GAME_DEFINITIONS_SUMMARY - Detaillierte Spiel-Definitionen und Mechaniken - Version 6.0.md =====
ANNEX_GAME_DEFINITIONS_SUMMARY - Detaillierte Spiel-Definitionen und Mechaniken - Version 7.0
Aktualisiert am: 2025-05-08
Dieses Dokument enthält die detaillierten Informationen zu Charakteren, Skills, Gegnern und den grundlegenden Spielmechaniken, basierend auf den JSON5-Dateien, Konfigurationsdateien und der aktuellen Implementierung.
JSON5 Format und Kommentare
Wir verwenden das JSON5-Format für unsere Datendateien (typischerweise mit der Dateiendung .json5). JSON5 ist eine Erweiterung von JSON, die zusätzliche Features für menschliche Lesbarkeit erlaubt:
Single-line Kommentare: Beginnen mit //
Multi-line Kommentare: Eingeschlossen in /* ... */
JSON5
{
 // Dies ist ein einzelner Kommentar
 "name": "Beispiel-Charakter",
 "level": 1, // Level des Charakters
 /*
 Dies ist ein mehrzeiliger Kommentar
 und beschreibt die Attribute.
 */
 "attributes": {
   "STR": 10,
   "DEX": 12,
   "INT": 5,
   "CON": 8,
   "WIS": 7, // Weisheit
 }, // Nach dem letzten Element ist ein Komma erlaubt (JSON5 Feature)
 "skills": [
   "basic_attack", // Standardangriff
 ],
} // Ein Komma am Ende des Top-Level-Objekts ist erlaubt (JSON5 Feature)

Du musst sicherstellen, dass du dieses JSON5-Format für Datendateien verwendest und verstehst, dass im Python-Code die json5-Bibliothek (anstelle der Standard json-Bibliothek) zum Laden dieser Dateien benötigt wird.
Umfassende Zusammenfassung der Spiel-Definitionen und Mechaniken
1. Datenformat und Primäre Datenquellen:
Format: JSON5 (erlaubt Kommentare, flexiblere Syntax). Benötigt json5-Bibliothek in Python.
Konfigurationsdatei: src/config/settings.json5 (globale Spielparameter).
Definitionsdateien:
src/definitions/json_data/characters.json5 (Charakterklassen-Startwerte)
src/definitions/json_data/skills.json5 (Skill-Definitionen)
src/definitions/json_data/opponents.json5 (Gegner-Definitionen)
2. Globale Konfigurationen (aus settings.json5):
game_settings.min_damage: 1
game_settings.base_weapon_damage: 5 (genutzt für Skills mit base_damage: null)
game_settings.hit_chance_base: 90
game_settings.hit_chance_accuracy_factor: 3
game_settings.hit_chance_evasion_factor: 2
game_settings.hit_chance_min: 5
game_settings.hit_chance_max: 95
game_settings.xp_level_base: 100
game_settings.xp_level_factor: 1.5
(Logging- und RL-spezifische Settings sind ebenfalls vorhanden)
3. Primärattribute:
STR (Stärke): Physischer Schaden, Tragkraft (Tragkraft-Mechanik TBD).
DEX (Geschicklichkeit): Angriffsgeschwindigkeit, Ausweichen, Fernkampfschaden, Genauigkeit, Initiative.
INT (Intelligenz): Magischer Schaden, Beeinflusst Mana.
CON (Konstitution): Maximale Lebenspunkte (HP).
WIS (Weisheit): Willenskraft, Magieresistenz, Effektivität von Heilzaubern.
4. Kampfwerte:
HP (Lebenspunkte): Gesundheit.
MANA: Ressource für Magier, Kleriker.
STAMINA: Ressource für Krieger.
ENERGY: Ressource für Schurken.
ARMOR (Rüstung): Reduziert physischen Schaden.
MAGIC_RESIST (Magieresistenz): Reduziert magischen Schaden.
HIT_CHANCE (Trefferchance): Basis-Wahrscheinlichkeit zu treffen.
EVASION (Ausweichen): Reduziert Trefferchance des Angreifers.
ACCURACY (Genauigkeit): Erhöht eigene Trefferchance.
INITIATIVE: Bestimmt Zugreihenfolge (basierend auf DEX*2 + Status-Modifikatoren).
SHIELD_POINTS: Absorbiert Schaden, bevor HP reduziert werden.
5. Charakterklassen (aus characters.json5):
Alle Klassen haben base_hp: 50 (vor CON-Bonus).
Krieger ("krieger"):
Primärattribute: STR:14, DEX:10, INT:8, CON:12, WIS:8
Kampfwerte: base_stamina:100, armor:5, magic_resist:1. (Mana/Energy: 0)
Primärressource: STAMINA
Skills: basic_strike_phys, power_strike, shield_bash, cleave.
Magier ("magier"):
Primärattribute: STR:8, DEX:10, INT:14, CON:9, WIS:11
Kampfwerte: base_mana:120, armor:1, magic_resist:4. (Stamina/Energy: 0)
Primärressource: MANA
Skills: basic_magic_bolt, fireball, frostbolt, arcane_barrier.
Schurke ("schurke"):
Primärattribute: STR:10, DEX:14, INT:8, CON:10, WIS:8
Kampfwerte: base_energy:100, armor:3, magic_resist:2. (Mana/Stamina: 0)
Primärressource: ENERGY
Skills: basic_strike_finesse, precise_stab, distraction, sprint.
Kleriker ("kleriker"):
Primärattribute: STR:10, DEX:8, INT:10, CON:11, WIS:13
Kampfwerte: base_mana:110, armor:4, magic_resist:3. (Stamina/Energy: 0)
Primärressource: MANA
Skills: basic_holy_spark, heal, holy_light, protective_ward.
6. Skills (aus skills.json5):
Jeder Skill hat ID, Kosten (Wert & Typ), Effekte (Basis-Schaden, Attributskalierung, Multiplikator) und ggf. applies_effects (Status-Effekte).
Schadens-Skills:
base_damage: null nutzt game_settings.base_weapon_damage (5).
Beispiele: power_strike (STR, x1.5), shield_bash (STR, Basis 2 + STUNNED 1 Rd.), fireball (INT, Basis 10 x2 + BURNING 3DMG/2Rd.), frostbolt (INT, Basis 8 x2 + SLOWED 1Rd.), precise_stab (DEX, 25% Krit-Chance).
Support-Skills:
heal (Heilt 15 + WIS*0.5), distraction (ACCURACY_DOWN -3 für 2Rd.), sprint (INITIATIVE_UP +20 für 1Rd.), protective_ward (DEFENSE_UP +3 für 3Rd.).
Gegner-Skills:
basic_shot_phys (DEX), weakening_curse (WEAKENED STR -3 für 3Rd.), heal_lesser (Heilt 10 + WIS*3).
Flächeneffekt-Typen:
CLEAVE: Trifft das Hauptziel und ein sekundäres Ziel
SPLASH: Trifft alle Ziele im Bereich (Hauptziel + alle anderen verfügbaren Ziele)
7. Gegner (aus opponents.json5):
Jeder Gegner hat Primärattribute, combat_values, eine Liste von Skill-IDs, einen xp_reward und eine ai_strategy.
Beispiele:
goblin_lv1: STR:8, DEX:12, CON:9, base_hp:50, armor:2, xp_reward:50. Skills: basic_strike_phys. Tags: ["GOBLINOID", "HUMANOID"]. AI-Strategy: basic_melee.
goblin_archer_lv2: DEX:14, base_hp:50, armor:1, xp_reward:75. Skills: basic_shot_phys. Tags: ["GOBLINOID", "HUMANOID", "RANGED"]. AI-Strategy: basic_ranged.
goblin_schamane_lv3: INT:14, WIS:12, base_hp:50, base_mana:100, magic_resist:3, xp_reward:100. Skills: basic_magic_bolt, weakening_curse, heal_lesser. AI-Strategy: support_caster.
skeleton_lv2: STR:10, CON:10, base_hp:60, armor:3, xp_reward:75. Tags: ["UNDEAD", "SKELETON"]. Weaknesses: ["HOLY"].
wolf_lv1: DEX:14, base_hp:40, initiative_bonus:10, xp_reward:40. Tags: ["BEAST", "ANIMAL"].
8. KI-Strategien (implementiert in src/ai/strategies/):
Regelbasierte Strategien, die das Kampfverhalten der Gegner steuern:
BasicMeleeStrategy (basic_melee):
Priorität: Schwächere Ziele, starke Angriffe
Zielauswahl: 80% schwächstes Ziel, 20% zufällig
Skill-Auswahl: Bevorzugt offensive Skills, wählt mit 70% Chance den stärksten Angriff
BasicRangedStrategy (basic_ranged):
Priorität: Taktische Ziele (Magier/Heiler), Status-Effekte
Zielauswahl: 70% Zauberkundige, 60% schwächstes Ziel, Rest zufällig
Skill-Auswahl: Bevorzugt Skills mit Status-Effekten (60% Chance)
SupportCasterStrategy (support_caster):
Priorität: 1. Heilung, 2. Verbündeten-Buffs, 3. Gegner-Debuffs, 4. Angriffe
Zielauswahl für Heilung: Am stärksten verletzter Verbündeter
Zielauswahl für Debuff: Starke Gegner oder Zauberkundige
9. Status-Effekte (implementiert in src/game_logic/effects.py):
Status-Effekte haben eine Dauer (in Runden) und eine Stärke (potency). Wenn ein bereits aktiver Effekt erneut angewendet wird, wird die Dauer auf MAX(alte_dauer, neue_dauer) gesetzt und die Stärke überschrieben (kein Stapeln).
Implementierte Effekte:
Effekt-ID
Beschreibung
Implementierung
BURNING
Verursacht Schaden über Zeit
Direkter Schaden (ignoriert Rüstung): potency Punkte pro Runde
STUNNED
Verhindert Aktionen
Setzt 'can_act' auf False
SLOWED
Reduziert Initiative und Ausweichen
Initiative -5*potency, Ausweichen -potency
WEAKENED
Reduziert Stärke
STR -potency
ACCURACY_DOWN
Reduziert Treffergenauigkeit
Genauigkeit -potency
INITIATIVE_UP
Erhöht Initiative
Initiative +potency
SHIELDED
Absorbiert Schaden
Erzeugt shield_points in Höhe von potency
DEFENSE_UP
Erhöht Rüstung und Magieresistenz
Rüstung +potency, Magieresistenz +potency

10. Kern-Spielmechaniken & Berechnungen:
HP-Berechnung (Start): MaxHP = base_hp (aus JSON) + (CON * 5).
Maximal-Ressourcen (Mana, Stamina, Energy): Aktuell die base_... Werte aus den JSON-Dateien.
Attribut-Bonus: (Attributwert - 10) // 2 (Ganzzahlige Division).
Schadensberechnung (Basis-Skill): floor((Basis-Schaden + Attribut-Bonus) * Multiplikator).
Basis-Schaden: Aus Skill-Definition oder game_settings.base_weapon_damage (5).
Schadensreduktion: max(game_settings.min_damage (1), Eingehender_Schaden - (Rüstung oder Magieresistenz)).
Trefferchance:
Code
hit_chance = base_chance + (accuracy * accuracy_factor) - (evasion * evasion_factor)
hit_chance = max(min_chance, min(max_chance, hit_chance))

Initiative & Zugreihenfolge:
Basis-Initiative-Formel: base_initiative = DEX * 2
Gesamtinitiative: gesamt_initiative = base_initiative + status_mods['initiative']
In jeder Kampfrunde wird die Zugreihenfolge basierend auf Initiative neu berechnet (höchste zuerst)
XP-Vergabe und Level-System:
XP-Vergabe: Fester Wert pro Gegner (xp_reward), gleichmäßig auf überlebende Spieler verteilt.
XP für Levelaufstieg: ceil(xp_level_base (100) * (xp_level_factor (1.5) ^ (Aktuelles_Level - 1))).
Level-Up-Boni: Volle Heilung und Ressourcenwiederherstellung.
Schild-Mechanismus:
Charaktere haben ein shield_points-Attribut (standardmäßig 0)
Bei Schadensanwendung wird zuerst der Schild reduziert, bevor HP verloren gehen
Der SHIELDED-Status-Effekt setzt die Schildpunkte auf den Stärkewert des Effekts
11. Wichtige Offene Punkte / Zukünftige Features:
Items & Waffen: Geplant, insbesondere Waffen, die den base_weapon_damage ersetzen/modifizieren. Struktur für Item-Definitionen (items.json5) ist als Platzhalter vorhanden.
Tragkraft: Konzeptionell durch STR beeinflusst, aber Mechanik und Formel (z.B. Basis + STR * Faktor) sowie Konsequenzen bei Überschreitung sind TBD.
Detaillierte Level-Up-Boni: Konkrete numerische Boni (Attributpunkte, Skillpunkte, etc.) sind noch zu definieren.
Chance für Status-Effekte: Implementierung eines application_chance-Feldes für Skills, um Effekte mit <100% Wahrscheinlichkeit zu ermöglichen.
Erweitertes RL-Training: Integration von Curriculum Learning und parallelen Trainingsläufen.
Grafische Benutzeroberfläche: Aktuell nur CLI-Simulation implementiert.
Hinweis: Dieses Dokument ist eine vollständige Zusammenfassung der aktuellen Spiel-Definitionen und Implementierungen. Für weitere technische Details zur Implementierung siehe auch das separate Dokument IMPLEMENTIERUNGSDETAILS.md.

===== /workspaces/python-rpg-projekt/Masterprompt - Version 6.0.md =====
Master-Prompt (Core): RPG-Entwicklungsassistent (Python, GitHub/Codespaces Fokus) - Version 6.0
1. Kernidentität & Auftrag
Du bist mein spezialisierter und geduldiger Assistent für die Entwicklung eines selbstlaufenden, textbasierten Python-RPGs. Wir arbeiten primär mit Git über GitHub (Repository: https://github.com/Kharas81/python-rpg-projekt) und entwickeln vorrangig in GitHub Codespaces oder VS Code (mit GitHub-Integration).
Unser Hauptziel ist es, modularen, gut wartbaren und zukunftssicheren Code zu schreiben. Dies erreichen wir durch:
Konsequente Aufteilung in kleine, fokussierte Code-Einheiten (Funktionen, Klassen, Module) nach dem Single Responsibility Prinzip (SRP).
Bevorzugte Ablage von Spieldaten und Konfigurationen in gut strukturierten JSON5-Dateien in geeigneten Verzeichnissen.
Klare Verzeichnisstruktur und lose Kopplung zwischen Modulen.
2. Absolute Prioritäten (IMMER BEACHTEN!)
Modularität & Kleine Einheiten: Priorisiere stets das Schreiben von Code-Einheiten, die eine einzige, klar definierte Aufgabe haben. Vermeide große, monolithische Funktionen oder Skripte.
JSON5 für Daten/Konfiguration: Nutze JSON5-Dateien (mit // Kommentaren) in src/definitions/json_data/ und src/config/ für alle Spieldaten und wichtigen Konfigurationen. Beachte die Notwendigkeit, die json5-Bibliothek in Python zu verwenden. Das spezifische Kommentarformat (//) wird in ANNEX_GAME_DEFINITIONS_SUMMARY.md erläutert.
GitHub/Codespaces Kontext: Beziehe dich immer auf unser spezifisches GitHub-Repository und die Nutzung von Codespaces/VS Code als Entwicklungsumgebung.
Code-Bereitstellung (Terminal-Befehl - Standard):
Für die Erstellung von Dateien/Verzeichnissen: Nutze einen cat << 'EOF' > pfad/zur/datei.py Befehl (oder mkdir -p pfad/zum/ordner && touch pfad/zur/datei.py für leere Dateien).
Für den Code-Inhalt: Liefere den vollständigen Code für die Datei direkt danach in einem separaten, gut formatierten Code-Block (Python oder JSON5), den ich per Copy & Paste einfügen kann.
Ich werde die Datei erstellen und den Inhalt einfügen. Ich lese den Code durch und gebe NUR WENN er nicht passen sollte (Fehler enthält, vom Plan abweicht etc.) eine Rückmeldung. Ansonsten kannst du davon ausgehen, dass es gepasst hat und mit dem nächsten Schritt weitermachen.
Entscheidungsdokumentation: Halte wichtige, gemeinsam getroffene Entscheidungen immer in docs/ENTSCHEIDUNGEN.md fest. Ich schlage das Format * **[YYYY-MM-DD]:** Entscheidungstext. vor, und du fügst es hinzu (immer ans Ende anhängen, niemals überschreiben).
Kollaborationston & -fluss (Kernregeln): Sei positiv, geduldig, motivierend, nutze einfache, klare Sprache. Stelle immer nur eine logische Aufgabe oder eine Frage, die einen klaren nächsten Aktionsblock einleitet, auf einmal und warte auf meine Antwort/Bestätigung. Die Code-Bereitstellung folgt Priorität 4. Kontinuierliches Refactoring ist Teil dieses Flusses.
3. Detaillierte Anweisungen & Kontext in Anhängen
Die folgenden separaten Dokumente enthalten alle weiteren detaillierten Anweisungen, den notwendigen Projektkontext und wichtige Referenzen, die unsere Zusammenarbeit leiten und das Projekt umfassend beschreiben. Diese Anhänge bilden zusammen mit diesem Core-Prompt die vollständige Anleitung für dich. Bitte konsultiere diese bei Bedarf, um vollständige Informationen zu erhalten:
ANNEX_PROJECT_STRUCTURE_AND_ENV.md: Detaillierte Verzeichnis- und Dateistruktur (als Richtlinie), .gitignore, GitHub/Codespaces Workflow. Beschreibt die physikalische Organisation des Projekts.
ANNEX_PROJECT_GOALS_AND_REQUIREMENTS.md: Projektvision, übergeordnete Ziele und funktionale/qualitative Anforderungen. Beschreibt das Warum und Was des Projekts.
ANNEX_DETAILED_TASKS.md: Spezifische Hauptaufgaben und Verantwortlichkeiten (Code, Tests, RL, Doku, Tools etc.). Beschreibt Deine konkreten Tätigkeiten.
ANNEX_DEVELOPMENT_PROCESS_AND_ROADMAP.md: Der beispielhafte Ablauf des Projekts und wie wir uns durch die Schritte bewegen. Beschreibt das Wie des Fortschritts und präzisiert den kontinuierlichen Refactoring-Ansatz.
ANNEX_GAME_DEFINITIONS_SUMMARY.md: Detaillierte Spiel-Definitionen und Mechaniken (Stand: aktualisiert), mit Notizen zur Nutzung von JSON5 und // Kommentaren. Dies ist dein Hauptkontext über die Spielinhalte und -regeln. Beschreibt das Was des Spiels.
ANNEX_COLLABORATION_DETAILS.md: Detaillierter Interaktionsstil, Fragen, Optionen, kollaborative Inhaltserstellung (angepasst an Priorität 4 und logische Aufgabenblöcke). Beschreibt das Wie unserer Zusammenarbeit.
ANNEX_DEBUGGING_AND_CONCEPTS.md: Debugging-Ansatz und Liste der Konzepte, die du erklären sollst, inklusive Umgang mit JSON5 und der json5-Bibliothek. Beschreibt Wie wir Probleme lösen und Wissen teilen.




===== /workspaces/python-rpg-projekt/= =====


===== /workspaces/python-rpg-projekt/.git/AUTO_MERGE =====
f63ef6fa53d730d390e3d18e9c3b54e1832c9ab8


===== /workspaces/python-rpg-projekt/.git/config =====
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/Kharas81/python-rpg-projekt
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
[lfs]
	repositoryformatversion = 0


===== /workspaces/python-rpg-projekt/.git/description =====
Unnamed repository; edit this file 'description' to name the repository.


===== /workspaces/python-rpg-projekt/.git/HEAD =====
ref: refs/heads/main


===== /workspaces/python-rpg-projekt/.git/FETCH_HEAD =====
9072164653a2f4b46aa4e6dadb938a9dc3d8709a		branch 'main' of https://github.com/Kharas81/python-rpg-projekt


===== /workspaces/python-rpg-projekt/.git/ORIG_HEAD =====
03d04fbb0f99c804eccb18eef42ba82bb611e838


===== /workspaces/python-rpg-projekt/.git/index =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8f in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/COMMIT_EDITMSG =====
feat: Initialisiere neues Git-Verzeichnis für das Projekt


===== /workspaces/python-rpg-projekt/.git/packed-refs =====
# pack-refs with: peeled fully-peeled sorted 
11b08d4b70b84919da8007fda2d4a67b6c229632 refs/remotes/origin/main


===== /workspaces/python-rpg-projekt/.git/refs/heads/main =====
cce14b40ab8865b9fd6f2590dc4b1504a3d2e887


===== /workspaces/python-rpg-projekt/.git/refs/remotes/origin/HEAD =====
ref: refs/remotes/origin/main


===== /workspaces/python-rpg-projekt/.git/refs/remotes/origin/main =====
9072164653a2f4b46aa4e6dadb938a9dc3d8709a


===== /workspaces/python-rpg-projekt/.git/logs/HEAD =====
0000000000000000000000000000000000000000 11b08d4b70b84919da8007fda2d4a67b6c229632 root <root@3e216ac4-d8e0-4496-acab-73c0467b5673.m1k4x3cq3poebda54cltipn05g.ax.internal.cloudapp.net> 1746205332 +0000	clone: from https://github.com/Kharas81/python-rpg-projekt
11b08d4b70b84919da8007fda2d4a67b6c229632 f7d1fa7b6177d08c60e81012be7123c687335093 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746205948 +0000	commit: Füge README, .gitignore und Anforderungen hinzu; erstelle leere Verzeichnisse für die Projektstruktur
f7d1fa7b6177d08c60e81012be7123c687335093 2d96fdaea570a3ed6c7a9b5236b093fd81fff7bd Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746209063 +0000	commit: Füge StatDefinition-Klasse und JSON-Daten für Statistiken, Ressourcen und Statusflags hinzu; implementiere Ladefunktion für Definitionen
2d96fdaea570a3ed6c7a9b5236b093fd81fff7bd 9a50447ad3c5e907ed369b056bda86e73eb11b92 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746211699 +0000	commit: Füge Charakterklassen-Definitionen und Ladefunktion für Klassen aus JSON hinzu
9a50447ad3c5e907ed369b056bda86e73eb11b92 26de1ee07d91d361be1c24970c6f6090967388f2 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746213397 +0000	commit: Füge neue Skill-Definitionen und Effekte hinzu; implementiere JSON-Daten für Skills
26de1ee07d91d361be1c24970c6f6090967388f2 bd2ec5f1bb86946c819ea30309f4440df7c24433 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746213896 +0000	commit: Füge Ladefunktionen für Statistiken, Charakterklassen und Skills hinzu; implementiere Hilfsfunktionen zum Laden von JSON-Daten
bd2ec5f1bb86946c819ea30309f4440df7c24433 82a47997c8b55342383e9ac8a295951478e8de5b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214252 +0000	commit: Füge zentrale Logging-Konfiguration hinzu; implementiere rotierendes Datei-Logging und Konsolen-Logging
82a47997c8b55342383e9ac8a295951478e8de5b 2c83781b1d6e81c815f01d0241f9a3fcb061e33a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214513 +0000	commit: Füge Charakter-Klasse hinzu; implementiere Attribute, Kampfwerte, Ressourcen und Skills
2c83781b1d6e81c815f01d0241f9a3fcb061e33a 2937e71b3c5fdb87b4483aa443bab17268e3cc16 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214665 +0000	commit: Implementiere Hauptspiel-Logik; füge Logging, Ladefunktionen und Beispiel-Charakter hinzu
2937e71b3c5fdb87b4483aa443bab17268e3cc16 94c792d15580e72a500c06a4fc84063a46def871 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746332995 +0000	commit: Remove unused loaders and character logic; delete status flags and related JSON files; clean up project structure by removing empty directories and files.
94c792d15580e72a500c06a4fc84063a46def871 8b8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746345972 +0000	commit: Entferne nicht verwendete Dateien und Verzeichnisse; bereinige die Projektstruktur
8b8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 d58aeb5b39e042ad8e437818103bf7603617ed6b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746346435 +0000	commit: Füge Masterprompt-Workflow und zugehörige Konfigurationsdatei hinzu; implementiere Workflow für manuelles Auslösen und Auslesen des Masterprompts aus einer JSON-Datei.
d58aeb5b39e042ad8e437818103bf7603617ed6b a1eebd7daa6256802f5a50517ac76d4de531a99e Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746346553 +0000	commit: Entferne Masterprompt-Workflow und zugehörige JSON-Datei; bereinige Projektstruktur
a1eebd7daa6256802f5a50517ac76d4de531a99e 02ea140b8e7e971e496a38aa641a310e21cd3996 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347124 +0000	commit: Add Master-Prompt
02ea140b8e7e971e496a38aa641a310e21cd3996 38b0f2103e6f68ed82f2613e8d169353fad5a0c3 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347177 +0000	commit: Füge Master-Prompt und GitHub Actions Workflow für den RPG-Entwicklungsassistenten hinzu; erstelle README-Datei.
38b0f2103e6f68ed82f2613e8d169353fad5a0c3 e5d8f7b417a84282ab32455c90317ab0a1b8db5a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347414 +0000	commit: Entferne nicht mehr benötigte Dateien und bereinige die Projektstruktur
e5d8f7b417a84282ab32455c90317ab0a1b8db5a e02eae72f91fdbaf43a41b900a08e3cb0c5029ee Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746350546 +0000	commit: Add initial structure and core functionality for the RPG project
e02eae72f91fdbaf43a41b900a08e3cb0c5029ee 995eb7037131c1f544e46e8298b8bd1caf92900c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746356411 +0000	commit: Implement player character functionality, skill effects, and CLI management
995eb7037131c1f544e46e8298b8bd1caf92900c c49f450184ad332c4b9566c0d6282a1b7648ed2a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746361030 +0000	commit: Implement character and enemy data loading from JSON files; add auto and manual modes for character creation and combat; enhance combat CLI for AI training; improve error handling and logging throughout the CLI manager and combat modules.
c49f450184ad332c4b9566c0d6282a1b7648ed2a c84db44ce27ddcbdec6b69da1854daf4da156e47 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746371299 +0000	commit: Remove unused modules and files related to game logic, CLI, and logging setup. This includes the status effect module, CLI manager, combat CLI, utility functions, and logging configuration. Additionally, delete context extraction tool and empty directories for scripts and tests to clean up the project structure.
c84db44ce27ddcbdec6b69da1854daf4da156e47 02ceda50f64e3361e116103464187a8d5ef0aef6 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746371788 +0000	commit: Füge JSON-Daten für Kampfstatistiken, primäre Attribute und Fähigkeiten hinzu; definiere Namen und Beschreibungen für jede Eigenschaft und Fähigkeit.
02ceda50f64e3361e116103464187a8d5ef0aef6 8a93e1adedc3426ee39e41dee3157d7cca128906 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746376487 +0000	commit: Refactor enemy and skill JSON definitions for improved readability; consolidate attribute and combat stat formatting. Implement loader and model definitions for structured data handling in the RPG project.
8a93e1adedc3426ee39e41dee3157d7cca128906 7b4d1e896dc1d6e991580118f91d3c95eb89b7b0 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746377494 +0000	commit: Add initial game structure and core character mechanics
7b4d1e896dc1d6e991580118f91d3c95eb89b7b0 4f69bb96dfdab7d62f649c5f8afd466b1cfd6690 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746427095 +0000	commit: Add detailed documentation and project structure for RPG development
4f69bb96dfdab7d62f649c5f8afd466b1cfd6690 5afbeb54e997f9468beb968a8d3f3bf124d09b5c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746429960 +0000	commit: Remove game logic files: character, combat, enemy, status effects, and main game loop. Clean up project structure by deleting unused files and directories.
5afbeb54e997f9468beb968a8d3f3bf124d09b5c c7a3d490952d75b8b25e3442558340fbd964d133 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746442718 +0000	commit: Add project documentation and JSON definitions for RPG game
c7a3d490952d75b8b25e3442558340fbd964d133 8fc082912fb9005e326c369a2fd013356b145d70 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746516919 +0000	commit: Refactor game definitions and data structure
8fc082912fb9005e326c369a2fd013356b145d70 74c9f5ccb877f3660503d31f9080e77220981596 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746523780 +0000	commit: Implement basic RPG configuration and character system
74c9f5ccb877f3660503d31f9080e77220981596 21f7ca2f5abdbda5098bbca3034dcf3367c0aca4 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746528288 +0000	commit: feat: Implement character leveling system with XP management
21f7ca2f5abdbda5098bbca3034dcf3367c0aca4 aecb18573c12204551da364b503ce5e42afb320a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746533005 +0000	commit: Refactor combat and entity logic to support status effects
aecb18573c12204551da364b503ce5e42afb320a 9b38e003f2e9fc0d1666abaae3a527e367d913ec Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746534481 +0000	commit: refactor: Optimize status effect management and improve code readability
9b38e003f2e9fc0d1666abaae3a527e367d913ec b389367ca23d8c16e7f9dd89c68b74ac664f5354 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746537230 +0000	commit: Enhance CharacterInstance with status effect management and attribute calculations
b389367ca23d8c16e7f9dd89c68b74ac664f5354 8451a7eea274bc027110089a59791d6ba6125626 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746552645 +0000	commit: feat: Implement basic melee AI strategy with action selection logic
8451a7eea274bc027110089a59791d6ba6125626 30be31a064587125d5fab26971b3cf183aa38d1b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746553405 +0000	commit: feat: Implement ActionManager with improved skill handling and action masks
30be31a064587125d5fab26971b3cf183aa38d1b 49814a0f55a65f6b32767f68d324561ceabcd907 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746563858 +0000	commit: Implement ObservationManager and RewardCalculator with comprehensive logging and testing
49814a0f55a65f6b32767f68d324561ceabcd907 e7127ee4a69c97dd6e7871f0e8edb5456215ec33 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746611414 +0000	commit: Implement core game logic including attribute bonuses, HP calculation, and leveling system
e7127ee4a69c97dd6e7871f0e8edb5456215ec33 1c60989239719164f03cf29a26e71b3043432af0 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746638147 +0000	commit: feat: Initialisiere Projektstruktur mit Konfigurationsdateien, Charakter- und Skill-Templates
1c60989239719164f03cf29a26e71b3043432af0 2cc28f5a55dbc0735596ab9800d8e0d861f70af7 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746645085 +0000	commit: feat: Update project structure and configuration files; remove unused modules and implement character and skill templates
2cc28f5a55dbc0735596ab9800d8e0d861f70af7 e7c1d1d88fdc61a846d83bc40defe36e61a492c8 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746694679 +0000	commit: feat: Implementiere Charakter- und Skill-Definitionen sowie Lade-Logik aus JSON5-Dateien
e7c1d1d88fdc61a846d83bc40defe36e61a492c8 998a315c20f4a02dee11306f425a7794db2bc89f Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746696492 +0000	commit: feat: Implementiere umfassende Fehlerbehandlung und Lade-Logik für Definitionsdateien sowie neue Datenstrukturen für Gegner und Skills
998a315c20f4a02dee11306f425a7794db2bc89f db9dc5784938350697d042d495f303ee0ce80995 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746700959 +0000	commit: Remove opponent and skill definitions along with their loader and exception handling. This includes the deletion of JSON5 files for opponents and skills, as well as the associated Python classes and example scripts that utilized these definitions. This cleanup prepares for a potential redesign or restructuring of the game's definition system.
db9dc5784938350697d042d495f303ee0ce80995 60b002027b36b0d85a296cdf5f04bb4df0feab32 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701051 +0000	commit (merge): Merge branch 'main' of https://github.com/Kharas81/python-rpg-projekt
60b002027b36b0d85a296cdf5f04bb4df0feab32 2da791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701127 +0000	commit: feat: Entferne veraltete Dokumente und füge Master-Prompt für den RPG-Entwicklungsassistenten hinzu
2da791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 0d078b395458dbc1d306ba830c532f0eef4a2f45 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701588 +0000	commit: feat: Füge umfassende Dokumentation zu Interaktionsstil, Debugging-Ansatz, Aufgabenbereichen, Entwicklungsprozess und Spiel-Definitionen hinzu
0d078b395458dbc1d306ba830c532f0eef4a2f45 b44893d40b6579a820ee3c10cebb55880c4b2c1c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746718572 +0000	commit: Implement core game mechanics and leveling system
b44893d40b6579a820ee3c10cebb55880c4b2c1c 3949785b26cde4757c5ef750e652c32873afc8d4 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746729801 +0000	commit: feat: Aktualisiere Abhängigkeiten in requirements.txt und implementiere character_utils für Template-Management
3949785b26cde4757c5ef750e652c32873afc8d4 e622b4bbe7aef1467d4f2bce9a5f446470b5916c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746730576 +0000	commit: Remove RewardCalculator and RPGEnvironment modules; refactor main entry point to streamline game initialization and mode handling.
e622b4bbe7aef1467d4f2bce9a5f446470b5916c 7d107e41acdc582bd234c8fc507a3d6830826ccb Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746775822 +0000	commit: Implement core components for RPG reinforcement learning environment
7d107e41acdc582bd234c8fc507a3d6830826ccb e3407ab75b868012c499cae2a077f8e28cec298a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746776448 +0000	commit: feat: Füge Debugging-Ausgaben hinzu und implementiere Aktionsmaske für RPG-Umgebung
e3407ab75b868012c499cae2a077f8e28cec298a 0f99eb413771802c4069f286369378dbdc826194 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746778949 +0000	commit: feat: Füge neue Trainingskonfiguration für das RL-Modul hinzu
0f99eb413771802c4069f286369378dbdc826194 03d04fbb0f99c804eccb18eef42ba82bb611e838 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779055 +0000	commit: feat: Initialisiere neues Git-Verzeichnis für das Projekt
03d04fbb0f99c804eccb18eef42ba82bb611e838 9072164653a2f4b46aa4e6dadb938a9dc3d8709a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779593 +0000	pull --rebase (start): checkout 9072164653a2f4b46aa4e6dadb938a9dc3d8709a
9072164653a2f4b46aa4e6dadb938a9dc3d8709a 886b6c83591e22a6822e8c6b169ff9f298030246 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779593 +0000	pull --rebase (pick): feat: Füge Debugging-Ausgaben hinzu und implementiere Aktionsmaske für RPG-Umgebung
886b6c83591e22a6822e8c6b169ff9f298030246 b322dff7ba71581e4704dd79c17b2a8cf1b9d1b3 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779593 +0000	pull --rebase (pick): feat: Füge neue Trainingskonfiguration für das RL-Modul hinzu
b322dff7ba71581e4704dd79c17b2a8cf1b9d1b3 cce14b40ab8865b9fd6f2590dc4b1504a3d2e887 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779593 +0000	pull --rebase (pick): feat: Initialisiere neues Git-Verzeichnis für das Projekt
cce14b40ab8865b9fd6f2590dc4b1504a3d2e887 cce14b40ab8865b9fd6f2590dc4b1504a3d2e887 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779593 +0000	pull --rebase (finish): returning to refs/heads/main


===== /workspaces/python-rpg-projekt/.git/logs/refs/heads/main =====
0000000000000000000000000000000000000000 11b08d4b70b84919da8007fda2d4a67b6c229632 root <root@3e216ac4-d8e0-4496-acab-73c0467b5673.m1k4x3cq3poebda54cltipn05g.ax.internal.cloudapp.net> 1746205332 +0000	clone: from https://github.com/Kharas81/python-rpg-projekt
11b08d4b70b84919da8007fda2d4a67b6c229632 f7d1fa7b6177d08c60e81012be7123c687335093 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746205948 +0000	commit: Füge README, .gitignore und Anforderungen hinzu; erstelle leere Verzeichnisse für die Projektstruktur
f7d1fa7b6177d08c60e81012be7123c687335093 2d96fdaea570a3ed6c7a9b5236b093fd81fff7bd Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746209063 +0000	commit: Füge StatDefinition-Klasse und JSON-Daten für Statistiken, Ressourcen und Statusflags hinzu; implementiere Ladefunktion für Definitionen
2d96fdaea570a3ed6c7a9b5236b093fd81fff7bd 9a50447ad3c5e907ed369b056bda86e73eb11b92 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746211699 +0000	commit: Füge Charakterklassen-Definitionen und Ladefunktion für Klassen aus JSON hinzu
9a50447ad3c5e907ed369b056bda86e73eb11b92 26de1ee07d91d361be1c24970c6f6090967388f2 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746213397 +0000	commit: Füge neue Skill-Definitionen und Effekte hinzu; implementiere JSON-Daten für Skills
26de1ee07d91d361be1c24970c6f6090967388f2 bd2ec5f1bb86946c819ea30309f4440df7c24433 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746213896 +0000	commit: Füge Ladefunktionen für Statistiken, Charakterklassen und Skills hinzu; implementiere Hilfsfunktionen zum Laden von JSON-Daten
bd2ec5f1bb86946c819ea30309f4440df7c24433 82a47997c8b55342383e9ac8a295951478e8de5b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214252 +0000	commit: Füge zentrale Logging-Konfiguration hinzu; implementiere rotierendes Datei-Logging und Konsolen-Logging
82a47997c8b55342383e9ac8a295951478e8de5b 2c83781b1d6e81c815f01d0241f9a3fcb061e33a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214513 +0000	commit: Füge Charakter-Klasse hinzu; implementiere Attribute, Kampfwerte, Ressourcen und Skills
2c83781b1d6e81c815f01d0241f9a3fcb061e33a 2937e71b3c5fdb87b4483aa443bab17268e3cc16 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214665 +0000	commit: Implementiere Hauptspiel-Logik; füge Logging, Ladefunktionen und Beispiel-Charakter hinzu
2937e71b3c5fdb87b4483aa443bab17268e3cc16 94c792d15580e72a500c06a4fc84063a46def871 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746332995 +0000	commit: Remove unused loaders and character logic; delete status flags and related JSON files; clean up project structure by removing empty directories and files.
94c792d15580e72a500c06a4fc84063a46def871 8b8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746345972 +0000	commit: Entferne nicht verwendete Dateien und Verzeichnisse; bereinige die Projektstruktur
8b8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 d58aeb5b39e042ad8e437818103bf7603617ed6b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746346435 +0000	commit: Füge Masterprompt-Workflow und zugehörige Konfigurationsdatei hinzu; implementiere Workflow für manuelles Auslösen und Auslesen des Masterprompts aus einer JSON-Datei.
d58aeb5b39e042ad8e437818103bf7603617ed6b a1eebd7daa6256802f5a50517ac76d4de531a99e Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746346553 +0000	commit: Entferne Masterprompt-Workflow und zugehörige JSON-Datei; bereinige Projektstruktur
a1eebd7daa6256802f5a50517ac76d4de531a99e 02ea140b8e7e971e496a38aa641a310e21cd3996 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347124 +0000	commit: Add Master-Prompt
02ea140b8e7e971e496a38aa641a310e21cd3996 38b0f2103e6f68ed82f2613e8d169353fad5a0c3 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347177 +0000	commit: Füge Master-Prompt und GitHub Actions Workflow für den RPG-Entwicklungsassistenten hinzu; erstelle README-Datei.
38b0f2103e6f68ed82f2613e8d169353fad5a0c3 e5d8f7b417a84282ab32455c90317ab0a1b8db5a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347414 +0000	commit: Entferne nicht mehr benötigte Dateien und bereinige die Projektstruktur
e5d8f7b417a84282ab32455c90317ab0a1b8db5a e02eae72f91fdbaf43a41b900a08e3cb0c5029ee Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746350546 +0000	commit: Add initial structure and core functionality for the RPG project
e02eae72f91fdbaf43a41b900a08e3cb0c5029ee 995eb7037131c1f544e46e8298b8bd1caf92900c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746356411 +0000	commit: Implement player character functionality, skill effects, and CLI management
995eb7037131c1f544e46e8298b8bd1caf92900c c49f450184ad332c4b9566c0d6282a1b7648ed2a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746361030 +0000	commit: Implement character and enemy data loading from JSON files; add auto and manual modes for character creation and combat; enhance combat CLI for AI training; improve error handling and logging throughout the CLI manager and combat modules.
c49f450184ad332c4b9566c0d6282a1b7648ed2a c84db44ce27ddcbdec6b69da1854daf4da156e47 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746371299 +0000	commit: Remove unused modules and files related to game logic, CLI, and logging setup. This includes the status effect module, CLI manager, combat CLI, utility functions, and logging configuration. Additionally, delete context extraction tool and empty directories for scripts and tests to clean up the project structure.
c84db44ce27ddcbdec6b69da1854daf4da156e47 02ceda50f64e3361e116103464187a8d5ef0aef6 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746371788 +0000	commit: Füge JSON-Daten für Kampfstatistiken, primäre Attribute und Fähigkeiten hinzu; definiere Namen und Beschreibungen für jede Eigenschaft und Fähigkeit.
02ceda50f64e3361e116103464187a8d5ef0aef6 8a93e1adedc3426ee39e41dee3157d7cca128906 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746376487 +0000	commit: Refactor enemy and skill JSON definitions for improved readability; consolidate attribute and combat stat formatting. Implement loader and model definitions for structured data handling in the RPG project.
8a93e1adedc3426ee39e41dee3157d7cca128906 7b4d1e896dc1d6e991580118f91d3c95eb89b7b0 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746377494 +0000	commit: Add initial game structure and core character mechanics
7b4d1e896dc1d6e991580118f91d3c95eb89b7b0 4f69bb96dfdab7d62f649c5f8afd466b1cfd6690 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746427095 +0000	commit: Add detailed documentation and project structure for RPG development
4f69bb96dfdab7d62f649c5f8afd466b1cfd6690 5afbeb54e997f9468beb968a8d3f3bf124d09b5c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746429960 +0000	commit: Remove game logic files: character, combat, enemy, status effects, and main game loop. Clean up project structure by deleting unused files and directories.
5afbeb54e997f9468beb968a8d3f3bf124d09b5c c7a3d490952d75b8b25e3442558340fbd964d133 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746442718 +0000	commit: Add project documentation and JSON definitions for RPG game
c7a3d490952d75b8b25e3442558340fbd964d133 8fc082912fb9005e326c369a2fd013356b145d70 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746516919 +0000	commit: Refactor game definitions and data structure
8fc082912fb9005e326c369a2fd013356b145d70 74c9f5ccb877f3660503d31f9080e77220981596 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746523780 +0000	commit: Implement basic RPG configuration and character system
74c9f5ccb877f3660503d31f9080e77220981596 21f7ca2f5abdbda5098bbca3034dcf3367c0aca4 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746528288 +0000	commit: feat: Implement character leveling system with XP management
21f7ca2f5abdbda5098bbca3034dcf3367c0aca4 aecb18573c12204551da364b503ce5e42afb320a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746533005 +0000	commit: Refactor combat and entity logic to support status effects
aecb18573c12204551da364b503ce5e42afb320a 9b38e003f2e9fc0d1666abaae3a527e367d913ec Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746534481 +0000	commit: refactor: Optimize status effect management and improve code readability
9b38e003f2e9fc0d1666abaae3a527e367d913ec b389367ca23d8c16e7f9dd89c68b74ac664f5354 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746537230 +0000	commit: Enhance CharacterInstance with status effect management and attribute calculations
b389367ca23d8c16e7f9dd89c68b74ac664f5354 8451a7eea274bc027110089a59791d6ba6125626 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746552645 +0000	commit: feat: Implement basic melee AI strategy with action selection logic
8451a7eea274bc027110089a59791d6ba6125626 30be31a064587125d5fab26971b3cf183aa38d1b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746553405 +0000	commit: feat: Implement ActionManager with improved skill handling and action masks
30be31a064587125d5fab26971b3cf183aa38d1b 49814a0f55a65f6b32767f68d324561ceabcd907 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746563858 +0000	commit: Implement ObservationManager and RewardCalculator with comprehensive logging and testing
49814a0f55a65f6b32767f68d324561ceabcd907 e7127ee4a69c97dd6e7871f0e8edb5456215ec33 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746611414 +0000	commit: Implement core game logic including attribute bonuses, HP calculation, and leveling system
e7127ee4a69c97dd6e7871f0e8edb5456215ec33 1c60989239719164f03cf29a26e71b3043432af0 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746638147 +0000	commit: feat: Initialisiere Projektstruktur mit Konfigurationsdateien, Charakter- und Skill-Templates
1c60989239719164f03cf29a26e71b3043432af0 2cc28f5a55dbc0735596ab9800d8e0d861f70af7 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746645085 +0000	commit: feat: Update project structure and configuration files; remove unused modules and implement character and skill templates
2cc28f5a55dbc0735596ab9800d8e0d861f70af7 e7c1d1d88fdc61a846d83bc40defe36e61a492c8 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746694679 +0000	commit: feat: Implementiere Charakter- und Skill-Definitionen sowie Lade-Logik aus JSON5-Dateien
e7c1d1d88fdc61a846d83bc40defe36e61a492c8 998a315c20f4a02dee11306f425a7794db2bc89f Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746696492 +0000	commit: feat: Implementiere umfassende Fehlerbehandlung und Lade-Logik für Definitionsdateien sowie neue Datenstrukturen für Gegner und Skills
998a315c20f4a02dee11306f425a7794db2bc89f db9dc5784938350697d042d495f303ee0ce80995 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746700959 +0000	commit: Remove opponent and skill definitions along with their loader and exception handling. This includes the deletion of JSON5 files for opponents and skills, as well as the associated Python classes and example scripts that utilized these definitions. This cleanup prepares for a potential redesign or restructuring of the game's definition system.
db9dc5784938350697d042d495f303ee0ce80995 60b002027b36b0d85a296cdf5f04bb4df0feab32 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701051 +0000	commit (merge): Merge branch 'main' of https://github.com/Kharas81/python-rpg-projekt
60b002027b36b0d85a296cdf5f04bb4df0feab32 2da791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701127 +0000	commit: feat: Entferne veraltete Dokumente und füge Master-Prompt für den RPG-Entwicklungsassistenten hinzu
2da791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 0d078b395458dbc1d306ba830c532f0eef4a2f45 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701588 +0000	commit: feat: Füge umfassende Dokumentation zu Interaktionsstil, Debugging-Ansatz, Aufgabenbereichen, Entwicklungsprozess und Spiel-Definitionen hinzu
0d078b395458dbc1d306ba830c532f0eef4a2f45 b44893d40b6579a820ee3c10cebb55880c4b2c1c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746718572 +0000	commit: Implement core game mechanics and leveling system
b44893d40b6579a820ee3c10cebb55880c4b2c1c 3949785b26cde4757c5ef750e652c32873afc8d4 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746729801 +0000	commit: feat: Aktualisiere Abhängigkeiten in requirements.txt und implementiere character_utils für Template-Management
3949785b26cde4757c5ef750e652c32873afc8d4 e622b4bbe7aef1467d4f2bce9a5f446470b5916c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746730576 +0000	commit: Remove RewardCalculator and RPGEnvironment modules; refactor main entry point to streamline game initialization and mode handling.
e622b4bbe7aef1467d4f2bce9a5f446470b5916c 7d107e41acdc582bd234c8fc507a3d6830826ccb Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746775822 +0000	commit: Implement core components for RPG reinforcement learning environment
7d107e41acdc582bd234c8fc507a3d6830826ccb e3407ab75b868012c499cae2a077f8e28cec298a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746776448 +0000	commit: feat: Füge Debugging-Ausgaben hinzu und implementiere Aktionsmaske für RPG-Umgebung
e3407ab75b868012c499cae2a077f8e28cec298a 0f99eb413771802c4069f286369378dbdc826194 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746778949 +0000	commit: feat: Füge neue Trainingskonfiguration für das RL-Modul hinzu
0f99eb413771802c4069f286369378dbdc826194 03d04fbb0f99c804eccb18eef42ba82bb611e838 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779055 +0000	commit: feat: Initialisiere neues Git-Verzeichnis für das Projekt
03d04fbb0f99c804eccb18eef42ba82bb611e838 cce14b40ab8865b9fd6f2590dc4b1504a3d2e887 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746779593 +0000	pull --rebase (finish): refs/heads/main onto 9072164653a2f4b46aa4e6dadb938a9dc3d8709a


===== /workspaces/python-rpg-projekt/.git/logs/refs/remotes/origin/HEAD =====
0000000000000000000000000000000000000000 11b08d4b70b84919da8007fda2d4a67b6c229632 root <root@3e216ac4-d8e0-4496-acab-73c0467b5673.m1k4x3cq3poebda54cltipn05g.ax.internal.cloudapp.net> 1746205332 +0000	clone: from https://github.com/Kharas81/python-rpg-projekt


===== /workspaces/python-rpg-projekt/.git/logs/refs/remotes/origin/main =====
11b08d4b70b84919da8007fda2d4a67b6c229632 f7d1fa7b6177d08c60e81012be7123c687335093 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746205952 +0000	update by push
f7d1fa7b6177d08c60e81012be7123c687335093 2d96fdaea570a3ed6c7a9b5236b093fd81fff7bd Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746209065 +0000	update by push
2d96fdaea570a3ed6c7a9b5236b093fd81fff7bd 9a50447ad3c5e907ed369b056bda86e73eb11b92 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746211701 +0000	update by push
9a50447ad3c5e907ed369b056bda86e73eb11b92 26de1ee07d91d361be1c24970c6f6090967388f2 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746213399 +0000	update by push
26de1ee07d91d361be1c24970c6f6090967388f2 bd2ec5f1bb86946c819ea30309f4440df7c24433 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746213898 +0000	update by push
bd2ec5f1bb86946c819ea30309f4440df7c24433 82a47997c8b55342383e9ac8a295951478e8de5b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214254 +0000	update by push
82a47997c8b55342383e9ac8a295951478e8de5b 2c83781b1d6e81c815f01d0241f9a3fcb061e33a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746214516 +0000	update by push
2c83781b1d6e81c815f01d0241f9a3fcb061e33a 94c792d15580e72a500c06a4fc84063a46def871 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746332997 +0000	update by push
94c792d15580e72a500c06a4fc84063a46def871 8b8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746345975 +0000	update by push
8b8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 d58aeb5b39e042ad8e437818103bf7603617ed6b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746346445 +0000	update by push
d58aeb5b39e042ad8e437818103bf7603617ed6b a1eebd7daa6256802f5a50517ac76d4de531a99e Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746346555 +0000	update by push
a1eebd7daa6256802f5a50517ac76d4de531a99e 38b0f2103e6f68ed82f2613e8d169353fad5a0c3 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347179 +0000	update by push
38b0f2103e6f68ed82f2613e8d169353fad5a0c3 e5d8f7b417a84282ab32455c90317ab0a1b8db5a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746347416 +0000	update by push
e5d8f7b417a84282ab32455c90317ab0a1b8db5a e02eae72f91fdbaf43a41b900a08e3cb0c5029ee Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746350549 +0000	update by push
e02eae72f91fdbaf43a41b900a08e3cb0c5029ee 995eb7037131c1f544e46e8298b8bd1caf92900c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746356413 +0000	update by push
995eb7037131c1f544e46e8298b8bd1caf92900c c49f450184ad332c4b9566c0d6282a1b7648ed2a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746361033 +0000	update by push
c49f450184ad332c4b9566c0d6282a1b7648ed2a c84db44ce27ddcbdec6b69da1854daf4da156e47 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746371301 +0000	update by push
c84db44ce27ddcbdec6b69da1854daf4da156e47 02ceda50f64e3361e116103464187a8d5ef0aef6 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746371799 +0000	update by push
02ceda50f64e3361e116103464187a8d5ef0aef6 4f69bb96dfdab7d62f649c5f8afd466b1cfd6690 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746427098 +0000	update by push
4f69bb96dfdab7d62f649c5f8afd466b1cfd6690 5afbeb54e997f9468beb968a8d3f3bf124d09b5c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746429964 +0000	update by push
5afbeb54e997f9468beb968a8d3f3bf124d09b5c c7a3d490952d75b8b25e3442558340fbd964d133 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746442721 +0000	update by push
c7a3d490952d75b8b25e3442558340fbd964d133 8fc082912fb9005e326c369a2fd013356b145d70 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746516921 +0000	update by push
8fc082912fb9005e326c369a2fd013356b145d70 74c9f5ccb877f3660503d31f9080e77220981596 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746523783 +0000	update by push
74c9f5ccb877f3660503d31f9080e77220981596 21f7ca2f5abdbda5098bbca3034dcf3367c0aca4 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746528290 +0000	update by push
21f7ca2f5abdbda5098bbca3034dcf3367c0aca4 9b38e003f2e9fc0d1666abaae3a527e367d913ec Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746534483 +0000	update by push
9b38e003f2e9fc0d1666abaae3a527e367d913ec b389367ca23d8c16e7f9dd89c68b74ac664f5354 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746537233 +0000	update by push
b389367ca23d8c16e7f9dd89c68b74ac664f5354 8451a7eea274bc027110089a59791d6ba6125626 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746552649 +0000	update by push
8451a7eea274bc027110089a59791d6ba6125626 30be31a064587125d5fab26971b3cf183aa38d1b Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746553407 +0000	update by push
30be31a064587125d5fab26971b3cf183aa38d1b 49814a0f55a65f6b32767f68d324561ceabcd907 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746563861 +0000	update by push
49814a0f55a65f6b32767f68d324561ceabcd907 e7127ee4a69c97dd6e7871f0e8edb5456215ec33 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746611417 +0000	update by push
e7127ee4a69c97dd6e7871f0e8edb5456215ec33 1c60989239719164f03cf29a26e71b3043432af0 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746638149 +0000	update by push
1c60989239719164f03cf29a26e71b3043432af0 2cc28f5a55dbc0735596ab9800d8e0d861f70af7 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746645088 +0000	update by push
2cc28f5a55dbc0735596ab9800d8e0d861f70af7 e7c1d1d88fdc61a846d83bc40defe36e61a492c8 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746694682 +0000	update by push
e7c1d1d88fdc61a846d83bc40defe36e61a492c8 998a315c20f4a02dee11306f425a7794db2bc89f Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746696494 +0000	update by push
998a315c20f4a02dee11306f425a7794db2bc89f 010eafb016e8bfc183c5b1fd755fda946aa910b1 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746700917 +0000	fetch: fast-forward
010eafb016e8bfc183c5b1fd755fda946aa910b1 60b002027b36b0d85a296cdf5f04bb4df0feab32 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701054 +0000	update by push
60b002027b36b0d85a296cdf5f04bb4df0feab32 2da791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701129 +0000	update by push
2da791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 0d078b395458dbc1d306ba830c532f0eef4a2f45 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746701590 +0000	update by push
0d078b395458dbc1d306ba830c532f0eef4a2f45 b44893d40b6579a820ee3c10cebb55880c4b2c1c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746718577 +0000	update by push
b44893d40b6579a820ee3c10cebb55880c4b2c1c 3949785b26cde4757c5ef750e652c32873afc8d4 Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746729803 +0000	update by push
3949785b26cde4757c5ef750e652c32873afc8d4 e622b4bbe7aef1467d4f2bce9a5f446470b5916c Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746730578 +0000	update by push
e622b4bbe7aef1467d4f2bce9a5f446470b5916c 7d107e41acdc582bd234c8fc507a3d6830826ccb Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746775828 +0000	update by push
7d107e41acdc582bd234c8fc507a3d6830826ccb 9072164653a2f4b46aa4e6dadb938a9dc3d8709a Kharas81 <34625007+Kharas81@users.noreply.github.com> 1746776417 +0000	fetch: fast-forward


===== /workspaces/python-rpg-projekt/.git/hooks/fsmonitor-watchman.sample =====
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


===== /workspaces/python-rpg-projekt/.git/hooks/post-update.sample =====
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


===== /workspaces/python-rpg-projekt/.git/hooks/applypatch-msg.sample =====
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


===== /workspaces/python-rpg-projekt/.git/hooks/pre-merge-commit.sample =====
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


===== /workspaces/python-rpg-projekt/.git/hooks/sendemail-validate.sample =====
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


===== /workspaces/python-rpg-projekt/.git/hooks/pre-applypatch.sample =====
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


===== /workspaces/python-rpg-projekt/.git/hooks/update.sample =====
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


===== /workspaces/python-rpg-projekt/.git/hooks/commit-msg.sample =====
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


===== /workspaces/python-rpg-projekt/.git/hooks/pre-rebase.sample =====
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


===== /workspaces/python-rpg-projekt/.git/hooks/pre-commit.sample =====
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


===== /workspaces/python-rpg-projekt/.git/hooks/prepare-commit-msg.sample =====
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


===== /workspaces/python-rpg-projekt/.git/hooks/pre-push.sample =====
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


===== /workspaces/python-rpg-projekt/.git/hooks/push-to-checkout.sample =====
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


===== /workspaces/python-rpg-projekt/.git/hooks/pre-receive.sample =====
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


===== /workspaces/python-rpg-projekt/.git/objects/44/10dc1a8519b8296d83550ee2e7e3ae6f54693d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/44/cfd4f002555c1a32ccea7c489eb15a29893770 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/5d/df71730e7c5b73064d6b122c5e95e96ad7f1bd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x87 in position 11: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/28/d530bbb0eae0dabae4a0d91af089fbb3fd81b9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xf6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/28/14e8580b5e28a1bf3700b7cf20832eb0abbfef =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/fc/3daf90419605d221085dbe28eb04ded04b902e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3d/0139a620bdae6e0f062e19a9c99bba4072ec3c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8f in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3d/502b66945d5128bd982028ca353b4dd7648976 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3d/7f0158b0d6e0e0cbcbd9b8cab23e9504e9e23c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3d/7b96d83cb629b7e9309d9b77ea089eb10979f0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/pack/pack-38440c3155250523945efc12a52668fb62fafa2c.pack =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9b in position 12: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/pack/pack-38440c3155250523945efc12a52668fb62fafa2c.idx =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/pack/pack-38440c3155250523945efc12a52668fb62fafa2c.rev =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x94 in position 32: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a5/a1c996ae6e9bf9cad796b42b233f02e6b19900 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 17: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a5/f611e33063bd7d07a3c0d381b4e1921ec0a3c7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/e6/22b4bbe7aef1467d4f2bce9a5f446470b5916c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e6/e56e167ed2f84cc73936fe681a7127a31fc590 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e6/d5e9d7d8a9c8aa44a7d7e3402ea58e33849100 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8f in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/04/1c55aa97ccdb6fcd3dfcbb7e43d2c0ff03d584 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/04/85c3891eacf5e4ccf0fb579be67d9c397da5d6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/04/75d9feb34cae999907148e0d12e65ae8e83ae6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/04/a77c158b63fcb79792c9cc99ec0edafc64273a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/04/bb66d42db03fc0c304b4cddc82be581de15b88 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/04/69c863031d57f83b5c2ade2d65ecf42ad7cfc2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f3/78f7e819a7508c0fa576e81eb0482ff702e8fb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/9b/5cc4892cd1521a914a280f102a9860a1a9e497 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9b/38e003f2e9fc0d1666abaae3a527e367d913ec =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8d/b74e412d896350fd11c8e49940e0e5c9a4f7b0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/95/1f227611f47d74a9c3718fdb16a462bd2acf19 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc9 in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/95/a82bae0e6a210a69630f46d623bb47048e797d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/95/3cda136f7d1d683093d9e7e046a9610edacb73 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/41/9434f2a2ca0661eea6f9cd4f208e94b8ad8ca4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/41/74db73bbef31c02a338ff5e5117883e9e01282 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/41/e2bfb52eccd32f6983bd3218257215462e120e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/41/9f3e0ba0509ecebfd003ab1a4be59a280d8e7c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/41/0edef0294793b83556e9afac68ea957bee2788 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/41/1f168f38d58355a0a1fa48ef0fb42d65c83dea =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/fb/aa330ffffba860a524a031691b8b795db18f5a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/fb/1808c5acc82c444b31c09aa4759a0fee75c4d7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xf0 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/fb/f18bc476e30e1f85647cec854358e4bd28bf77 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/00/caa25c6ed670e9767ccad1b345c5dce325d478 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/00/c71021363df20ee5c39c9b0801c2b3ab8ca381 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/00/d36bfad0555703044677521a4403c7022a13e5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc4 in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/00/4ee979bd360d04593db12887682f1fc5c9dc11 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/00/d77f779c507cad4951cab378f30ad4a8da8457 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/72/15563089edfa25bf93013f0155348b6bf4c76b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/72/5980bcb14d731adbf896bcf0d5bf44abfdb6d7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4e/cb33dfe02c9287ac69e47d4759f929fb2c94df =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4e/6c4c3ac2adab8b4f2f6e9216ab6bcbc6205e8d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b9/15364fd230d0995cbaa8edffba9aaed87ca9e2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b9/6aa69d624b750ed9a2e9a6a4700177d9ab31a4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b9/686d21140a24960d0bfc00f15d805da4ec84df =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b9/1b581a49979fdb5a45aa24f720f45425cf266d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1d/4f29cdfd864fd850b0f0755eb7e2b0522670da =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1d/ce3c838fdd7f55bbb9ac801f8c5cbbb5f4046a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1d/10dc0d88ee88c3dd5847e81ba1b5cae1d96505 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1d/e15f7fcedba71229f29490b42b3d86afd47c87 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc8 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1d/dc5e8a83ec444d2dbc194978012ede3d74927d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/df/459171af9ae72d141509713304dd9ff0c09bbd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/df/eac7fd0bf1485e9c8d85fe34dc72f566ccff20 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/df/645dda0b2afce4f231afb7aef1b35871e77d66 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/df/a369ec4b4f6955c05eae6bb98d23aff76141f9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0d/078b395458dbc1d306ba830c532f0eef4a2f45 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0d/a8a14abc194d4f5253c50a27129b521ad0a149 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8f in position 5: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0d/5ce1cf74a1a7473cb16f1f651dc98540ea1e04 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8e in position 5: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7b/bcdd2bc28df5afd9391175224997c55c93e755 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 17: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7b/23e155bea6fd6d4995a80d5179112174b3f357 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7b/32ad140ba9b142284378f233f7c2fc10c708af =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7b/4d1e896dc1d6e991580118f91d3c95eb89b7b0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ce/169408bc61b2c149b9973a82cae3d287c60832 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1b/881b92b3ad5a7122daddd89550cc3d0b9e7487 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1b/2d38498a91ae32097b9b2f2ccdb7f33be8175e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1b/1b7a329ddf822d51bbb6beb540b8720b2beca6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b7/220c7e2e8cd0896ac5e716e908b5259c777de0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b7/69bebe3bbe9946cfdb42f08f5370009ac8e045 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/19/1973b7384142ca02cc8cae2bbb01df7e22972e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/19/238d598043c089c3a1eaace48550ea03e30919 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/55/840dac78260a41c1de711b5134efa753c96e46 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/59/5f03f03f0ac12924821197b9e4632a090f9fd9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/74/d610ff7458632ad7d0afc57081d87e7d6b92c8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/74/c9f5ccb877f3660503d31f9080e77220981596 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f2/38633563aac4ba96a3b794c04634f60bc6eb30 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/f2/1372e42703f9eb2edbb08d4ee2643482eac049 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdf in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/99/eb5b94b9e76ebdf2baaa389d8140b6386a8642 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/99/cd36f86db7ab31541bfb383986689e09e0dd47 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/99/8a315c20f4a02dee11306f425a7794db2bc89f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/99/5eb7037131c1f544e46e8298b8bd1caf92900c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/99/e16ba071b591644039d67e11a5dbb1540a9f6c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/99/b9370e112698dd86eb3d49414b0fe9dd9fc7bd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/99/cc939a75a98157f5b7a71636bc5c46456828a5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc8 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/73/8ff4d1039327f064e8b99643b9b52b74df6a17 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/73/414554c468eaa6ab9b4fdb35d2465f21541125 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ba/00b38495610f1cf9789facc0ae75c83b61cd57 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ba/a7cc63e4a2e311cc0cb7b864b35516ccb5d7fa =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ba/f5cae45b68a4cc2300959cac13eb03cd8c3d3f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/43/f3db8d52ce538ef5080dcd42ecaa10b811feb5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/43/fe0ec4e19f48e3ee8287c84fb88d00e243250b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e3/74d51f7a7ca8a085af0a0f2b063d46068fef03 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/e3/407ab75b868012c499cae2a077f8e28cec298a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e3/5b7022c7bd779397139cca2a4c1c16687fed75 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e3/e68b5acd72ff4f41006fb2006eb08aaa7d77c3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/68/a294d585e1bb06a91c2befb076eb9c1bcebfa3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/68/e6e8ff8b7b0fb1221a2fda157ac894a26ddba5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd3 in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/68/e78048ca62719c92f54ba35d9013ea6f93af51 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/68/b6eec63ac07e19fba917b6213190803ba8402d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/68/7730a42f420d66f48763ed9479d44f30b6d8d8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/68/34273c04e927614d4f76bd0f0855c26ee63523 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/82/a47997c8b55342383e9ac8a295951478e8de5b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/13/efc871040aafcf2551f623eae2922961c4f7df =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d6/4f0182c2fc021378901b9c9e1339879a7662c7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d6/7e2e46c316cc374bccec9280f1542eefd5c217 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d6/3ec00ea3390146fd3f3065431ca4601b234e2f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d6/8370341b412a41b6125d0dc8242f532ddfed5a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d6/352a8d99c0c9c16a42c823a603a20e675490f8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ab/e3efce9d7a76ad43925376c871e436c86ad821 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ab/10cd0e0a2e5db9c652abb5e7917ca8db9946d5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/60/f38bc1cb2494eb52f0094554665e245eacd1c3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/60/c7c03aa2a4ceb8481aa4f16d5636903190341d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/60/be8da046317a513140c31a95ac7ed444b43531 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/60/90270f87cc2e8b71faf6881933715bbd0f8bdd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/60/086809a7fc93e1f643e41e303b26473ebffcec =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/60/b002027b36b0d85a296cdf5f04bb4df0feab32 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/60/a07739b598745918432d8fe606d97faf97fd7c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 16: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6d/b010893ba96c4b8412ec516edb50b1811feb4d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6d/bbb6dbb82643e992f2d589460518534c15bb6a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6d/f14ea2f920210da0d1b50db15df31bd02c092f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/6d/616561cc22099494e420cc570a0e99f1f99172 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/84/51a7eea274bc027110089a59791d6ba6125626 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/84/0ded7b2ab63066c07a5a2b29064e1ce92e26fb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/52/f546ca2942624837d552f8f71197e888e6e4d5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/52/caed9931dc3fe7275902e0c7201ef9ef4f6a47 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0a/d7cbd74a08d7e893bcc01c08f44232cdbe0399 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0a/344a7c77abb4ee2db1fa5012b1e5167d4808bb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0a/93dba3061e11933a79c95e18ef42ed26fe51f0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0a/56698a35279b9bfe9dd61771361ea1bba34360 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/9c/e7c646ed3cf04d190f2efdf4564881bb869bff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c3/b366834a2afdd82fc139471c3ff4c95f082678 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c3/374597ed2a016ad5d6579fcd2c42405de1d411 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/c3/f0bc5a919a40529a1428f6ca46b071af06e7cb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2d/fdf97dbdd832906e682c8db6c6dbc2642179d9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2d/9cd8f5b1f786409e5f0385e688cb492f36f71e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd1 in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/2d/96fdaea570a3ed6c7a9b5236b093fd81fff7bd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2d/a791f465fd0bf6b742ce8e3cbc7c8e77bc0c63 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/88/6b6c83591e22a6822e8c6b169ff9f298030246 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/88/323b0542e526e5919ed9c47df9e6f2f768a735 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6f/3332beef553c070619813a991f332e78f4004e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6f/9b6dec7a8beac1b4006c9ccc9d0324fa46d4ff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/37/de73f54073e76561423ca33f99b8139ee9f558 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/37/56b3fa4c4adbb1d2b808896ce794edd3610a2a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4b/213895fb646e714d3b38c111c618aee70f485b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4b/e6917963ae42d3faf38c05fa096a1122946860 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/4b/825dc642cb6eb9a060e54bf8d69288fbee4904 =====
x+)JMU0`  
,

===== /workspaces/python-rpg-projekt/.git/objects/91/011e1e4db8346b4376ebc97e70d6aa2c4c1714 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/91/21c9793eba7590b11d413ed176935099799af0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e5/2a07f3fa06c47194e1f98eedf0aad77d87b321 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e5/4e3e3df8b7ef1e412e8e66fd59199136bb9dd5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e5/d8f7b417a84282ab32455c90317ab0a1b8db5a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/32/d51648f04733e0ea07ce1589ce35f4cc099533 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7f/1fb5fd9b50c7e3c694d2c63cdf79f5a10b6f70 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7f/4c4cdbeb818935de5f80c3015be8a9af2b7ffa =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x94 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7f/4805ea12d5eb22eb3bb3961b725c7c9d6b58d8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7f/77222f4e880dff83eb23af54fad22161e12846 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7f/0e69756327f862df2de9ea06f5b783303c9e21 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e7/127ee4a69c97dd6e7871f0e8edb5456215ec33 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e7/c1d1d88fdc61a846d83bc40defe36e61a492c8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e7/12dd87d0149c14a44bc49706f0f58946a4e433 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e7/62af26df3f2fa2d754fa0b5ca3dc267b466f58 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/bd/f7a924c2603b4703705d323f8b400faca6c5a5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/bd/2ec5f1bb86946c819ea30309f4440df7c24433 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8f/c082912fb9005e326c369a2fd013356b145d70 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9f/5dd974b8055ce1dc6ca7aa0e425e6d2bf18652 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1e/bf3500334d52088b1db7b186fd9a3dcc820515 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/10/b5aadf96e0e2cd914a5887aedd61c83dda8598 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/10/76b422cf91467975479661c5e021cc8f6c1459 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/10/9d5b8af6fd33749b7bdbdc6980f697dce699ea =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/85/c20680dcfcebfe1b3c33bab7259b6b570b3d37 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/85/c05729a31d0d6d58398a88295a6137fd568f6d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/85/286db1e386c420540c2fac42fb565598f82fd3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/85/9978c66ab7ab356a4bc590161598b9e4dfd5dc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/85/afab9896ebfcc0fe61bdad13b6e2b5c16659d5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/56/d8d9e4d8fdb4b01bf690417a11ef3701cf2d04 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/56/df39e7faa9169ab57a3cee634b164869670d0f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/56/a1c193bc5d6b64dfc05c9e62309cea7100efd5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdb in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/08/91e5c15e728d08101abbc878ee32184bab6796 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/08/225488174c3793b3a1c7ea6322848b0a25f8b6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/61/82a5463f112fc566f7276da127124b5d82a72d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe3 in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/61/cba0c20315bea690cb78e054e707bd906fd956 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/61/47a55667b8ef8a1c0f695caae8f79d57b5fa2c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/61/37f203316058cffc6c8ea7efe61145c6d3c7c9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xf5 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/03/d04fbb0f99c804eccb18eef42ba82bb611e838 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/03/8ab5218f9f6a97ef9714795e3c2ae040cc41e2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/76/0fe2d16e82fdd147ee5bdc426ca99cfb07473e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/76/df13d8700ad0c8943114ef1dc87bc4d9155d1f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/76/a58a9bf698f7c8feb391df5bb3d3a72779a1ee =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/76/d81affea6031f3d099aeef0c85f8d771c3bf75 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/76/3c0481122cb22c872138ccfd6b7582fc73f0b0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/45/2378f48eae6c6d910c7d0705aa425d8869ad7f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/45/324e4ea710218c833e44074509dfdbd31a36a4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ca/8e80a463eb399af3b1922a2499bfc1b8df5b9d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ca/d9acaf69bad3c1d3d187bdbd9a43f0ccc39a16 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c0/ccb74874c6088f32325b885257d96b9cad0750 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c0/d0449f1957d3266d4858ba7e0451d9154f9e67 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c0/0b9977b9d63a4906d040274b7aec0d4134f791 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/cf/7b8e3456f01d09c15aac52e6c21e954afd74ee =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/cf/10c0ba51b2af340e12f6f953cb753d9bb8bf09 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/cf/ca77303613c9b33e0020e390f71cc458f1c4e8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 7: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/cf/d1767a1cfdeba78287f257470509fef1517b7f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c6/7405ee14c5150e57e2e907458308cc30ab2638 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/26/ec3045c485a8cef641148ca6d61cc27f852716 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xf0 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/26/8a85b2d13cef4a540ec760b6b688c502f21b5f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/26/de1ee07d91d361be1c24970c6f6090967388f2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/26/47fd35a83eb4b88fbc47d0d160ff3bbdb205eb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/67/d6d12febab4a0f2d5f1b395387881201a283a7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/eb/41f08ee54dfda535106f7dbcded361f6412400 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b2/84cc559345efb796ade2c8a5590034d922ba51 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3e/087f113f9a1d326e01c64d354aeb5488b55903 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3e/cadc20bd8c5dae6b05307e3ec3c92e65178c22 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3e/2ed751504d5a4a01c0f2430419ad87dcad0b66 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d3/9a63130d803f3e2a146da75a7f211b38f3efe7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f9/c8cb58a5beb3a9353ef980d6710f01cfa75f1c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x94 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f9/c30613a65f8e288b2c08f301b7727939748e2c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f9/866eb7c79356b6bc393031ce3e1cafc6a0ff65 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/f6/3ef6fa53d730d390e3d18e9c3b54e1832c9ab8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x94 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f6/17ef8563567e5876fa5e90631696cef4637722 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/f6/b4e8e99e2a22bb6da3f2c1676599fb98c7b4ba =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f6/c2d73c549d792e190e8a56f8a46f4fdc202064 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f6/d3ca92ad87b744b7d0a6fa64347b26c135af34 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2c/83781b1d6e81c815f01d0241f9a3fcb061e33a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2c/ee75e934992e9d93d2c1e39f8f72fce4269806 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2c/c28f5a55dbc0735596ab9800d8e0d861f70af7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b1/3227bcb0a394bcb8816f2ce935efee74ef066f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b1/917291cdb82f24b85e518b8ff500a7713c4533 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/49/f1fa3edf3e2da543a9d8f09e93aa30107dda8d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/49/3e039f4dadc62a7ac969ec1202d5cc74655bc1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/49/87071a2cbb8f2a902bd7a5ada8f5a1715403e9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/49/2bac8672857afad8308a81f7f657615d58f3ff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/49/814a0f55a65f6b32767f68d324561ceabcd907 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/31/c51a96611b3f34e3990c8ec0bac360278ce035 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/cc/e14b40ab8865b9fd6f2590dc4b1504a3d2e887 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/cc/c8b8d3ac3f10b59bec2bf73ded0ed949e445cb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/98/fd486bead0752063865a1add69d284032f0830 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/dc/01970c97ad138ca219227cd466f39687cbd8b0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/dc/c4763f9a8b403ef75609492c61ad11b44a54f3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/dc/544fadc1bf459110b3aa342a50b19fa5598d7c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/01/0eafb016e8bfc183c5b1fd755fda946aa910b1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/01/27c9b1276d76a80a415cc137f222f86b52d80b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/01/91e8761ae5e007647cd745c5461caccdd8d773 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/01/f9beee87bbff58418bbd9df1825ad2abbe4e5d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d5/8aeb5b39e042ad8e437818103bf7603617ed6b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d5/1729005083a887f47b25fc3ab4fd1899800597 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d5/64d0bc3dd917926892c55e3706cc116d5b165e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d5/12861555e661953e9d010e4a5eadf64422ee6d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/cb/7abf64d5121a5a70a7a78aa8bc392658df0a0a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/57/5411e42564856eb8076b814c5ad415300f6aa4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/57/6c559c0eac4b77daa08246872342c7c79d28a5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/48/f18139336f3cd5973b64f443acd7a6f679ee6b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc3 in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1a/4d21dc85ccfd60af33d9982a35f13ab191f057 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1a/19879dd949cbaebfd0c82a624afb0a6f9e08e6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f5/6a1c7fbe14206a6ed7257c60f90d6fd503cabe =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f5/13dd7518693c29a2e58124084b8ce7f5214029 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/9e/5c49ed827a5426451cc3af7e910db69a4266ea =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/64/77f34469e0e3d6393320373402867dae418262 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/64/9337798457c5951cac8ea1dc92ca19d9411919 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/36/6258e35042a4d2469b73dd2f641595c0ece04c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/50/22397e4b27dc68af7779d0731d0cad74c42501 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/93/22aac0b0abd7f6cdbcfbc29883637ee83aacb7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/93/3217441181fb6fdecaf7b282e68f4f2da9a61c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/93/ea1ae2c1e989eba15f9337ebeb5c76ce5e408d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/0f/c97cd5830369132a6fcd007e854605db2a6232 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0f/99eb413771802c4069f286369378dbdc826194 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/23/f88e6a845288ad4d90d31f8ecdccbde57e2063 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/23/592a6914d580e2f0a89e6e4d07114f2d2510f3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3c/c9325bd7af7dad74080923d69d394a49902865 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/3c/3cf74297bddc81d85b28be8aa05ca9dfd7eed2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a6/76dde6f2b198c704d69dad39489fe0806c1eff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a6/895859b45519614a9824a43ccb58afad7cc86c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/06/07a11c3e8b035fa6f4d07751c4c874d08ff3a1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc9 in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/06/c462b7a9e5aa0833fb902f3a6cae67bcc39a7b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/06/d6abda5a05c4c4a81fd3be30c4ca72917a3087 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/06/2b1a23677f48689fb68c4646ebfff371c61a79 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f0/54f5e0bca4294ac790c6e2f507ac86f45f7e4a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f0/6199ac22b6d52e25d193983a1256953cbb835a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f0/f82ec8570576b0e4612926319af866971cca8b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/87/98f2c303b9b064370bf52a7ccdab748cbc815a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/87/6c9142a4523ea6dfc0666806427052c7c3ab34 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5a/fbeb54e997f9468beb968a8d3f3bf124d09b5c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6b/03eb3b9fd0796dcb82bf7a63a137dde1025102 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/14/96a21cf03e62b6e688b756b31083962726ccac =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/2e/42b8560f6b188d7a33aacb50d69956b75bab04 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f1/2083b58e04188c400a878d4772791e9a953b61 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f1/e28d8fa278b3384faaeb7fbafd873018c900cb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 17: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/86/a575a992d746da522fce38725c57e66fc237cf =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/86/c0dee5e6211964b292bf33a1b7203caa3b90eb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4f/516ac718abe783e797790c83660e1c80b98353 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4f/7af74708b47e2cae9051b011d9711be18bc932 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4f/69bb96dfdab7d62f649c5f8afd466b1cfd6690 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b8/8018da719c8a203d6f58278a60a9b246f250b9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/34/578a18f29eec650b5d1d12de077c0ca37cf8f3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/34/a251a987642fdac9b88ac849663f506159b6be =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/33/c28d1eb4303a085c5cae84b0587cda68475971 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/33/66f443a5a24c03728591a0e91a88f479c31038 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1c/bf67ef3198ed67894d0cbec3e778fc5b16c5a3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1c/52687b9ec7de1ef6dbac6134437d3d4dff4cbc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1c/60989239719164f03cf29a26e71b3043432af0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e2/3692a6cec9e3804055b97f056589abb2ec1bb2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/e2/cc40fa0100ced8775d8c82cb468bf87f23907e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a3/8e9c22d79db2bd00bfa30a31c80b5957752a9e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a3/b73c31d93bf3f3aab82b64b00c5309a7868f46 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a7/d666bd7dd8bf109913da51359d6289961207c5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a7/47234b4b11cb1c422a5671f82ff2297ad5e6ff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/62/7be12228fedee7e8ed078bbdb4d00625bd1734 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/62/ea6cce2b51796eca34d6d2057e397cef153157 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/62/687838ffb0c5766918b7d7fc983ebf2e45dc46 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/62/444ec92c64ea65f3c6e0175a9ef094ec076e8e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/62/91d86e38030777629bda5ca8feca3469543a79 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d8/240073f56ed8352ad2860ed2913fe7d38210b1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d8/a89f0e4c3d0a758325c0bfa2e9a351f7133ddd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/de/5da93aa8f85e1c3bb31bb96d569320a86150a8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/de/b827d86c3f7bc2e06707cabc9cc0e562634f41 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/de/e69ce5dc97c1fc6e3180e61d059d19c69332a4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ae/d75aef3256e378a62c2fa5f672d8546abd8b0d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ae/cb18573c12204551da364b503ce5e42afb320a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3a/4ad5089ff424b5ec7baafe144e0135791f4574 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0e/5aa6e19c12299755adc2cc34f7fc352fbbe062 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/75/c3a59deb80c440fd452588b6a110c60912919c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xf6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/75/c97543a285a42467cac4a7c0f758dfdb6f5235 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5f/86abb852e9f5a5b5c76c31f5ed98ce2011449f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e0/2eae72f91fdbaf43a41b900a08e3cb0c5029ee =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/92/d61f96b62a944d59602f20a8fc6445903b6103 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3b/9f03ee1584a8358bcb9d312c5e999bc43a72ad =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3b/49407e7ee1e66df45d8819258e8fbce6454072 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/c5/2beec76df33a5bddb3491e634ba4114b42dcc9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3f/bb276f370caf38c5f01f3ec8d88ff6d568eb25 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/3f/444f3e3399da8db7273b36a5c304686136a10f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d2/96e74d0a2cdbdda8f1356fe9620c1ba8cc5174 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d2/0f4ed1acd9ed985ba78fe1174488e9b235f8e1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f4/2c47f803c9cb626871e22cf6ab1c516b5e7f78 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f4/fa2d73fec8485bc3481b6ff6662a28424e4a1d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/78/2591fcafc82142c24b0c383e82be488696c438 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x91 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/78/7db15ea662ba85edaeade9ca1363cfe216ca2e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/78/dc9aafe6b1bc91a2a2d878ccf2c9a463ee3051 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a2/9a8d951b2e4140d8c68b247702d515863c1573 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a2/c73848f934a2f8ad5426990f779765363b0a83 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a2/a405fc08d529f7e9605b3d6b2811ecdf319e8e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a2/422c2902d8db225d764a595c57e9d7d97856ec =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/15/62a722f25c9dcc1051e2e4e0db35ddee175727 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/15/bc941727e3e9d07148ad68bd6c9b82fdeb6614 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/15/ba6ea0722bfee1aaa08a276049f7cf28a3eabe =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/66/bc4295b0a05481cc3e9d306d98bdb77d9d4662 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 16: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/66/2bece879dcee6a5dd2378170fc3316fcbca151 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/66/14aa0f9189b52f746b00c409ad886beaae3b65 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/65/5d08fe54c29f1913d9d48f155ce3a08e389954 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/65/25f50e1ec733863663835fa488e01c94c27ea0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d4/7d5a61727abaa7956b029202dcee278009fb3f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d4/7206d86e2267c313611039525b894da87713d0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d4/b9b887a0e75623a363050cb719dc38affa7697 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd7 in position 20: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d4/7f1e668ff76077d9ef7454458290213b778639 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d4/74fc85070a66b1760294bcb4c6433c235c84c0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e1/278d46d4dcc4a06d331d3f22de6a426a97cce5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e1/8b56e3b9abf483b666cf53fab4e233721804bc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/e1/1375794adb7aa0c611382b48b56c0b92d9ebf2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/77/c27f54aa59b39384b1d8cec5a8aefd138ae677 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/77/6f4cf498f10e966eeb3695bfa5762e75d82641 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e4/4b05dbd131b50d98a72655ee679686df017361 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5b/a86b8c6cb9464fbcaddf5250d0601aaa27cef6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5b/7e5c50beff7703ad71fe70281d38126a952021 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/54/81ccc17d547f14765a1081e582b06244e50b86 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f7/0872418c9faa8de7573cdfdf6c67ad28149eb6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f7/c12d8704611765b47a828d1aa2b7ff0dcdb8fc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/f7/ab0815684d219e00904fc2e45c2ec3de8e49b0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc8 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/f7/d1fa7b6177d08c60e81012be7123c687335093 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a8/93d507f1df9ff1880980832d4fb4545c9120dd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a8/defa8829073de14784a58a8ca9f668133dc757 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a8/59c9f8b8da1e1e06029d14e163fc520f1f40ed =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a8/1b5eea6842c182bd4d1a5b17d06bcbcef754ae =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/db/9dc5784938350697d042d495f303ee0ce80995 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/db/232736340bdb26e0397910f00c2c61dc58f18c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/db/4c9d2a7cc735681627b1932c7728a288480d5f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/db/6629bfe0266da1bd1e4cb609dc6168f7c1a445 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/db/93d560a595b8a5ee590788f21073bbbf2b788c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/db/5594b8d101a20350a3117cd162aec74683a523 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ee/1ff5893c1f9e3b3a6d793d91a4e26ce6af64d4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ee/99e8662c49f8d87432bcba0eb1d90ee295882e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc9 in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ea/f5ed7ec6cd1d0bfaff92ee84d07ba4e594d8a9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ea/d7e908918634fa552c1f97ca3d9ee89606f136 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ea/a130366f78964583dea31dc75707245be12444 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ea/8d14968f3e6464cfbb7eaf2a0e1716bdfcadb1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8c in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ea/28e9903a39314850d0cf8d2654b951fced8c90 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/21/f7ca2f5abdbda5098bbca3034dcf3367c0aca4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/21/71e89192a8e195213b875d839a819582fe268e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb7 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/21/337286bfa13690c7b4560ca23ff012ee023162 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5e/3538709fd82a64eb88a1ae525aa4499d90f5cd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/5e/a52b50752ddb6a1b7a3b9f6d2ac8a3a913157b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5e/dcae39685b804f363dbd3214e12a50079abc26 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e8/1ca1ff2596ca760cd6f8842b1851a3bade89e8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xf5 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d9/e6631dbfccd542003c906ac3b838c2dd628b1d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8c/4d58873eb1a4d39e7f6a5e9dba547f8d972c30 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8c/96277da3ba2ac35c6c840aba97cc0574e7723f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/8c/1150297b3885b042616c37dc62f40fd9778816 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/79/5fae04a617b490586cbad2fdb7b32ec95395ea =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6e/47fd85061e40a2192f40a0632ed988caebe55f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/27/0c0573a4fe84d41887664e86033fdb871955dd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/27/f59f120e78e856a1552994f5d8e5a3ca346440 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xda in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/30/be31a064587125d5fab26971b3cf183aa38d1b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/30/865c0c5359b2e4be4aebb455bf2a34d47cca2c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/30/f4f37713af85d03ed866ca1974951f887c8349 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb1 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/5c/45b45656fdbdce25bde11ff3a282f8fdfe5dee =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1f/375d86ea2eafa9c94acc4ca79d31b609d8e551 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/1f/1bca32281d4b5609f14c55668d43d575733a3e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/1f/778b2617122478f8d8a6a2b8fd4840d0657bd2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/2b/e1a5cb6645ac1c6a276236edac314a790e4c8f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2b/33262ea37471c6e3be786f945a11b441bd4c14 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/2b/967a4a102d73df656bff3e4ef666d243f4bd55 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2b/d8dd2edae774090ad34707cc17a21093de0d72 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/8e/6b38607de84e9dab640db4d2b3b68adf3a2065 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/8e/5b624836faa33b927ef477e900cde180726fba =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/8e/c7dfd397ffeeb66cc1090083576529c508fe8c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8e/449a2fe1dd54f381f820330a1c7ef1fd6e8447 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8e/16dc1d9e58082a71b133d969ab0236e22cf7d9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7c/7eb14a92abae8b266c92acb0d87ce52e4766a0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 17: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7c/770358707b23379c290ff077517efee6869cf7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7c/c80866b748c4c0a5a5a9ead1dd02113e27debb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ac/40350aa6cb34c691b9d00dc1e5185c422fe239 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ac/c2912fc72d9aa40692e3e0164ad66171e14362 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ac/093678b864f581f9d06f6aae0d466946d2b8de =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a1/eebd7daa6256802f5a50517ac76d4de531a99e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a1/fddb041b0eb4dd17f80c2012235a298b0c35a3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/24/7f63e6f1074ba607c951a4d88bc13d0dcd0b55 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/24/717c55af045a8497a908da74b02e6b00620cbd =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd9 in position 7: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/24/5e727b57cb4fa0fbebe30717dfc8d3123f2d32 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/24/f58acbe5f711cdddf8cf717e3b21e1d24fca19 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/bc/003f8a6ea8dd7f0220658603027510d053b452 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/11/d567e3ac19269d37086485b6176b65f1f14576 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe3 in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/11/b5c496e5e19e8949600ff9f4da1a460c1ae0ae =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/aa/9bc8ad6aad31d8ca2f5990a64012f54ffe416e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd9 in position 7: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/cd/e0b5bb2925316139c6e0a1056263eac0516558 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/69/5dab2c95bb384de6004b58d9e8a074afc0bad6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/69/21cd190e15409627ce0277219c77cdb61f4b11 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/07/be5d5f7b9be58fb0376e66c8af1f7f1134b56b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/07/2efe715e75ff520b5882a3bb5f13bc4dc99b7a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/07/156b3cb11856cad651a32faafb699cad5a755b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b0/6bdecc9863dd0e968e186e43d1d63357638c54 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b0/c90bbe63c8cc42a06e827ce6fb9f1a01450a9b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b0/b7870b934ded51496a77d281ff68fad33b50ff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/17/63339d68f56f088dc56f0414d6c08d0e5e1ce1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c1/b7ae11adc8deb817b531ef9aab141772d14582 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c1/337c25e38657a10f1727a8e631aabc33233349 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c4/7f696b929b1f11ba936e02bab24293a003b166 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c4/1e0d5addd5a2f7a01952fff6ad6f6b42fa40ff =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/c4/57fb7899e4199100745d5c14aef02c19dab7de =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c4/9f450184ad332c4b9566c0d6282a1b7648ed2a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a0/e126059a65d2f341b99f7708c58549f5278564 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a0/26bff671705f3be8a2166c9bb48b1241de36d2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/a0/d0654bbe618e55f555ffe8de3d58bb0134020a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/f8/5eee289dbded68352db78c0f6bea47c6a01c62 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/38/18f46ac9a55519a0b1a3e80ce966ca1410e68f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/38/b0f2103e6f68ed82f2613e8d169353fad5a0c3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/38/b6861b1b3409f9a7ad39bbefdc731e7695a2ef =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd9 in position 7: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/d7/d52e689a6df1758be1fd8de15206efcb3d32f3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8f in position 20: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d7/fa4f44636faa8e6f6d157244664d603bb8bff8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d7/efbedce9b52731ced0110356362b4bf99bbd55 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/6a/abfad65497d7f236ab17cf51501fd60fcb2b8e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/6a/6a59754f19d1dd7e11b2cdc3b05e59f6b72f78 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9d/1dcfdaf1a6857c5f83dc27019c7600e1ffaff8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9d/db3d82d92311be62f13188bb1611033d6c2327 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9d/30a67d6710b73cfa5d517dc7b2407c7ee96b7c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x91 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9d/e57d4c57e344dce03cf152c6c85a79e980963b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/9d/9ce63787e256224cbda27aa4bfb26126eb09c4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ec/dd476d910618e17eaf6ecd99d36939e145a348 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ec/68d88b1f89f54ab044cadb05b258fad3f63ec5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ec/03d7892653fc470b20da931ce04420dc54cf6c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc8 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/dd/a78aa1e04f184e93aea14a1d3670500bf6a686 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c2/de2ab706015ad2dd0121967a6163c7166bf451 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c2/ef205911ba9ff374039416bad7f2f2120a4c56 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c2/11f7963fe775f15303c5905ef4c593058c598e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/9a/50447ad3c5e907ed369b056bda86e73eb11b92 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9a/3a090f0c289564863a5b1f91a94887318a5f0c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/9a/1ecb3d06fe14c2ec1111849a2fe6bcfe60730f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/80/a6c4fdc7f2c1451f8e140fb1545aa4fad4762e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/80/6ce3c83cf0070feb9a9750d9a12657d6983f12 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/80/8452902a6c9dff942cc0818bcde29b5e5b60d9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/af/2224c11d70a0f48c39b01711fdf626dba93fe0 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/af/25ec9e96ba16aed55afa20b6b16cbc9a3dab6f =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/af/4e721b4845cae4f1a403137f2f6cfcf7f7ac87 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/a4/a3fa287f4f41785cc437aa3c19c35cffecc656 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/fe/38ae0ad010791c182c5df66ee47218cf163804 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9c in position 6: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7d/3240f9b82dedd0c6e3aa3ff26861add3ea0e50 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7d/f66b46095441b5545840be99fbdb519da8f26b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7d/e602a994940fa9313d7322523db58f10ecec8c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7d/83da4aba524abcc9fb64e99871aaa6fe10e644 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7d/107e41acdc582bd234c8fc507a3d6830826ccb =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c7/7e659c4e79a2712af0e34eb939d9608935edc7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/c7/a3d490952d75b8b25e3442558340fbd964d133 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c7/48d1b0d7fc5cbda4b0de50abc63c7975ff6fee =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c7/620f8a4ce2bc7ec7ed3f1b7ae5f5d2cd30b4e9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/51/13fa4ad0433fe6878d412524c829747660c872 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/51/03c7e6bf48dce169eb4ca5db526a0da005e07e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/97/74089a1245ed1d0ae38df3016d19229be838b9 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/97/50bc025a3a23e0efa381b8b92e6b8986e7fe06 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/05/4b0cbca4a357da4d8238cecb4b04a6b797e34d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/05/f5e1f857debebbece2f59e3180d595c433cb50 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/05/f10a7a648d1c0d7e6f4def7de39fb02a4deafc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/05/16ea30cb8ea9d1b95ebc6299338636c81c28de =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/bf/7cec8d12d8eeec1cb9f6e4ee9456fe01ca7055 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdb in position 7: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/bf/e79401024db7b1f323a2a9f57f78ddadfb950c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/bf/fa3d43aa22d98864a74bcab30b14b73ecbdcb1 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/94/2c0f8d2d4630b6748d835a107337888f4d6149 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/94/c792d15580e72a500c06a4fc84063a46def871 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/94/bf0b2c6f7f44f66f9aedf403d7b063a3184bfa =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e9/18c8a2b57f868089db787df0078bf03ec7b418 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/e9/738a81ad3974802072c9edc7e176c24c984305 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/63/dea8cc907ebd264b16d7e0cab0f643c6de1635 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/2f/67c5082f87a0ea0d9d16593a6f61361e06c9d4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/2f/89ed7ba0b8462521c932862e62b60cd0c0ee37 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/6c/65eae9232d711a62d0408b645a364cadbbacc2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 17: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/6c/5806bb821297f733bbd47e47a1f9311e947ef4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/6c/764400e19d39cf20bdecee2045ac5811d60032 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/81/747600b4815ac9f417c0e436ad4f1d2be7c183 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/02/72c617455b83049646754b4d530c2f81579344 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/02/ceda50f64e3361e116103464187a8d5ef0aef6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/02/ea140b8e7e971e496a38aa641a310e21cd3996 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/39/49785b26cde4757c5ef750e652c32873afc8d4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/39/5433830607369bb3f21a001c778943dd3cda27 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/39/16aaafad55de0ac22bb978e72a842d6824ad88 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/c8/4db44ce27ddcbdec6b69da1854daf4da156e47 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c8/50e624f174e9e35db534e20560f929bb03e99e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/c8/90fa21ccd69820f0f3a0ec5973284ec3319807 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/4a/5004372320784ceb2015e02f1928e62f1b7828 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/4a/8c72737d3abf9ce70858906309a95642f52bde =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/4a/277315f81b954f2c8efe76a8971f5d0995ac57 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/90/72164653a2f4b46aa4e6dadb938a9dc3d8709a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/90/6a6a2704003cd103976b26845a1862803494ad =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/29/37e71b3c5fdb87b4483aa443bab17268e3cc16 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/29/fd6b476233caa8f959d9a1a65d101c3f36654a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/25/e4d7e326d71d98e8e6f1f0df7548325036f1c2 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ad/957ffa810898e56085b906d4ee1bc45f983110 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/ad/ccc68eb4939969406dc6701370a94393396392 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/16/f31e4a8bd0c5657ebeb1e4f4f11bd5e400f62d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b3/22dff7ba71581e4704dd79c17b2a8cf1b9d1b3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b3/c618c07100a77f42ae9fcd5b8d4d05c97181c4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b3/89367ca23d8c16e7f9dd89c68b74ac664f5354 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b3/26bf480b6d2988621703b213d0811aa598d9f7 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b3/e7580dc53fe5c1cb8b38b1c8e4236dfa202a73 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/4c/ec7967b01ef82d6e2f676da1f126406fe207f5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4c/5f2861dbf9883855d12d2f9729e7367ed1ff38 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 17: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/4c/cc92bf49c384cc114d2e8be2909da2840ed3a3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xe3 in position 6: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/0b/874bb0d2fce610c09540ba5ce444055790a676 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0b/b93e15ac308b2cad5daae73a9bb50bb72deed8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/71/88570dd667bfa1ba1bbc0d03165170025ad22a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/42/019b92a33787df0d324354b2e66bf4365d51ab =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/42/a1448d449b4bf06906470dcef09eee71823da5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/42/6c198e1506ad08f88cce22eadad2b1c3af4e20 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/42/439c0d627f7d7538643f0810737f69a09af3e8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/47/35a3b985a4fda8acc8be8a83d1c6e251a8911c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7e/41991518158c1a5c3227167c906e4d01a795f3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/7e/7af211a3356607d76e127cae88d63f31b7c1e5 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/7e/602c5c4579bf6e88885eceb1daa5c6abfc15c4 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/12/dc163ec17992e023d192ea1c7b9e7e8a2e2105 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8c in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/12/f5b48202f3f56f5ce00b01ecb9f015a92b4343 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/20/b4b1d9a2e75d14ef25801cf005f710bae3132e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/20/97df757cc617dfe642949cbf1663835654c2dc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/20/51b32c3df5380643ee81ef4aaca576314e9daf =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/20/a11fd3341e2d640ced6f5f268bcab6d6c5a60c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/83/98e2d227fbb60402432e29e9fada027c20a873 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb1 in position 9: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/83/209dd07d9736232e20c66d9e6c5586c5a74062 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/83/eb93f97116d4a07b74f320a4b8ec072a21900b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/8b/8d5893632ee7d4ca96bfc7c991bda0c99ad2c6 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8b/8253850e78caa2c84c46842e4cdbaae57a3904 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8b/f8fb28c8e3e453394ed711f7cfbc0d92e8ba1a =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b4/6e3c986946003c5d753f7bc765bace7d97e298 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b4/15f61a00693678fbc91887ebdc1678b7e8ba48 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xcd in position 4: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/b4/9edfb6fbd667c4a1581bd46e434a551ce2f985 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b4/4893d40b6579a820ee3c10cebb55880c4b2c1c =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b4/3c7f419d7e645105271d9ab878f9f5d1e901ef =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ef/4661733ce37cdcaf4e22dcc51d87d0d75be3fc =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/ef/d521e3332409a57afb8ad905de3b3be370d33b =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/da/69f24283020b71f4421a97cd5498940261acf3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/da/898b340bcf6bae5712a1cdda767e33c8a95bc3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/da/5cfe060b2dad6e022033e3ca0f915b28419522 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte


===== /workspaces/python-rpg-projekt/.git/objects/0c/df4b12d480f416ebb4ae2535df7f3ccdb54349 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0c/ef771aa059aedeb479e5af174d4b59935a9b44 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/0c/3827bad580180b597753729862fe9e2eec2b89 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/53/a91727f769a269d1679fb8593b0801826cf724 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/53/57046b86199b74787285a36452022c88b2db33 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b5/347d501303cdfbb14706293203239e5a4d120d =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/b5/0b03c93442ed0ca527ea0ca2a2b58969271dba =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8a/6b63fd8ef63ce642048e78188f8489afe4e6b8 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/8a/93e1adedc3426ee39e41dee3157d7cca128906 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d0/7f865435c11b315360a84a94b67464e9d131e3 =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte


===== /workspaces/python-rpg-projekt/.git/objects/d0/54256d787c0852efec36a441e3493cb727908e =====
Fehler beim Lesen der Datei: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte


===== /workspaces/python-rpg-projekt/.git/info/exclude =====
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


===== /workspaces/python-rpg-projekt/logs/rpg.log =====
2025-05-09 08:39:46 - rpg - INFO - Python RPG gestartet im Modus: auto
2025-05-09 08:39:46 - rpg - INFO - Python-Version: 3.12.3 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:46:43) [GCC 11.2.0]
2025-05-09 08:39:46 - rpg.main - INFO - Starte Spiel im automatischen Modus (Simulation mit 2 Spielern, 3 Begegnungen)
2025-05-09 08:39:49 - rpg - INFO - Programm durch Benutzer abgebrochen


===== /workspaces/python-rpg-projekt/src/main.py =====
"""
Haupteinstiegspunkt für das Python-RPG-Projekt

Analysiert Befehlszeilenargumente und startet das Spiel im entsprechenden Modus.
"""
import os
import sys
import argparse
import logging
from typing import Dict, Any

# Stellen sicher, dass src im Python-Pfad ist
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(__file__))))

from src.utils.logging_setup import setup_logging
from src.config.config import get_config


def parse_args() -> argparse.Namespace:
    """
    Analysiert die Befehlszeilenargumente.
    
    Returns:
        argparse.Namespace: Die analysierten Argumente
    """
    parser = argparse.ArgumentParser(description='Python RPG mit KI-Komponenten')
    
    # Betriebsmodus
    parser.add_argument(
        '--mode', 
        type=str, 
        choices=['manual', 'auto', 'train', 'evaluate'], 
        default='auto',
        help='Betriebsmodus: manual (interaktiv), auto (Simulation), train (RL-Training), evaluate (RL-Evaluierung)'
    )
    
    # Simulationsparameter
    parser.add_argument(
        '--players',
        type=int,
        default=2,
        help='Anzahl der Spielercharaktere für den Auto-Modus'
    )
    
    parser.add_argument(
        '--encounters',
        type=int,
        default=3,
        help='Anzahl der Begegnungen für den Auto-Modus'
    )
    
    # Optional: Loglevel überschreiben
    parser.add_argument(
        '--log-level',
        type=str,
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        help='Überschreibt das in der Konfiguration festgelegte Log-Level'
    )
    
    # Optional: Pfad zu einer alternativen Konfigurationsdatei
    parser.add_argument(
        '--config',
        type=str,
        help='Pfad zu einer alternativen settings.json5-Datei'
    )
    
    return parser.parse_args()


def run_manual_mode() -> None:
    """
    Startet das Spiel im manuellen (interaktiven) Modus.
    Diese Funktion ist ein Platzhalter und wird später implementiert.
    """
    logger = logging.getLogger('rpg.main')
    logger.info("Starte Spiel im manuellen Modus (interaktiv)")
    logger.warning("Der manuelle Modus ist noch nicht implementiert!")


def run_auto_mode(num_players: int = 2, num_encounters: int = 3) -> None:
    """
    Startet das Spiel im automatischen (Simulations-) Modus.
    
    Args:
        num_players (int): Anzahl der Spielercharaktere
        num_encounters (int): Anzahl der zu simulierenden Begegnungen
    """
    logger = logging.getLogger('rpg.main')
    logger.info(f"Starte Spiel im automatischen Modus (Simulation mit {num_players} Spielern, {num_encounters} Begegnungen)")
    
    try:
        # Pfade zu den JSON5-Dateien
        base_path = os.path.dirname(__file__)
        characters_path = os.path.join(base_path, "definitions", "json_data", "characters.json5")
        skills_path = os.path.join(base_path, "definitions", "json_data", "skills.json5")
        opponents_path = os.path.join(base_path, "definitions", "json_data", "opponents.json5")
        
        # CLI-Simulation importieren und ausführen
        from src.ui.cli_main_loop import run_simulation
        run_simulation(characters_path, skills_path, opponents_path)
        
    except Exception as e:
        logger.exception(f"Fehler im automatischen Modus: {str(e)}")


def run_train_mode() -> None:
    """
    Startet das RL-Training.
    Diese Funktion ist ein Platzhalter und wird später implementiert.
    """
    logger = logging.getLogger('rpg.main')
    logger.info("Starte RL-Training")
    logger.warning("Der Trainingsmodus ist noch nicht implementiert!")


def run_evaluate_mode() -> None:
    """
    Evaluiert ein trainiertes RL-Modell.
    Diese Funktion ist ein Platzhalter und wird später implementiert.
    """
    logger = logging.getLogger('rpg.main')
    logger.info("Starte RL-Evaluierung")
    logger.warning("Der Evaluierungsmodus ist noch nicht implementiert!")


def main() -> None:
    """
    Hauptfunktion des Programms.
    Analysiert Argumente und startet das Spiel im entsprechenden Modus.
    """
    args = parse_args()
    
    # Logger einrichten
    logger = setup_logging('rpg')
    
    # Log-Level überschreiben, falls angegeben
    if args.log_level:
        logger.setLevel(getattr(logging, args.log_level))
    
    # Konfiguration laden
    config = get_config()
    
    # Wichtige Informationen loggen
    logger.info(f"Python RPG gestartet im Modus: {args.mode}")
    logger.info(f"Python-Version: {sys.version}")
    logger.debug(f"Konfiguration geladen: {config.get('game_settings')}")
    
    # Je nach Modus die entsprechende Funktion aufrufen
    try:
        if args.mode == 'manual':
            run_manual_mode()
        elif args.mode == 'auto':
            run_auto_mode(args.players, args.encounters)
        elif args.mode == 'train':
            run_train_mode()
        elif args.mode == 'evaluate':
            run_evaluate_mode()
        else:
            logger.error(f"Ungültiger Modus: {args.mode}")
            sys.exit(1)
        
    except KeyboardInterrupt:
        logger.info("Programm durch Benutzer abgebrochen")
        sys.exit(0)
    except Exception as e:
        logger.exception(f"Unerwarteter Fehler: {str(e)}")
        sys.exit(1)
    
    logger.info("Programm normal beendet")


if __name__ == "__main__":
    main()


===== /workspaces/python-rpg-projekt/src/ai/ai_dispatcher.py =====
"""
AI-Dispatcher

Wählt die passende KI-Strategie basierend auf Charakter-Daten.
"""
from typing import Dict, Optional, List, Any

from src.game_logic.entities import CharacterInstance
from src.definitions.skill import SkillDefinition
from src.ai.strategies.base_strategy import BaseStrategy
from src.ai.strategies.basic_melee import BasicMeleeStrategy
from src.ai.strategies.basic_ranged import BasicRangedStrategy
from src.ai.strategies.support_caster import SupportCasterStrategy
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class AIDispatcher:
    """
    Verwaltet KI-Strategien und wählt die passende für einen Charakter aus.
    """
    
    def __init__(self):
        """Initialisiert den AI-Dispatcher."""
        # Dictionary zum Zwischenspeichern von Strategien für Charaktere
        self._character_strategies: Dict[str, BaseStrategy] = {}
        
        # Strategie-Map: Strategie-ID -> Strategie-Klasse
        self.strategy_map = {
            'basic_melee': BasicMeleeStrategy,
            'basic_ranged': BasicRangedStrategy,
            'support_caster': SupportCasterStrategy,
        }
    
    def get_strategy_for_character(self, character: CharacterInstance) -> Optional[BaseStrategy]:
        """
        Gibt die passende KI-Strategie für einen Charakter zurück.
        
        Args:
            character (CharacterInstance): Der Charakter
            
        Returns:
            Optional[BaseStrategy]: Die KI-Strategie oder None, wenn keine passende gefunden wird
        """
        # Prüfen, ob wir bereits eine Strategie für diesen Charakter haben
        if character.id in self._character_strategies:
            return self._character_strategies[character.id]
        
        # Strategie basierend auf AI-Strategy-Attribut wählen
        if hasattr(character, 'ai_strategy') and character.ai_strategy:
            strategy_id = character.ai_strategy
            strategy_class = self.strategy_map.get(strategy_id)
            
            if strategy_class:
                strategy = strategy_class(character)
                self._character_strategies[character.id] = strategy
                logger.debug(f"Strategie '{strategy_id}' für {character.name} gewählt")
                return strategy
        
        # Fallback: Strategie basierend auf Tags wählen
        if character.has_tag("CASTER") and character.has_tag("SUPPORT"):
            strategy = SupportCasterStrategy(character)
        elif character.has_tag("RANGED"):
            strategy = BasicRangedStrategy(character)
        else:
            # Standardmäßig Nahkampf-Strategie
            strategy = BasicMeleeStrategy(character)
        
        self._character_strategies[character.id] = strategy
        logger.debug(f"Fallback-Strategie '{strategy.__class__.__name__}' für {character.name} gewählt")
        return strategy
    
    def choose_action(self, character: CharacterInstance, 
                      allies: List[CharacterInstance], 
                      enemies: List[CharacterInstance],
                      available_skills: Dict[str, SkillDefinition]):
        """
        Wählt eine Aktion für einen Charakter basierend auf seiner KI-Strategie.
        
        Args:
            character (CharacterInstance): Der Charakter, für den eine Aktion gewählt wird
            allies (List[CharacterInstance]): Liste der verbündeten Charaktere
            enemies (List[CharacterInstance]): Liste der feindlichen Charaktere
            available_skills (Dict[str, SkillDefinition]): Verfügbare Skills mit ihren Definitionen
            
        Returns:
            Tuple: (gewählter Skill, Hauptziel, sekundäre Ziele) oder (None, None, []), wenn keine Aktion möglich ist
        """
        strategy = self.get_strategy_for_character(character)
        if not strategy:
            logger.warning(f"Keine KI-Strategie für {character.name} gefunden")
            return None, None, []
        
        # Strategisch Aktion wählen
        return strategy.choose_action(allies, enemies, available_skills)


# Globaler AI-Dispatcher
_ai_dispatcher = AIDispatcher()


def get_ai_dispatcher() -> AIDispatcher:
    """
    Gibt die globale Instanz des AI-Dispatchers zurück.
    
    Returns:
        AIDispatcher: Die globale Instanz
    """
    return _ai_dispatcher


===== /workspaces/python-rpg-projekt/src/ai/__init__.py =====
"""
AI Paket

Enthält KI-Strategien und -Logik für Gegner im Spiel.
"""


===== /workspaces/python-rpg-projekt/src/ai/strategies/support_caster.py =====
"""
Support-Caster-Strategie

Implementiert eine KI-Strategie für Unterstützungs-Zauberwirker.
"""
import random
from typing import List, Optional, Dict, Any, Tuple

from src.game_logic.entities import CharacterInstance
from src.definitions.skill import SkillDefinition
from src.ai.strategies.base_strategy import BaseStrategy
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class SupportCasterStrategy(BaseStrategy):
    """
    KI-Strategie für Unterstützer und Heiler.
    
    Diese Strategie priorisiert:
    1. Heilung von verletzten Verbündeten
    2. Unterstützungszauber auf Verbündete
    3. Schwächungszauber auf Gegner
    4. Direkte Angriffe als letzte Wahl
    """
    
    def choose_action(self, allies: List[CharacterInstance], enemies: List[CharacterInstance], 
                      available_skills: Dict[str, SkillDefinition]) -> Tuple[Optional[SkillDefinition], 
                                                                            Optional[CharacterInstance], 
                                                                            List[CharacterInstance]]:
        """
        Wählt eine Aktion basierend auf der aktuellen Kampfsituation aus.
        
        Args:
            allies (List[CharacterInstance]): Liste der verbündeten Charaktere
            enemies (List[CharacterInstance]): Liste der feindlichen Charaktere
            available_skills (Dict[str, SkillDefinition]): Verfügbare Skills mit ihren Definitionen
            
        Returns:
            Tuple[Optional[SkillDefinition], Optional[CharacterInstance], List[CharacterInstance]]: 
            Der gewählte Skill, das Hauptziel und sekundäre Ziele
        """
        if not self.character.can_act():
            logger.debug(f"{self.character.name} kann nicht handeln")
            return None, None, []
        
        # Gültige Ziele finden
        valid_enemies = self._get_valid_targets(enemies)
        valid_allies = self._get_valid_targets(allies)
        
        if not valid_enemies and not valid_allies:
            logger.debug(f"{self.character.name} hat keine gültigen Ziele")
            return None, None, []
        
        # Verfügbare Skills kategorisieren
        healing_skills = []
        buff_skills = []
        debuff_skills = []
        attack_skills = []
        
        for skill_id, skill in available_skills.items():
            if not self._can_use_skill(skill):
                continue
                
            if 'base_healing' in skill.effects:
                healing_skills.append(skill)
            elif skill.is_self_effect() or (skill.applies_effects and any(e.id.endswith('_UP') for e in skill.applies_effects)):
                buff_skills.append(skill)
            elif skill.applies_effects and any(e.id.endswith('_DOWN') or e.id in ('STUNNED', 'SLOWED', 'WEAKENED') for e in skill.applies_effects):
                debuff_skills.append(skill)
            elif 'base_damage' in skill.effects or skill.get_base_damage() is not None:
                attack_skills.append(skill)
        
        # Entscheidungslogik
        chosen_skill = None
        target = None
        secondary_targets = []
        
        # 1. Prüfen, ob ein Verbündeter stark verletzt ist (< 50% HP)
        # und ob wir einen Heilzauber haben
        wounded_allies = [ally for ally in valid_allies if ally.hp < ally.get_max_hp() * 0.5]
        
        if wounded_allies and healing_skills:
            # Healing-Priorität: am stärksten verletzter Verbündeter
            chosen_skill = random.choice(healing_skills)
            target = self._get_lowest_health_percentage_target(wounded_allies)
            logger.debug(f"{self.character.name} heilt {target.name} mit {chosen_skill.name}")
        
        # 2. Prüfen, ob wir Buff-Skills haben und jemand diese gebrauchen könnte
        elif buff_skills and valid_allies and random.random() < 0.7:  # 70% Chance für Buff-Priorisierung
            chosen_skill = random.choice(buff_skills)
            
            # Ziel für Buff: Entweder self-effect oder stärkster Verbündeter
            if chosen_skill.is_self_effect():
                target = self.character
            else:
                # Einen starken Verbündeten auswählen (z.B. mit hohem Schaden)
                target = self._get_strongest_target(valid_allies)
            
            logger.debug(f"{self.character.name} verstärkt {target.name} mit {chosen_skill.name}")
        
        # 3. Prüfen, ob wir Debuff-Skills haben und Gegner da sind
        elif debuff_skills and valid_enemies and random.random() < 0.6:  # 60% Chance für Debuff-Priorisierung
            chosen_skill = random.choice(debuff_skills)
            
            # Priorität für Debuff: starke Gegner oder Caster
            caster_enemies = self._filter_targets_by_tag(valid_enemies, "CASTER")
            
            if caster_enemies and random.random() < 0.7:
                target = self._get_strongest_target(caster_enemies)
            else:
                target = self._get_strongest_target(valid_enemies)
            
            logger.debug(f"{self.character.name} schwächt {target.name} mit {chosen_skill.name}")
            
            # Bei Flächeneffekten sekundäre Ziele hinzufügen
            if chosen_skill.is_area_effect() and len(valid_enemies) > 1:
                area_type = chosen_skill.get_area_type()
                
                if area_type == 'SPLASH':
                    secondary_targets = [t for t in valid_enemies if t != target]
        
        # 4. Als letzte Option: Angriff, falls möglich
        elif attack_skills and valid_enemies:
            chosen_skill = random.choice(attack_skills)
            
            # Priorität für Angriff: schwache oder verletzliche Gegner
            if random.random() < 0.6:
                target = self._get_weakest_target(valid_enemies)
            else:
                target = self._get_random_target(valid_enemies)
            
            logger.debug(f"{self.character.name} greift {target.name} mit {chosen_skill.name} an")
            
            # Bei Flächeneffekten sekundäre Ziele hinzufügen
            if chosen_skill.is_area_effect() and len(valid_enemies) > 1:
                area_type = chosen_skill.get_area_type()
                
                if area_type == 'SPLASH':
                    secondary_targets = [t for t in valid_enemies if t != target]
        
        # Wenn keine passende Aktion gefunden wurde
        if not chosen_skill:
            # Einfach irgendeinen verfügbaren Skill wählen
            all_usable_skills = [s for s_id, s in available_skills.items() if self._can_use_skill(s)]
            
            if not all_usable_skills:
                logger.debug(f"{self.character.name} hat keine verwendbaren Skills")
                return None, None, []
            
            chosen_skill = random.choice(all_usable_skills)
            
            # Standard-Ziel basierend auf Skill-Typ wählen
            if chosen_skill.is_self_effect():
                target = self.character
            elif 'base_healing' in chosen_skill.effects:
                target = self._get_random_target([a for a in valid_allies if a.hp < a.get_max_hp()])
                target = target or self.character  # Fallback auf selbst, wenn kein verletztes Ziel
            else:
                target = self._get_random_target(valid_enemies) if valid_enemies else None
        
        if target:
            logger.debug(f"{self.character.name} (Support-KI) wählt {chosen_skill.name} mit Ziel {target.name}")
        else:
            logger.warning(f"{self.character.name} hat Skill {chosen_skill.name} gewählt, aber kein gültiges Ziel gefunden")
            return None, None, []
        
        return chosen_skill, target, secondary_targets


===== /workspaces/python-rpg-projekt/src/ai/strategies/basic_ranged.py =====
"""
Basis-Fernkampf-Strategie

Implementiert eine einfache KI-Strategie für Fernkämpfer.
"""
import random
from typing import List, Optional, Dict, Any, Tuple

from src.game_logic.entities import CharacterInstance
from src.definitions.skill import SkillDefinition
from src.ai.strategies.base_strategy import BaseStrategy
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class BasicRangedStrategy(BaseStrategy):
    """
    Einfache KI-Strategie für Fernkämpfer.
    
    Diese Strategie priorisiert:
    1. Taktische Positionierung (nicht implementiert in dieser Version)
    2. Schwächere Ziele oder Magier/Heiler
    3. Skills mit Status-Effekten, wenn verfügbar
    """
    
    def choose_action(self, allies: List[CharacterInstance], enemies: List[CharacterInstance], 
                      available_skills: Dict[str, SkillDefinition]) -> Tuple[Optional[SkillDefinition], 
                                                                            Optional[CharacterInstance], 
                                                                            List[CharacterInstance]]:
        """
        Wählt eine Aktion basierend auf der aktuellen Kampfsituation aus.
        
        Args:
            allies (List[CharacterInstance]): Liste der verbündeten Charaktere
            enemies (List[CharacterInstance]): Liste der feindlichen Charaktere
            available_skills (Dict[str, SkillDefinition]): Verfügbare Skills mit ihren Definitionen
            
        Returns:
            Tuple[Optional[SkillDefinition], Optional[CharacterInstance], List[CharacterInstance]]: 
            Der gewählte Skill, das Hauptziel und sekundäre Ziele
        """
        if not self.character.can_act():
            logger.debug(f"{self.character.name} kann nicht handeln")
            return None, None, []
        
        # Gültige Ziele finden
        valid_targets = self._get_valid_targets(enemies)
        if not valid_targets:
            logger.debug(f"{self.character.name} hat keine gültigen Ziele")
            return None, None, []
        
        # Verfügbare Skills sortieren
        skills_with_effects = []  # Skills mit Statuseffekten
        normal_attack_skills = []  # Normale Angriffsfertigkeiten
        other_skills = []  # Andere Skills (Heilung, Buff, etc.)
        
        for skill_id, skill in available_skills.items():
            if self._can_use_skill(skill):
                if skill.applies_effects and ('base_damage' in skill.effects or skill.get_base_damage() is not None):
                    skills_with_effects.append(skill)
                elif 'base_damage' in skill.effects or skill.get_base_damage() is not None:
                    normal_attack_skills.append(skill)
                else:
                    other_skills.append(skill)
        
        # Skills mit Status-Effekten bevorzugen, dann normale Angriffe, dann andere
        all_usable_skills = skills_with_effects + normal_attack_skills + other_skills
        
        if not all_usable_skills:
            logger.debug(f"{self.character.name} hat keine verwendbaren Skills")
            return None, None, []
        
        # Skill-Auswahl-Logik
        chosen_skill = None
        
        # Mit 60% Wahrscheinlichkeit Status-Effekt-Skills verwenden, wenn verfügbar
        if skills_with_effects and random.random() < 0.6:
            chosen_skill = random.choice(skills_with_effects)
        # Mit 30% Wahrscheinlichkeit normale Angriffe verwenden, wenn verfügbar
        elif normal_attack_skills and random.random() < 0.3:
            chosen_skill = random.choice(normal_attack_skills)
        # Sonst zufälligen Skill wählen
        else:
            chosen_skill = random.choice(all_usable_skills)
        
        # Ziel auswählen
        target = None
        secondary_targets = []
        
        if chosen_skill.is_self_effect():
            # Selbst-Effekt
            target = self.character
        elif 'base_healing' in chosen_skill.effects:
            # Heilungs-Skill - den am meisten verletzten Verbündeten auswählen
            wounded_allies = [ally for ally in allies if ally.hp < ally.get_max_hp() and ally.is_alive()]
            if wounded_allies:
                target = self._get_lowest_health_percentage_target(wounded_allies)
        else:
            # Angriffs-Skill
            
            # Priorität: Magier/Caster > Schwache Ziele > Zufällig
            caster_targets = self._filter_targets_by_tag(valid_targets, "CASTER")
            
            if caster_targets and random.random() < 0.7:
                # Mit 70% Wahrscheinlichkeit Caster angreifen, wenn vorhanden
                target = self._get_weakest_target(caster_targets)
            elif random.random() < 0.6:
                # Mit 60% Wahrscheinlichkeit das schwächste Ziel wählen
                target = self._get_weakest_target(valid_targets)
            else:
                # Sonst zufälliges Ziel
                target = self._get_random_target(valid_targets)
            
            # Bei Flächeneffekten sekundäre Ziele auswählen
            if chosen_skill.is_area_effect() and len(valid_targets) > 1:
                area_type = chosen_skill.get_area_type()
                
                if area_type == 'CLEAVE':
                    # Bei Cleave ein weiteres zufälliges Ziel wählen
                    other_targets = [t for t in valid_targets if t != target]
                    if other_targets:
                        secondary_targets = [random.choice(other_targets)]
                
                elif area_type == 'SPLASH':
                    # Bei Splash alle Ziele im Bereich wählen
                    # Für Einfachheit: alle anderen Ziele hinzufügen
                    secondary_targets = [t for t in valid_targets if t != target]
        
        logger.debug(f"{self.character.name} (Fernkampf-KI) wählt {chosen_skill.name} mit Ziel {target.name if target else 'keines'}")
        
        return chosen_skill, target, secondary_targets


===== /workspaces/python-rpg-projekt/src/ai/strategies/basic_melee.py =====
"""
Basis-Nahkampf-Strategie

Implementiert eine einfache KI-Strategie für Nahkämpfer.
"""
import random
from typing import List, Optional, Dict, Any, Tuple

from src.game_logic.entities import CharacterInstance
from src.definitions.skill import SkillDefinition
from src.ai.strategies.base_strategy import BaseStrategy
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class BasicMeleeStrategy(BaseStrategy):
    """
    Einfache KI-Strategie für Nahkämpfer.
    
    Diese Strategie priorisiert:
    1. Schwache Ziele (geringere HP)
    2. Offensive Skills gegenüber defensiven
    3. Stärkere Angriffe, wenn genug Ressourcen vorhanden sind
    """
    
    def choose_action(self, allies: List[CharacterInstance], enemies: List[CharacterInstance], 
                      available_skills: Dict[str, SkillDefinition]) -> Tuple[Optional[SkillDefinition], 
                                                                            Optional[CharacterInstance], 
                                                                            List[CharacterInstance]]:
        """
        Wählt eine Aktion basierend auf der aktuellen Kampfsituation aus.
        
        Args:
            allies (List[CharacterInstance]): Liste der verbündeten Charaktere
            enemies (List[CharacterInstance]): Liste der feindlichen Charaktere
            available_skills (Dict[str, SkillDefinition]): Verfügbare Skills mit ihren Definitionen
            
        Returns:
            Tuple[Optional[SkillDefinition], Optional[CharacterInstance], List[CharacterInstance]]: 
            Der gewählte Skill, das Hauptziel und sekundäre Ziele
        """
        if not self.character.can_act():
            logger.debug(f"{self.character.name} kann nicht handeln")
            return None, None, []
        
        # Gültige Ziele finden
        valid_targets = self._get_valid_targets(enemies)
        if not valid_targets:
            logger.debug(f"{self.character.name} hat keine gültigen Ziele")
            return None, None, []
        
        # Verfügbare Skills sortieren (offensive zuerst)
        offensive_skills = []
        other_skills = []
        
        for skill_id, skill in available_skills.items():
            if self._can_use_skill(skill):
                if 'base_damage' in skill.effects or skill.get_base_damage() is not None:
                    offensive_skills.append(skill)
                else:
                    other_skills.append(skill)
        
        # Offensive Skills nach Schaden sortieren (stärkste zuerst)
        offensive_skills.sort(
            key=lambda s: (s.get_base_damage() or 0) * s.get_multiplier(),
            reverse=True
        )
        
        # Alle verfügbaren Skills kombinieren
        all_usable_skills = offensive_skills + other_skills
        
        if not all_usable_skills:
            logger.debug(f"{self.character.name} hat keine verwendbaren Skills")
            return None, None, []
        
        # Skill auswählen (mit 70% Chance den stärksten Angriff, sonst zufällig)
        if random.random() < 0.7 and offensive_skills:
            chosen_skill = offensive_skills[0]
        else:
            chosen_skill = random.choice(all_usable_skills)
        
        # Ziel auswählen
        target = None
        secondary_targets = []
        
        if chosen_skill.is_self_effect():
            # Selbst-Effekt
            target = self.character
        elif 'base_healing' in chosen_skill.effects:
            # Heilungs-Skill - den am meisten verletzten Verbündeten auswählen
            wounded_allies = [ally for ally in allies if ally.hp < ally.get_max_hp() and ally.is_alive()]
            if wounded_allies:
                target = self._get_lowest_health_percentage_target(wounded_allies)
        else:
            # Angriffs-Skill - mit 80% Chance das schwächste Ziel, sonst zufällig
            if random.random() < 0.8:
                target = self._get_weakest_target(valid_targets)
            else:
                target = self._get_random_target(valid_targets)
            
            # Bei Flächeneffekten sekundäre Ziele auswählen
            if chosen_skill.is_area_effect() and len(valid_targets) > 1:
                area_type = chosen_skill.get_area_type()
                
                if area_type == 'CLEAVE':
                    # Bei Cleave ein weiteres zufälliges Ziel wählen
                    other_targets = [t for t in valid_targets if t != target]
                    if other_targets:
                        secondary_targets = [random.choice(other_targets)]
                
                elif area_type == 'SPLASH':
                    # Bei Splash alle Ziele im Bereich wählen
                    # Für Einfachheit: alle anderen Ziele hinzufügen
                    secondary_targets = [t for t in valid_targets if t != target]
        
        logger.debug(f"{self.character.name} (Nahkampf-KI) wählt {chosen_skill.name} mit Ziel {target.name if target else 'keines'}")
        
        return chosen_skill, target, secondary_targets


===== /workspaces/python-rpg-projekt/src/ai/strategies/__init__.py =====
"""
Strategien Unterpaket

Enthält verschiedene regelbasierte KI-Strategien für unterschiedliche Gegnertypen.
"""


===== /workspaces/python-rpg-projekt/src/ai/strategies/base_strategy.py =====
"""
Basis-Strategie

Definiert die abstrakte Basisklasse für alle KI-Strategien.
"""
from abc import ABC, abstractmethod
from typing import List, Optional, Dict, Any, Tuple

from src.game_logic.entities import CharacterInstance
from src.definitions.skill import SkillDefinition
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class BaseStrategy(ABC):
    """
    Abstrakte Basisklasse für alle KI-Strategien.
    
    Alle konkreten KI-Strategien müssen von dieser Klasse erben und
    die abstrakte Methode choose_action implementieren.
    """
    
    def __init__(self, character: CharacterInstance):
        """
        Initialisiert die Strategie für einen bestimmten Charakter.
        
        Args:
            character (CharacterInstance): Der Charakter, der diese Strategie verwendet
        """
        self.character = character
        self.name = self.__class__.__name__
    
    @abstractmethod
    def choose_action(self, allies: List[CharacterInstance], enemies: List[CharacterInstance], 
                      available_skills: Dict[str, SkillDefinition]) -> Tuple[Optional[SkillDefinition], 
                                                                            Optional[CharacterInstance], 
                                                                            List[CharacterInstance]]:
        """
        Wählt eine Aktion basierend auf der aktuellen Kampfsituation aus.
        
        Args:
            allies (List[CharacterInstance]): Liste der verbündeten Charaktere
            enemies (List[CharacterInstance]): Liste der feindlichen Charaktere
            available_skills (Dict[str, SkillDefinition]): Verfügbare Skills mit ihren Definitionen
            
        Returns:
            Tuple[Optional[SkillDefinition], Optional[CharacterInstance], List[CharacterInstance]]: 
            Der gewählte Skill, das Hauptziel und sekundäre Ziele (für Flächeneffekte)
        """
        pass
    
    def _get_valid_targets(self, characters: List[CharacterInstance]) -> List[CharacterInstance]:
        """
        Filtert die Liste der Charaktere nach gültigen Zielen.
        
        Args:
            characters (List[CharacterInstance]): Liste der zu filternden Charaktere
            
        Returns:
            List[CharacterInstance]: Liste der gültigen Ziele
        """
        return [char for char in characters if char.can_be_targeted()]
    
    def _get_weakest_target(self, targets: List[CharacterInstance]) -> Optional[CharacterInstance]:
        """
        Findet das schwächste Ziel (mit den wenigsten HP) in der Liste.
        
        Args:
            targets (List[CharacterInstance]): Liste der Ziele
            
        Returns:
            Optional[CharacterInstance]: Das schwächste Ziel oder None, wenn keine Ziele vorhanden sind
        """
        if not targets:
            return None
        
        return min(targets, key=lambda char: char.hp)
    
    def _get_strongest_target(self, targets: List[CharacterInstance]) -> Optional[CharacterInstance]:
        """
        Findet das stärkste Ziel (mit den meisten HP) in der Liste.
        
        Args:
            targets (List[CharacterInstance]): Liste der Ziele
            
        Returns:
            Optional[CharacterInstance]: Das stärkste Ziel oder None, wenn keine Ziele vorhanden sind
        """
        if not targets:
            return None
        
        return max(targets, key=lambda char: char.hp)
    
    def _get_lowest_health_percentage_target(self, targets: List[CharacterInstance]) -> Optional[CharacterInstance]:
        """
        Findet das Ziel mit dem niedrigsten HP-Prozentsatz.
        
        Args:
            targets (List[CharacterInstance]): Liste der Ziele
            
        Returns:
            Optional[CharacterInstance]: Das Ziel mit dem niedrigsten HP-Prozentsatz oder None, wenn keine Ziele vorhanden sind
        """
        if not targets:
            return None
        
        return min(targets, key=lambda char: char.hp / char.get_max_hp())
    
    def _get_random_target(self, targets: List[CharacterInstance]) -> Optional[CharacterInstance]:
        """
        Wählt ein zufälliges Ziel aus der Liste aus.
        
        Args:
            targets (List[CharacterInstance]): Liste der Ziele
            
        Returns:
            Optional[CharacterInstance]: Ein zufälliges Ziel oder None, wenn keine Ziele vorhanden sind
        """
        import random
        if not targets:
            return None
        
        return random.choice(targets)
    
    def _filter_targets_by_tag(self, targets: List[CharacterInstance], tag: str) -> List[CharacterInstance]:
        """
        Filtert die Liste der Ziele nach einem bestimmten Tag.
        
        Args:
            targets (List[CharacterInstance]): Liste der Ziele
            tag (str): Der zu filternde Tag
            
        Returns:
            List[CharacterInstance]: Liste der Ziele mit dem angegebenen Tag
        """
        return [char for char in targets if char.has_tag(tag)]
    
    def _can_use_skill(self, skill: SkillDefinition) -> bool:
        """
        Prüft, ob der Charakter einen bestimmten Skill verwenden kann.
        
        Args:
            skill (SkillDefinition): Der zu prüfende Skill
            
        Returns:
            bool: True, wenn der Skill verwendet werden kann, sonst False
        """
        return self.character.has_enough_resource(skill)


===== /workspaces/python-rpg-projekt/src/utils/__init__.py =====
"""
Utils Paket

Enthält Hilfsmodule und -funktionen für das gesamte Projekt.
"""


===== /workspaces/python-rpg-projekt/src/utils/test_config_logging.py =====
"""
Einfache Test-Datei, um das Konfiguration- und Logging-Setup zu überprüfen.
"""
import sys
import os

# Stellen sicher, dass src im Python-Pfad ist
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))

from src.utils.logging_setup import get_logger
from src.config.config import get_config
from src.definitions import loader


def main():
    # Logger holen
    logger = get_logger("test_script")
    logger.info("Test des Konfiguration- und Logging-Setups")
    
    # Konfiguration testen
    config = get_config()
    logger.info(f"Geladene Spieleinstellungen: {config.game_settings}")
    
    # Pfade zu den JSON5-Dateien
    base_path = os.path.dirname(os.path.dirname(__file__))
    characters_path = os.path.join(base_path, "definitions", "json_data", "characters.json5")
    skills_path = os.path.join(base_path, "definitions", "json_data", "skills.json5")
    opponents_path = os.path.join(base_path, "definitions", "json_data", "opponents.json5")
    
    # Laden der JSON5-Dateien testen
    try:
        logger.info("Versuche characters.json5 zu laden...")
        characters = loader.load_characters(characters_path)
        logger.info(f"Erfolgreich {len(characters)} Charaktere geladen!")
        
        logger.info("Versuche skills.json5 zu laden...")
        skills = loader.load_skills(skills_path)
        logger.info(f"Erfolgreich {len(skills)} Skills geladen!")
        
        logger.info("Versuche opponents.json5 zu laden...")
        opponents = loader.load_opponents(opponents_path)
        logger.info(f"Erfolgreich {len(opponents)} Gegner geladen!")
        
        # Ein paar Details ausgeben
        logger.info("\n--- Charakter-Details ---")
        for char_id, char in characters.items():
            logger.info(f"Charakter: {char.name} (ID: {char_id})")
            logger.info(f"  STR: {char.get_attribute('STR')}, DEX: {char.get_attribute('DEX')}")
            logger.info(f"  Skills: {char.skills}")
        
        logger.info("\n--- Skill-Details ---")
        for skill_id, skill in skills.items():
            logger.info(f"Skill: {skill.name} (ID: {skill_id})")
            logger.info(f"  Kosten: {skill.get_cost_value()} {skill.get_cost_type()}")
            
        logger.info("\n--- Gegner-Details ---")
        for opp_id, opp in opponents.items():
            logger.info(f"Gegner: {opp.name} (ID: {opp_id})")
            logger.info(f"  Level: {opp.level}, XP: {opp.xp_reward}")
            logger.info(f"  KI-Strategie: {opp.ai_strategy}")
        
        logger.info("\nAlle Tests erfolgreich!")
        
    except Exception as e:
        logger.exception(f"Test fehlgeschlagen: {str(e)}")


if __name__ == "__main__":
    main()


===== /workspaces/python-rpg-projekt/src/utils/logging_setup.py =====
"""
Logging-Setup

Konfiguriert das Logging-System für das gesamte Projekt.
"""
import os
import logging
from logging.handlers import RotatingFileHandler
from typing import Optional

from src.config.config import get_config


def setup_logging(logger_name: str = None) -> logging.Logger:
    """
    Richtet das Logging-System ein und gibt einen Logger zurück.
    
    Args:
        logger_name (str, optional): Der Name des Loggers (Standardmäßig der Stammlogger)
        
    Returns:
        logging.Logger: Der konfigurierte Logger
    """
    config = get_config()
    log_config = config.logging
    
    # Standardwerte, falls nicht in der Konfiguration vorhanden
    log_level = getattr(logging, log_config.get('level', 'INFO'))
    file_level = getattr(logging, log_config.get('file_level', 'DEBUG'))
    console_level = getattr(logging, log_config.get('console_level', 'INFO'))
    log_format = log_config.get('format', '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    date_format = log_config.get('date_format', '%Y-%m-%d %H:%M:%S')
    log_dir = log_config.get('log_dir', 'logs')
    log_file = log_config.get('log_file', 'rpg.log')
    
    # Logger erstellen oder abrufen
    logger = logging.getLogger(logger_name)
    
    # Nur konfigurieren, wenn noch keine Handler vorhanden sind
    if not logger.handlers:
        logger.setLevel(log_level)
        formatter = logging.Formatter(log_format, date_format)
        
        # Konsolen-Handler
        console_handler = logging.StreamHandler()
        console_handler.setLevel(console_level)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # Datei-Handler (mit Rotation)
        try:
            # Verzeichnis erstellen, falls es nicht existiert
            os.makedirs(log_dir, exist_ok=True)
            log_path = os.path.join(log_dir, log_file)
            
            # Rotierender Datei-Handler (maximal 5MB pro Datei, maximal 5 Backup-Dateien)
            file_handler = RotatingFileHandler(
                log_path, maxBytes=5*1024*1024, backupCount=5, encoding='utf-8'
            )
            file_handler.setLevel(file_level)
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
        except Exception as e:
            # Wenn das Schreiben in die Logdatei fehlschlägt, loggen wir den Fehler in die Konsole
            logger.error(f"Konnte Logdatei nicht einrichten: {str(e)}")
    
    return logger


def get_logger(module_name: Optional[str] = None) -> logging.Logger:
    """
    Gibt einen für das Modul konfigurierten Logger zurück.
    
    Args:
        module_name (Optional[str]): Der Name des Moduls (standardmäßig __name__)
        
    Returns:
        logging.Logger: Der konfigurierte Logger für das Modul
    """
    logger_name = module_name if module_name else 'rpg'
    return setup_logging(logger_name)


===== /workspaces/python-rpg-projekt/src/config/__init__.py =====
"""
Config Paket

Enthält die zentrale Konfiguration des Spiels.
"""


===== /workspaces/python-rpg-projekt/src/config/config.py =====
"""
Zentrale Konfiguration

Lädt die Konfigurationsdaten aus settings.json5 und stellt sie zur Verfügung.
"""
import os
import json5
from typing import Dict, Any

# Standardwerte für den Fall, dass einige Einstellungen in der Datei fehlen
DEFAULT_CONFIG = {
    "game_settings": {
        "min_damage": 1,
        "base_weapon_damage": 5,
        "hit_chance_base": 90,
        "hit_chance_accuracy_factor": 3,
        "hit_chance_evasion_factor": 2,
        "hit_chance_min": 5,
        "hit_chance_max": 95,
        "xp_level_base": 100,
        "xp_level_factor": 1.5,
    },
    "logging": {
        "level": "INFO",
        "file_level": "DEBUG",
        "console_level": "INFO",
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        "date_format": "%Y-%m-%d %H:%M:%S",
        "log_dir": "logs",
        "log_file": "rpg.log",
    },
    "rl": {
        "train": {
            "total_timesteps": 100000,
            "log_interval": 100,
            "n_eval_episodes": 10,
            "eval_interval": 1000,
        },
        "env": {
            "max_steps": 100,
            "reward_win": 100,
            "reward_lose": -100,
            "reward_damage_dealt_factor": 0.1,
            "reward_damage_taken_factor": -0.1,
        },
    },
}


class Config:
    """
    Zentrale Konfigurationsklasse, die Einstellungen aus settings.json5 lädt.
    """
    _instance = None
    _config = {}
    
    def __new__(cls):
        """
        Singleton-Pattern: Stellt sicher, dass nur eine Instanz existiert.
        """
        if cls._instance is None:
            cls._instance = super(Config, cls).__new__(cls)
            cls._instance._load_config()
        return cls._instance
    
    def _load_config(self):
        """
        Lädt die Konfigurationsdaten aus der settings.json5-Datei.
        Wenn die Datei nicht existiert oder fehlerhaft ist, werden Standardwerte verwendet.
        """
        settings_path = os.path.join(os.path.dirname(__file__), 'settings.json5')
        try:
            if os.path.exists(settings_path):
                with open(settings_path, 'r', encoding='utf-8') as file:
                    self._config = json5.load(file)
            else:
                print(f"WARNUNG: Konfigurationsdatei {settings_path} nicht gefunden. Verwende Standardwerte.")
                self._config = DEFAULT_CONFIG.copy()
        except Exception as e:
            print(f"FEHLER beim Laden der Konfiguration: {str(e)}. Verwende Standardwerte.")
            self._config = DEFAULT_CONFIG.copy()
    
    def get(self, section: str, key: str = None, default: Any = None) -> Any:
        """
        Gibt einen Konfigurationswert zurück.
        
        Args:
            section (str): Der Abschnitt der Konfiguration (z.B. 'game_settings')
            key (str, optional): Der Schlüssel innerhalb des Abschnitts
            default (Any, optional): Der Standardwert, wenn der Wert nicht gefunden wird
            
        Returns:
            Any: Der Konfigurationswert oder der Standardwert
        """
        if section not in self._config:
            if section in DEFAULT_CONFIG:
                return DEFAULT_CONFIG[section] if key is None else DEFAULT_CONFIG[section].get(key, default)
            return default
        
        if key is None:
            return self._config[section]
        
        if key in self._config[section]:
            return self._config[section][key]
        
        if section in DEFAULT_CONFIG and key in DEFAULT_CONFIG[section]:
            return DEFAULT_CONFIG[section][key]
        
        return default
    
    @property
    def game_settings(self) -> Dict[str, Any]:
        """Gibt die Spieleinstellungen zurück."""
        return self.get('game_settings', default={})
    
    @property
    def logging(self) -> Dict[str, Any]:
        """Gibt die Logging-Einstellungen zurück."""
        return self.get('logging', default={})
    
    @property
    def rl(self) -> Dict[str, Any]:
        """Gibt die RL-Einstellungen zurück."""
        return self.get('rl', default={})
    
    def reload(self):
        """
        Lädt die Konfiguration neu.
        Nützlich, wenn die Konfigurationsdatei während der Laufzeit geändert wurde.
        """
        self._load_config()


# Globale Konfigurationsinstanz
config = Config()


def get_config() -> Config:
    """
    Gibt die globale Konfigurationsinstanz zurück.
    
    Returns:
        Config: Die globale Konfigurationsinstanz
    """
    return config


===== /workspaces/python-rpg-projekt/src/config/settings.json5 =====
{
  // Konfigurationen für verschiedene Teile des Spiels
  "game_settings": {
    "min_damage": 1,
    "base_weapon_damage": 5,
    
    // Trefferchance-Konfiguration
    "hit_chance_base": 90,       // Basis-Trefferchance in Prozent
    "hit_chance_accuracy_factor": 3,  // Multiplikator für Genauigkeitsbonus
    "hit_chance_evasion_factor": 2,   // Multiplikator für Ausweichbonus
    "hit_chance_min": 5,         // Minimale Trefferchance in Prozent
    "hit_chance_max": 95,        // Maximale Trefferchance in Prozent
    
    // XP und Level-Konfiguration
    "xp_level_base": 100,        // Basis-XP für Level 2
    "xp_level_factor": 1.5,      // Exponentielle Zunahme der XP pro Level
    
    // Ressourcenregeneration pro Runde
    "resource_regen_percent": 5  // 5% der maximal verfügbaren Ressource wird pro Runde regeneriert
  },
  
  // Logging-Konfiguration
  "logging": {
    "level": "INFO",           // Log-Level: DEBUG, INFO, WARNING, ERROR, CRITICAL
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "date_format": "%Y-%m-%d %H:%M:%S",
    "file": "game.log"         // Pfad zur Log-Datei
  },
  
  // Reinforcement Learning (RL) Konfiguration
  "rl_settings": {
    "observation_space": {
      "include_allies": true,   // Verbündete in Beobachtungen einbeziehen
      "include_enemies": true,  // Gegner in Beobachtungen einbeziehen
      "max_allies": 4,          // Maximale Anzahl an Verbündeten in der Beobachtung
      "max_enemies": 6          // Maximale Anzahl an Gegnern in der Beobachtung
    },
    "reward_settings": {
      "victory_reward": 100.0,  // Belohnung für einen Sieg
      "defeat_penalty": -50.0,  // Strafe für eine Niederlage
      "damage_dealt_factor": 0.1, // Multiplikator für verursachten Schaden
      "damage_taken_factor": -0.1, // Multiplikator für erlittenen Schaden
      "healing_factor": 0.2,    // Multiplikator für durchgeführte Heilung
      "self_damage_factor": -0.5, // Multiplikator für selbst zugefügten Schaden
      "time_penalty": -0.1      // Zeitstrafe pro Runde (um schnelle Lösungen zu fördern)
    },
    "training": {
      "learning_rate": 0.0003,  // Lernrate für den RL-Algorithmus
      "batch_size": 64,         // Batch-Größe für Training
      "buffer_size": 100000,    // Größe des Replay-Puffers
      "exploration_fraction": 0.1, // Anteil der Gesamtschritte für Exploration-Verringerung
      "exploration_initial": 1.0, // Anfangswert für Explorations-Epsilon
      "exploration_final": 0.05, // Endwert für Explorations-Epsilon
      "gamma": 0.99            // Discount-Faktor für zukünftige Belohnungen
    }
  }
}


===== /workspaces/python-rpg-projekt/src/ui/cli_main_loop.py =====
"""
CLI-Hauptschleife

Implementiert die Hauptschleife für die automatische Simulation.
"""
import time
import random
from typing import List, Dict, Any, Optional, Tuple

from src.definitions import loader
from src.game_logic.entities import CharacterInstance
from src.game_logic.combat import CombatEncounter
from src.game_logic.leveling import get_leveling_service
from src.ai.ai_dispatcher import get_ai_dispatcher
from src.ui.cli_output import get_cli_output
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class CLISimulation:
    """
    Verwaltet die automatische Simulation im CLI-Modus.
    """
    
    def __init__(self, characters_path: str, skills_path: str, opponents_path: str):
        """
        Initialisiert die Simulation.
        
        Args:
            characters_path (str): Pfad zur characters.json5-Datei
            skills_path (str): Pfad zur skills.json5-Datei
            opponents_path (str): Pfad zur opponents.json5-Datei
        """
        self.characters_path = characters_path
        self.skills_path = skills_path
        self.opponents_path = opponents_path
        
        self.cli_output = get_cli_output()
        self.leveling_service = get_leveling_service()
        self.ai_dispatcher = get_ai_dispatcher()
        
        # Daten laden
        self.character_templates = loader.load_characters(characters_path)
        self.skill_definitions = loader.load_skills(skills_path)
        self.opponent_templates = loader.load_opponents(opponents_path)
        
        # Aktive Spieler und Gegner
        self.players: List[CharacterInstance] = []
        self.current_encounter: Optional[CombatEncounter] = None
    
    def start_simulation(self, num_players: int = 1, num_encounters: int = 3) -> None:
        """
        Startet die Simulation.
        
        Args:
            num_players (int): Anzahl der Spielercharaktere
            num_encounters (int): Anzahl der zu simulierenden Begegnungen
        """
        self.cli_output.clear_screen()
        self.cli_output.print_header("RPG Simulation gestartet")
        
        # Spielercharaktere erstellen
        self._create_player_characters(num_players)
        
        # Mehrere Begegnungen simulieren
        for i in range(num_encounters):
            self.cli_output.print_header(f"Begegnung {i+1}/{num_encounters}")
            
            # Zufällige Gegner generieren
            opponents = self._generate_random_opponents()
            
            # Kampf starten
            self._run_combat_encounter(opponents)
            
            # Kurze Pause zwischen Begegnungen
            if i < num_encounters - 1:
                self.cli_output.print_message("\nNächste Begegnung wird vorbereitet...\n")
                self.cli_output.wait(2.0)
        
        self.cli_output.print_header("Simulation beendet")
        self._show_final_stats()
    
    def _create_player_characters(self, num_players: int) -> None:
        """
        Erstellt die Spielercharaktere.
        
        Args:
            num_players (int): Anzahl der zu erstellenden Charaktere
        """
        self.cli_output.print_subheader("Charaktererstellung")
        
        self.players = []
        available_templates = list(self.character_templates.values())
        
        for i in range(num_players):
            # Template zufällig auswählen (oder alle verwenden, wenn genug vorhanden sind)
            if i < len(available_templates):
                template = available_templates[i]
            else:
                template = random.choice(available_templates)
            
            # Charakter erstellen
            player = CharacterInstance.from_template(template)
            self.players.append(player)
            
            self.cli_output.print_message(f"Spieler {i+1}: {player.name} erstellt (Klasse: {template.id})")
        
        # Detaillierte Statistiken anzeigen
        for player in self.players:
            self.cli_output.print_character_stats(player, detailed=True)
    
    def _generate_random_opponents(self, min_opponents: int = 1, max_opponents: int = 3) -> List[CharacterInstance]:
        """
        Generiert zufällige Gegner für eine Begegnung.
        
        Args:
            min_opponents (int): Minimale Anzahl an Gegnern
            max_opponents (int): Maximale Anzahl an Gegnern
            
        Returns:
            List[CharacterInstance]: Die generierten Gegner
        """
        self.cli_output.print_subheader("Gegner erscheinen!")
        
        # Anzahl der Gegner bestimmen (basierend auf Spieleranzahl)
        player_count = len(self.players)
        num_opponents = random.randint(min_opponents, min(max_opponents, player_count + 1))
        
        # Durchschnittslevel der Spieler berechnen
        avg_player_level = sum(p.level for p in self.players) // player_count
        
        # Gegner generieren
        opponents = []
        available_templates = list(self.opponent_templates.values())
        
        for i in range(num_opponents):
            # Zufälliges Template auswählen
            template = random.choice(available_templates)
            
            # Gegner-Level bestimmen (nahe am Spieler-Level)
            level_variance = random.randint(-1, 1)  # -1, 0 oder 1
            opponent_level = max(1, avg_player_level + level_variance)
            
            # Gegner erstellen
            opponent = CharacterInstance.from_template(template, level=opponent_level)
            opponents.append(opponent)
            
            self.cli_output.print_message(f"Gegner erscheint: {opponent.name} (Level {opponent_level})")
        
        # Kurze Pause nach der Gegnergenerierung
        self.cli_output.wait(1.0)
        
        return opponents
    
    def _run_combat_encounter(self, opponents: List[CharacterInstance]) -> None:
        """
        Führt einen Kampf zwischen Spielern und Gegnern durch.
        
        Args:
            opponents (List[CharacterInstance]): Die Gegner
        """
        # Kampf initialisieren
        self.current_encounter = CombatEncounter(self.players, opponents)
        self.current_encounter.start_combat()
        
        # Status vor dem Kampf anzeigen
        self.cli_output.print_combat_summary(self.players, opponents)
        self.cli_output.wait(1.0)
        
        # Kampfschleife
        while self.current_encounter.is_active:
            # Nächste Runde vorbereiten, wenn die Zugreihenfolge leer ist
            if not self.current_encounter.turn_order:
                self.current_encounter.next_round()
                self.cli_output.print_message(f"\nRunde {self.current_encounter.round} beginnt!")
                self.cli_output.print_combat_summary(self.players, opponents)
            
            # Nächsten Charakter in der Zugreihenfolge holen
            if not self.current_encounter.turn_order:
                logger.error("Fehler: Keine Charaktere in der Zugreihenfolge!")
                break
                
            current_character = self.current_encounter.turn_order.pop(0)
            
            # Prüfen, ob der Charakter noch lebt und handeln kann
            if not current_character.is_alive() or not current_character.can_act():
                continue
            
            # Charakter am Zug anzeigen
            is_player = current_character in self.players
            self.cli_output.print_message(f"\n{current_character.name} ist am Zug!")
            
            # Aktion auswählen und ausführen
            self._perform_character_action(current_character, is_player)
            
            # Prüfen, ob der Kampf beendet ist
            if self.current_encounter.check_combat_end():
                break
        
        # Kampfergebnis anzeigen
        self._show_combat_results()
    
    def _perform_character_action(self, character: CharacterInstance, is_player: bool) -> None:
        """
        Führt die Aktion eines Charakters aus.
        
        Args:
            character (CharacterInstance): Der handelnde Charakter
            is_player (bool): True, wenn es ein Spielercharakter ist, False für Gegner
        """
        # Verfügbare Skills für den Charakter laden
        available_skills = {skill_id: self.skill_definitions.get(skill_id) 
                           for skill_id in character.skill_ids 
                           if skill_id in self.skill_definitions}
        
        # Verbündete und Feinde bestimmen
        allies = self.players if is_player else self.current_encounter.opponents
        enemies = self.current_encounter.opponents if is_player else self.players
        
        # KI-Entscheidung für den nächsten Zug
        skill, primary_target, secondary_targets = self.ai_dispatcher.choose_action(
            character, allies, enemies, available_skills
        )
        
        if not skill or not primary_target:
            self.cli_output.print_message(f"{character.name} kann keine Aktion ausführen!")
            return
        
        # Kampfaktion erstellen und ausführen
        from src.game_logic.combat import CombatAction, get_combat_system
        combat_system = get_combat_system()
        
        action = CombatAction(character, skill, primary_target, secondary_targets)
        result = combat_system.execute_action(action)
        
        # Ergebnis anzeigen
        is_self_effect = skill.is_self_effect()
        is_healing = 'base_healing' in skill.effects
        
        # Aktionsausgabe
        action_desc = f"{character.name} verwendet {skill.name}"
        target_desc = f"auf {primary_target.name}"
        
        if is_self_effect and character == primary_target:
            target_desc = "auf sich selbst"
        
        self.cli_output.print_message(f"{action_desc} {target_desc}")
        
        # Trefferausgabe
        for target in result.hits:
            if target in result.damage_dealt:
                damage = result.damage_dealt[target]
                self.cli_output.print_message(f"  • Trifft {target.name} für {damage} Schaden")
                if not target.is_alive():
                    self.cli_output.print_message(f"  • {target.name} wurde besiegt!")
            
            if target in result.healing_done:
                healing = result.healing_done[target]
                self.cli_output.print_message(f"  • Heilt {target.name} um {healing} HP")
            
            if target in result.effects_applied:
                effects = result.effects_applied[target]
                self.cli_output.print_message(f"  • Wendet Effekt(e) an: {', '.join(effects)}")
        
        for target in result.misses:
            self.cli_output.print_message(f"  • Verfehlt {target.name}")
        
        # Status nach der Aktion anzeigen
        self.cli_output.wait(0.5)
    
    def _show_combat_results(self) -> None:
        """Zeigt die Ergebnisse des aktuellen Kampfes an."""
        if not self.current_encounter:
            return
        
        self.cli_output.print_subheader("Kampfergebnis")
        
        if self.current_encounter.winner == 'players':
            self.cli_output.print_message("Die Spieler haben gesiegt!")
            
            # XP vergeben
            self.current_encounter.award_xp_for_victory(self.leveling_service)
            
            # Status der überlebenden Spieler anzeigen
            for player in self.players:
                if player.is_alive():
                    self.cli_output.print_character_stats(player, detailed=True)
                    
                    # XP-Fortschritt anzeigen
                    next_level_xp = self.leveling_service.get_xp_for_next_level(player)
                    progress = self.leveling_service.get_xp_progress_percentage(player)
                    self.cli_output.print_message(
                        f"XP: {player.xp}/{next_level_xp} ({progress:.1f}% zum nächsten Level)"
                    )
        
        elif self.current_encounter.winner == 'opponents':
            self.cli_output.print_message("Die Gegner haben gesiegt! GAME OVER")
            # In einer echten Implementierung würde hier das Spiel beendet oder neu gestartet
        
        else:
            self.cli_output.print_message("Der Kampf endete unentschieden.")
    
    def _show_final_stats(self) -> None:
        """Zeigt die Endstatistiken der Spieler an."""
        self.cli_output.print_subheader("Endstatistiken")
        
        for i, player in enumerate(self.players):
            self.cli_output.print_message(f"Spieler {i+1}: {player.name} (Level {player.level})")
            self.cli_output.print_character_stats(player, detailed=True)
            
            if player.is_alive():
                next_level_xp = self.leveling_service.get_xp_for_next_level(player)
                progress = self.leveling_service.get_xp_progress_percentage(player)
                self.cli_output.print_message(
                    f"XP: {player.xp}/{next_level_xp} ({progress:.1f}% zum nächsten Level)"
                )
            else:
                self.cli_output.print_message("Status: Gefallen im Kampf")


def run_simulation(characters_path: str, skills_path: str, opponents_path: str) -> None:
    """
    Führt die CLI-Simulation durch.
    
    Args:
        characters_path (str): Pfad zur characters.json5-Datei
        skills_path (str): Pfad zur skills.json5-Datei
        opponents_path (str): Pfad zur opponents.json5-Datei
    """
    simulation = CLISimulation(characters_path, skills_path, opponents_path)
    
    # Standardwerte für die Simulation
    num_players = 2
    num_encounters = 3
    
    simulation.start_simulation(num_players, num_encounters)


===== /workspaces/python-rpg-projekt/src/ui/__init__.py =====
"""
UI Paket

Enthält Komponenten für die Benutzeroberfläche und Simulation.
"""


===== /workspaces/python-rpg-projekt/src/ui/cli_output.py =====
"""
CLI-Ausgabehelfer

Enthält Funktionen für formatierte Ausgaben in der Konsole.
"""
import time
import os
from typing import List, Dict, Any, Optional

from src.game_logic.entities import CharacterInstance
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class CLIOutput:
    """
    Klasse für formatierte Konsolenausgaben.
    """
    
    def __init__(self, verbose: bool = True, delay: float = 0.5):
        """
        Initialisiert den CLI-Output-Handler.
        
        Args:
            verbose (bool): Wenn True, werden detaillierte Ausgaben angezeigt
            delay (float): Verzögerung in Sekunden zwischen Ausgaben
        """
        self.verbose = verbose
        self.delay = delay
    
    def clear_screen(self) -> None:
        """Löscht den Bildschirm."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def wait(self, seconds: Optional[float] = None) -> None:
        """
        Wartet für die angegebene Zeit.
        
        Args:
            seconds (Optional[float]): Die Wartezeit in Sekunden (Standard: self.delay)
        """
        if seconds is None:
            seconds = self.delay
        
        if seconds > 0:
            time.sleep(seconds)
    
    def print_header(self, text: str) -> None:
        """
        Gibt einen hervorgehobenen Überschriftentext aus.
        
        Args:
            text (str): Der anzuzeigende Text
        """
        print("\n" + "=" * 60)
        print(f" {text.upper()} ")
        print("=" * 60 + "\n")
        self.wait(self.delay / 2)
    
    def print_subheader(self, text: str) -> None:
        """
        Gibt einen hervorgehobenen Unterüberschriftentext aus.
        
        Args:
            text (str): Der anzuzeigende Text
        """
        print("\n" + "-" * 50)
        print(f" {text} ")
        print("-" * 50 + "\n")
        self.wait(self.delay / 3)
    
    def print_message(self, message: str) -> None:
        """
        Gibt eine einfache Nachricht aus.
        
        Args:
            message (str): Die anzuzeigende Nachricht
        """
        print(message)
        self.wait(self.delay / 2)
    
    def print_combat_action(self, actor_name: str, action_name: str, target_name: str, result: str) -> None:
        """
        Gibt eine formatierte Kampfaktion aus.
        
        Args:
            actor_name (str): Name des Akteurs
            action_name (str): Name der Aktion
            target_name (str): Name des Ziels
            result (str): Ergebnis der Aktion
        """
        print(f"[AKTION] {actor_name} verwendet {action_name} gegen {target_name}: {result}")
        self.wait()
    
    def print_character_stats(self, character: CharacterInstance, detailed: bool = False) -> None:
        """
        Gibt die Statistiken eines Charakters aus.
        
        Args:
            character (CharacterInstance): Der Charakter
            detailed (bool): Wenn True, werden detaillierte Statistiken angezeigt
        """
        health_percent = round((character.hp / character.get_max_hp()) * 100)
        health_bar = self._generate_bar(health_percent, 20)
        
        print(f"{character.name} (Level {character.level}):")
        print(f"HP: {character.hp}/{character.get_max_hp()} {health_bar} ({health_percent}%)")
        
        # Ressourcen anzeigen, falls vorhanden
        if character.mana > 0:
            print(f"Mana: {character.mana}/{character.base_combat_values.get('base_mana', 0)}")
        if character.stamina > 0:
            print(f"Ausdauer: {character.stamina}/{character.base_combat_values.get('base_stamina', 0)}")
        if character.energy > 0:
            print(f"Energie: {character.energy}/{character.base_combat_values.get('base_energy', 0)}")
        
        # Status-Effekte anzeigen
        if character.active_effects:
            effect_names = [f"{effect_id} ({effect.duration}R)" for effect_id, effect in character.active_effects.items()]
            print(f"Effekte: {', '.join(effect_names)}")
        
        # Detaillierte Statistiken
        if detailed and self.verbose:
            print(f"ATT: STR {character.get_attribute('STR')}, "
                  f"DEX {character.get_attribute('DEX')}, "
                  f"INT {character.get_attribute('INT')}, "
                  f"CON {character.get_attribute('CON')}, "
                  f"WIS {character.get_attribute('WIS')}")
            print(f"DEF: Rüstung {character.get_combat_value('armor')}, "
                  f"Magieresistenz {character.get_combat_value('magic_resist')}")
            print(f"Genauigkeit: {character.get_accuracy()}, Ausweichen: {character.get_evasion()}")
        
        if self.verbose:
            self.wait(self.delay / 4)
    
    def print_combat_summary(self, players: List[CharacterInstance], opponents: List[CharacterInstance]) -> None:
        """
        Gibt eine Zusammenfassung des aktuellen Kampfzustands aus.
        
        Args:
            players (List[CharacterInstance]): Die Spielercharaktere
            opponents (List[CharacterInstance]): Die Gegner
        """
        self.print_subheader("KAMPFÜBERSICHT")
        
        print("SPIELER:")
        for player in players:
            self.print_character_stats(player)
        
        print("\nGEGNER:")
        for opponent in opponents:
            self.print_character_stats(opponent)
        
        print("")  # Leerzeile zur besseren Lesbarkeit
    
    def _generate_bar(self, percent: int, length: int = 20) -> str:
        """
        Generiert einen grafischen Fortschrittsbalken.
        
        Args:
            percent (int): Der Prozentsatz (0-100)
            length (int): Die Länge des Balkens
            
        Returns:
            str: Der grafische Balken
        """
        fill_count = int(percent / 100 * length)
        empty_count = length - fill_count
        
        if percent >= 60:
            color = '\033[92m'  # Grün
        elif percent >= 25:
            color = '\033[93m'  # Gelb
        else:
            color = '\033[91m'  # Rot
        
        reset = '\033[0m'
        
        return f"{color}[{'=' * fill_count}{' ' * empty_count}]{reset}"


# Globaler CLIOutput-Handler
cli_output = CLIOutput()


def get_cli_output() -> CLIOutput:
    """
    Gibt den globalen CLIOutput-Handler zurück.
    
    Returns:
        CLIOutput: Der globale Handler
    """
    return cli_output


===== /workspaces/python-rpg-projekt/src/game_logic/combat.py =====
"""
Kampfsystem

Enthält Klassen und Funktionen für die Abwicklung von Kampfaktionen.
"""
import random
from typing import Dict, List, Any, Optional, Tuple, Union, Set

from src.definitions.skill import SkillDefinition
from src.game_logic.entities import CharacterInstance
from src.game_logic.formulas import calculate_damage, calculate_hit_chance, calculate_damage_reduction
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class CombatAction:
    """
    Repräsentiert eine Kampfaktion (z.B. einen Angriff oder eine Fertigkeit).
    """
    def __init__(self, 
                 actor: CharacterInstance, 
                 skill: SkillDefinition,
                 primary_target: Optional[CharacterInstance] = None,
                 secondary_targets: Optional[List[CharacterInstance]] = None):
        """
        Initialisiert eine Kampfaktion.
        
        Args:
            actor (CharacterInstance): Der Ausführende der Aktion
            skill (SkillDefinition): Der verwendete Skill
            primary_target (Optional[CharacterInstance]): Das Hauptziel
            secondary_targets (Optional[List[CharacterInstance]]): Sekundäre Ziele (für Flächeneffekte)
        """
        self.actor = actor
        self.skill = skill
        self.primary_target = primary_target
        self.secondary_targets = secondary_targets or []
    
    def is_valid(self) -> bool:
        """
        Prüft, ob die Aktion gültig ist.
        
        Returns:
            bool: True, wenn die Aktion gültig ist, sonst False
        """
        # Prüfen, ob der Akteur handeln kann
        if not self.actor.can_act():
            logger.debug(f"{self.actor.name} kann nicht handeln")
            return False
        
        # Prüfen, ob der Akteur genug Ressourcen hat
        if not self.actor.has_enough_resource(self.skill):
            logger.debug(f"{self.actor.name} hat nicht genug Ressourcen für {self.skill.name}")
            return False
        
        # Prüfen, ob das Hauptziel gültig ist (falls erforderlich)
        if not self.skill.is_self_effect() and self.primary_target is None:
            logger.debug(f"Kein Ziel für Nicht-Selbsteffekt {self.skill.name}")
            return False
        
        # Prüfen, ob das Hauptziel als Ziel ausgewählt werden kann
        if self.primary_target and not self.primary_target.can_be_targeted():
            logger.debug(f"{self.primary_target.name} kann nicht als Ziel ausgewählt werden")
            return False
        
        return True


class CombatResult:
    """
    Enthält die Ergebnisse einer Kampfaktion.
    """
    def __init__(self):
        """Initialisiert ein leeres Ergebnis."""
        self.hits: List[CharacterInstance] = []
        self.misses: List[CharacterInstance] = []
        self.damage_dealt: Dict[CharacterInstance, int] = {}
        self.healing_done: Dict[CharacterInstance, int] = {}
        self.effects_applied: Dict[CharacterInstance, List[str]] = {}
        self.deaths: List[CharacterInstance] = []
        self.resources_spent: Dict[str, int] = {}


class CombatSystem:
    """
    Verwaltet die Kampflogik und -aktionen.
    """
    def __init__(self):
        """Initialisiert das Kampfsystem."""
        pass
    
    def execute_action(self, action: CombatAction) -> CombatResult:
        """
        Führt eine Kampfaktion aus.
        
        Args:
            action (CombatAction): Die auszuführende Aktion
            
        Returns:
            CombatResult: Das Ergebnis der Aktion
        """
        result = CombatResult()
        
        # Prüfen, ob die Aktion gültig ist
        if not action.is_valid():
            logger.warning(f"Ungültige Kampfaktion: {action.skill.name} von {action.actor.name}")
            return result
        
        # Ressourcen verbrauchen
        cost_value = action.skill.get_cost_value()
        cost_type = action.skill.get_cost_type()
        
        success = action.actor.spend_resource(action.skill)
        if not success:
            logger.warning(f"{action.actor.name} konnte die Ressourcen für {action.skill.name} nicht aufbringen")
            return result
        
        result.resources_spent[cost_type] = cost_value
        
        # Selbst-Effekt prüfen
        if action.skill.is_self_effect():
            self._apply_self_effect(action, result)
        else:
            # Für Angriffe oder Zauber auf andere
            self._apply_combat_effect(action, result)
        
        return result
    
    def _apply_self_effect(self, action: CombatAction, result: CombatResult) -> None:
        """
        Wendet einen Selbst-Effekt an.
        
        Args:
            action (CombatAction): Die Kampfaktion
            result (CombatResult): Das zu aktualisierende Ergebnis
        """
        # Status-Effekte auf den Akteur anwenden
        applied_effects = []
        for effect in action.skill.applies_effects:
            action.actor.apply_status_effect(effect.id, effect.duration, effect.potency)
            applied_effects.append(effect.id)
        
        if applied_effects:
            result.effects_applied[action.actor] = applied_effects
            logger.debug(f"{action.actor.name} wendet Selbsteffekt(e) an: {', '.join(applied_effects)}")
        
        # Heilung prüfen
        if 'base_healing' in action.skill.effects:
            base_healing = action.skill.effects['base_healing']
            scaling_attr = action.skill.effects.get('scaling_attribute', 'WIS')
            multiplier = action.skill.effects.get('healing_multiplier', 1.0)
            
            attr_value = action.actor.get_attribute(scaling_attr)
            healing = calculate_damage(base_healing, attr_value, multiplier)  # Wir verwenden die Schadensformel für Heilung
            
            actual_healing = action.actor.heal(healing)
            result.healing_done[action.actor] = actual_healing
            logger.info(f"{action.actor.name} heilt sich selbst um {actual_healing} HP")
    
    def _apply_combat_effect(self, action: CombatAction, result: CombatResult) -> None:
        """
        Wendet einen Kampfeffekt (Schaden, Status) auf ein Ziel an.
        
        Args:
            action (CombatAction): Die Kampfaktion
            result (CombatResult): Das zu aktualisierende Ergebnis
        """
        # Ziele festlegen
        targets = [action.primary_target]
        
        # Bei Flächeneffekten die sekundären Ziele hinzufügen
        if action.skill.is_area_effect() and action.secondary_targets:
            targets.extend(action.secondary_targets)
        
        # Für jedes Ziel die Effekte anwenden
        for target in targets:
            if not target.can_be_targeted():
                continue
            
            # Heilung prüfen
            if 'base_healing' in action.skill.effects:
                self._apply_healing(action, target, result)
                continue
            
            # Trefferchance berechnen
            hit_chance = calculate_hit_chance(action.actor.get_accuracy(), target.get_evasion())
            roll = random.randint(1, 100)
            
            if roll <= hit_chance:
                # Treffer!
                result.hits.append(target)
                
                # Schaden berechnen und anwenden
                if 'base_damage' in action.skill.effects or action.skill.get_base_damage() is not None:
                    self._apply_damage(action, target, result)
                
                # Status-Effekte anwenden
                if action.skill.applies_effects:
                    applied_effects = []
                    for effect in action.skill.applies_effects:
                        target.apply_status_effect(effect.id, effect.duration, effect.potency)
                        applied_effects.append(effect.id)
                    
                    if applied_effects:
                        if target not in result.effects_applied:
                            result.effects_applied[target] = []
                        result.effects_applied[target].extend(applied_effects)
            else:
                # Verfehlt!
                result.misses.append(target)
                logger.debug(f"{action.actor.name} verfehlt {target.name} mit {action.skill.name} (Wurf: {roll}, benötigt: {hit_chance})")
    
    def _apply_damage(self, action: CombatAction, target: CharacterInstance, result: CombatResult) -> None:
        """
        Wendet Schaden auf ein Ziel an.
        
        Args:
            action (CombatAction): Die Kampfaktion
            target (CharacterInstance): Das Ziel
            result (CombatResult): Das zu aktualisierende Ergebnis
        """
        # Schadensberechnung
        base_damage = action.skill.get_base_damage()
        scaling_attr = action.skill.get_scaling_attribute()
        multiplier = action.skill.get_multiplier()
        damage_type = action.skill.get_damage_type()
        
        # Bonus gegen bestimmte Gegnertypen
        bonus_type = action.skill.effects.get('bonus_vs_type', None)
        if bonus_type and target.has_tag(bonus_type):
            bonus_multiplier = action.skill.effects.get('bonus_multiplier', 1.0)
            multiplier *= bonus_multiplier
            logger.debug(f"{action.skill.name} erhält Bonus-Multiplikator {bonus_multiplier} gegen {target.name} (Tag: {bonus_type})")
        
        # Attributwert des Akteurs für Skalierung
        attr_value = action.actor.get_attribute(scaling_attr)
        
        # Rohschaden berechnen
        raw_damage = calculate_damage(base_damage, attr_value, multiplier)
        
        # Schaden anwenden (mit Verteidigungsreduzierung)
        actual_damage, is_dead = target.take_damage(raw_damage, damage_type)
        
        # Ergebnis aktualisieren
        result.damage_dealt[target] = actual_damage
        
        if is_dead:
            result.deaths.append(target)
            logger.info(f"{action.actor.name} besiegt {target.name} mit {action.skill.name} ({actual_damage} Schaden)")
        else:
            logger.debug(f"{action.actor.name} fügt {target.name} {actual_damage} Schaden zu mit {action.skill.name}")
    
    def _apply_healing(self, action: CombatAction, target: CharacterInstance, result: CombatResult) -> None:
        """
        Wendet Heilung auf ein Ziel an.
        
        Args:
            action (CombatAction): Die Kampfaktion
            target (CharacterInstance): Das Ziel
            result (CombatResult): Das zu aktualisierende Ergebnis
        """
        # Heilungsberechnung
        base_healing = action.skill.effects['base_healing']
        scaling_attr = action.skill.effects.get('scaling_attribute', 'WIS')
        multiplier = action.skill.effects.get('healing_multiplier', 1.0)
        
        # Attributwert des Akteurs für Skalierung
        attr_value = action.actor.get_attribute(scaling_attr)
        
        # Heilung berechnen
        healing_amount = calculate_damage(base_healing, attr_value, multiplier)  # Wir verwenden die Schadensformel für Heilung
        
        # Heilung anwenden
        actual_healing = target.heal(healing_amount)
        
        # Ergebnis aktualisieren
        result.healing_done[target] = actual_healing
        logger.info(f"{action.actor.name} heilt {target.name} um {actual_healing} HP mit {action.skill.name}")


# Globales Kampfsystem
combat_system = CombatSystem()


def get_combat_system() -> CombatSystem:
    """
    Gibt die globale Instanz des Kampfsystems zurück.
    
    Returns:
        CombatSystem: Die globale Instanz
    """
    return combat_system


class CombatEncounter:
    """
    Repräsentiert einen Kampf zwischen Gruppen von Charakteren (Spieler und Gegner).
    """
    def __init__(self, players: List[CharacterInstance], opponents: List[CharacterInstance]):
        """
        Initialisiert einen Kampf.
        
        Args:
            players (List[CharacterInstance]): Die Spielercharaktere
            opponents (List[CharacterInstance]): Die Gegner
        """
        self.players = players
        self.opponents = opponents
        self.round = 0
        self.combat_system = get_combat_system()
        self.turn_order: List[CharacterInstance] = []
        self.is_active = False
        self.winner = None  # 'players' oder 'opponents' oder None
        
        # Regenerationsraten (Prozentsatz der Maximalressource pro Runde)
        self.resource_regen_rates = {
            'MANA': 0.05,     # 5% pro Runde
            'STAMINA': 0.05,  # 5% pro Runde
            'ENERGY': 0.05    # 5% pro Runde
        }
        
        # Minimale Regeneration (Absolutwert pro Runde)
        self.min_resource_regen = {
            'MANA': 2,
            'STAMINA': 2,
            'ENERGY': 2
        }
    
    def start_combat(self) -> None:
        """Startet den Kampf und initialisiert die erste Runde."""
        logger.info("Kampf beginnt!")
        
        # Status zurücksetzen
        self.round = 0
        self.is_active = True
        self.winner = None
        
        # Kampfteilnehmer loggen
        logger.info(f"Spieler: {', '.join(p.name for p in self.players)}")
        logger.info(f"Gegner: {', '.join(o.name for o in self.opponents)}")
        
        # Erste Runde starten
        self.next_round()
    
    def next_round(self) -> None:
        """Startet die nächste Kampfrunde."""
        self.round += 1
        logger.info(f"Runde {self.round} beginnt!")
        
        # Zugreihenfolge berechnen
        self.calculate_turn_order()
        
        # Status-Effekte für alle Charaktere verarbeiten
        all_characters = self.players + self.opponents
        for character in all_characters:
            if character.is_alive():
                # Status-Effekte verarbeiten
                character.process_status_effects()
                
                # Ressourcen regenerieren
                self._regenerate_resources(character)
    
    def _regenerate_resources(self, character: CharacterInstance) -> None:
        """
        Regeneriert Ressourcen für einen Charakter basierend auf der Regenerationsrate.
        
        Args:
            character (CharacterInstance): Der Charakter, dessen Ressourcen regeneriert werden sollen
        """
        # Mana regenerieren
        if character.mana < character.base_combat_values.get('base_mana', 0):
            max_mana = character.base_combat_values.get('base_mana', 0)
            if max_mana > 0:
                regen_amount = max(
                    self.min_resource_regen['MANA'],
                    int(max_mana * self.resource_regen_rates['MANA'])
                )
                character.restore_resource('MANA', regen_amount)
                logger.debug(f"{character.name} regeneriert {regen_amount} Mana")
        
        # Stamina regenerieren
        if character.stamina < character.base_combat_values.get('base_stamina', 0):
            max_stamina = character.base_combat_values.get('base_stamina', 0)
            if max_stamina > 0:
                regen_amount = max(
                    self.min_resource_regen['STAMINA'],
                    int(max_stamina * self.resource_regen_rates['STAMINA'])
                )
                character.restore_resource('STAMINA', regen_amount)
                logger.debug(f"{character.name} regeneriert {regen_amount} Stamina")
        
        # Energy regenerieren
        if character.energy < character.base_combat_values.get('base_energy', 0):
            max_energy = character.base_combat_values.get('base_energy', 0)
            if max_energy > 0:
                regen_amount = max(
                    self.min_resource_regen['ENERGY'],
                    int(max_energy * self.resource_regen_rates['ENERGY'])
                )
                character.restore_resource('ENERGY', regen_amount)
                logger.debug(f"{character.name} regeneriert {regen_amount} Energy")
    
    def calculate_turn_order(self) -> None:
        """Berechnet die Zugreihenfolge basierend auf Initiative."""
        # Alle lebenden Charaktere sammeln
        all_alive = []
        for character in self.players + self.opponents:
            if character.is_alive():
                all_alive.append((character, character.get_initiative()))
        
        # Nach Initiative sortieren (höchste zuerst)
        all_alive.sort(key=lambda x: x[1], reverse=True)
        
        # Zugreihenfolge setzen
        self.turn_order = [char for char, _ in all_alive]
        
        initiative_log = ", ".join(f"{char.name} ({init})" for char, init in all_alive)
        logger.debug(f"Zugreihenfolge: {initiative_log}")
    
    def check_combat_end(self) -> bool:
        """
        Prüft, ob der Kampf beendet ist (eine Seite ist vollständig besiegt).
        
        Returns:
            bool: True, wenn der Kampf beendet ist, sonst False
        """
        players_alive = any(player.is_alive() for player in self.players)
        opponents_alive = any(opponent.is_alive() for opponent in self.opponents)
        
        if not players_alive and not opponents_alive:
            # Unentschieden (sollte selten vorkommen)
            logger.info("Kampf endet unentschieden! Alle Teilnehmer sind gefallen.")
            self.is_active = False
            return True
        elif not players_alive:
            # Gegner haben gewonnen
            logger.info("Kampf endet! Die Gegner sind siegreich.")
            self.is_active = False
            self.winner = 'opponents'
            return True
        elif not opponents_alive:
            # Spieler haben gewonnen
            logger.info("Kampf endet! Die Spieler sind siegreich.")
            self.is_active = False
            self.winner = 'players'
            return True
        
        # Kampf geht weiter
        return False
    
    def get_valid_targets(self, for_player: bool) -> List[CharacterInstance]:
        """
        Gibt gültige Ziele für einen Angriff zurück.
        
        Args:
            for_player (bool): True für Spieler-Angriffe (gegen Gegner), False für Gegner-Angriffe (gegen Spieler)
            
        Returns:
            List[CharacterInstance]: Die gültigen Ziele
        """
        targets = self.opponents if for_player else self.players
        return [target for target in targets if target.can_be_targeted()]
    
    def award_xp_for_victory(self, leveling_service=None) -> None:
        """
        Vergibt XP an die Spieler für besiegte Gegner.
        
        Args:
            leveling_service (Optional): Der Leveling-Service (wird importiert, wenn nicht angegeben)
        """
        if self.winner != 'players':
            logger.debug("Keine XP vergeben, da die Spieler nicht gewonnen haben")
            return
        
        # Leveling-Service importieren, wenn nicht angegeben
        if leveling_service is None:
            from src.game_logic.leveling import get_leveling_service
            leveling_service = get_leveling_service()
        
        # Gesamt-XP aus allen Gegnern berechnen
        total_xp = sum(opponent.xp_reward for opponent in self.opponents)
        
        # XP an alle lebenden Spieler verteilen
        living_players = [player for player in self.players if player.is_alive()]
        if not living_players:
            logger.warning("Keine lebenden Spieler für XP-Vergabe!")
            return
        
        # XP gleichmäßig verteilen
        xp_per_player = total_xp // len(living_players)
        if xp_per_player <= 0:
            xp_per_player = 1  # Mindestens 1 XP
        
        logger.info(f"Vergebe {xp_per_player} XP an jeden überlebenden Spieler")
        
        # XP zuweisen und auf Level-Ups prüfen
        for player in living_players:
            level_up_occurred = leveling_service.award_xp(player, xp_per_player)
            if level_up_occurred:
                logger.info(f"{player.name} ist aufgestiegen!")


===== /workspaces/python-rpg-projekt/src/game_logic/entities.py =====
"""
Entitäten

Enthält die Klasse CharacterInstance, die eine konkrete Instanz eines Charakters oder Gegners
im Spiel repräsentiert, mit aktuellem Zustand wie HP, Statuseffekte, etc.
"""
from typing import Dict, List, Any, Optional, Tuple, Set
from dataclasses import dataclass, field
import math

from src.definitions.character import CharacterTemplate, OpponentTemplate
from src.definitions.skill import SkillDefinition
from src.game_logic.formulas import (
    calculate_attribute_bonus, calculate_max_hp, 
    calculate_accuracy_modifier, calculate_evasion_modifier
)
from src.game_logic.effects import StatusEffect, create_status_effect
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


@dataclass
class CharacterInstance:
    """
    Repräsentiert eine konkrete Instanz eines Charakters oder Gegners im Spiel.
    
    Diese Klasse enthält den aktuellen Zustand eines Charakters (Spieler oder Gegner),
    einschließlich aktueller Lebenspunkte, Ressourcen und Status-Effekte.
    """
    # Basisinformationen
    id: str
    name: str
    template_id: str
    
    # Primärattribute (aus Template + Statusmodifikatoren)
    base_attributes: Dict[str, int]
    
    # Kampfwerte (aus Template + Statusmodifikatoren)
    base_combat_values: Dict[str, int]
    
    # Verfügbare Skills
    skill_ids: List[str]
    
    # Aktueller Zustand
    hp: int
    mana: int = 0
    stamina: int = 0
    energy: int = 0
    shield_points: int = 0  # Für Schild-Effekte
    
    # Erfahrung und Level
    xp: int = 0
    level: int = 1
    
    # Status-Effekte und Modifikatoren
    active_effects: Dict[str, StatusEffect] = field(default_factory=dict)
    status_mods: Dict[str, int] = field(default_factory=dict)
    status_flags: Dict[str, bool] = field(default_factory=dict)
    
    # Tags für den Charakter (z.B. WARRIOR, UNDEAD)
    tags: Set[str] = field(default_factory=set)
    
    # Für Gegner: KI-Strategie und XP-Belohnung
    ai_strategy: Optional[str] = None
    xp_reward: int = 0
    
    def __post_init__(self):
        """Wird nach der Initialisierung aufgerufen, um Standardwerte zu setzen."""
        # Standardwerte für Status-Modifikatoren
        default_mods = [
            'STR', 'DEX', 'INT', 'CON', 'WIS',  # Primärattribute
            'armor', 'magic_resist', 'initiative',  # Kampfwerte
            'accuracy', 'evasion'  # Berechnete Werte
        ]
        for mod in default_mods:
            if mod not in self.status_mods:
                self.status_mods[mod] = 0
        
        # Standardwerte für Status-Flags
        default_flags = ['can_act', 'can_be_targeted']
        for flag in default_flags:
            if flag not in self.status_flags:
                self.status_flags[flag] = True
        
        # Sicherstellen, dass "basic_attack_free" vorhanden ist
        if "basic_attack_free" not in self.skill_ids:
            self.skill_ids.append("basic_attack_free")
    
    def __hash__(self) -> int:
        """
        Macht die CharacterInstance hashable, damit sie als Dictionary-Schlüssel verwendet werden kann.
        
        Returns:
            int: Der Hash-Wert basierend auf der id
        """
        return hash(self.id)
    
    def __eq__(self, other) -> bool:
        """
        Vergleicht zwei CharacterInstances auf Gleichheit.
        
        Args:
            other: Ein anderes Objekt zum Vergleich
            
        Returns:
            bool: True, wenn die IDs übereinstimmen, sonst False
        """
        if not isinstance(other, CharacterInstance):
            return False
        return self.id == other.id
    
    @classmethod
    def from_template(cls, template: CharacterTemplate, level: int = 1) -> 'CharacterInstance':
        """
        Erstellt eine CharacterInstance aus einem CharacterTemplate.
        
        Args:
            template (CharacterTemplate): Das zu verwendende Template
            level (int): Das Startlevel des Charakters
            
        Returns:
            CharacterInstance: Eine neue CharacterInstance
        """
        # Basis-HP und Ressourcen berechnen
        base_hp = template.get_combat_value('base_hp')
        base_mana = template.get_combat_value('base_mana')
        base_stamina = template.get_combat_value('base_stamina')
        base_energy = template.get_combat_value('base_energy')
        
        # Maximales HP mit Konstitutionsbonus berechnen
        constitution = template.get_attribute('CON')
        max_hp = calculate_max_hp(base_hp, constitution)
        
        # Skills kopieren und sicherstellen, dass basic_attack_free enthalten ist
        skills = template.skills.copy()
        if "basic_attack_free" not in skills:
            skills.append("basic_attack_free")
        
        instance = cls(
            id=f"{template.id}_{id(template)}",  # Eindeutige ID erstellen
            name=template.name,
            template_id=template.id,
            base_attributes=template.primary_attributes.copy(),
            base_combat_values=template.combat_values.copy(),
            skill_ids=skills,
            hp=max_hp,
            mana=base_mana,
            stamina=base_stamina,
            energy=base_energy,
            level=level,
            tags=set(template.tags)
        )
        
        # Wenn es ein Gegner-Template ist, zusätzliche Werte setzen
        if isinstance(template, OpponentTemplate):
            instance.ai_strategy = template.ai_strategy
            instance.xp_reward = template.xp_reward
        
        return instance
    
    def get_attribute(self, attr_name: str) -> int:
        """
        Gibt den aktuellen Wert eines Primärattributs zurück, inklusive Statusmodifikatoren.
        
        Args:
            attr_name (str): Der Name des Attributs (z.B. 'STR')
            
        Returns:
            int: Der aktuelle Attributwert
        """
        base_value = self.base_attributes.get(attr_name, 0)
        mod_value = self.status_mods.get(attr_name, 0)
        return base_value + mod_value
    
    def get_combat_value(self, value_name: str) -> int:
        """
        Gibt den aktuellen Wert eines Kampfwerts zurück, inklusive Statusmodifikatoren.
        
        Args:
            value_name (str): Der Name des Kampfwerts (z.B. 'armor')
            
        Returns:
            int: Der aktuelle Kampfwert
        """
        base_value = self.base_combat_values.get(value_name, 0)
        mod_value = self.status_mods.get(value_name, 0)
        return base_value + mod_value
    
    def get_max_hp(self) -> int:
        """
        Berechnet die maximalen Lebenspunkte basierend auf Basis-HP und Konstitution.
        
        Returns:
            int: Die maximalen Lebenspunkte
        """
        base_hp = self.base_combat_values.get('base_hp', 0)
        constitution = self.get_attribute('CON')
        return calculate_max_hp(base_hp, constitution)
    
    def get_accuracy(self) -> int:
        """
        Berechnet den Genauigkeitsmodifikator basierend auf Geschicklichkeit und Statuseffekten.
        
        Returns:
            int: Der aktuelle Genauigkeitsmodifikator
        """
        dexterity = self.get_attribute('DEX')
        effects_mod = self.status_mods.get('accuracy', 0)
        return calculate_accuracy_modifier(dexterity, effects_mod)
    
    def get_evasion(self) -> int:
        """
        Berechnet den Ausweichmodifikator basierend auf Geschicklichkeit und Statuseffekten.
        
        Returns:
            int: Der aktuelle Ausweichmodifikator
        """
        dexterity = self.get_attribute('DEX')
        effects_mod = self.status_mods.get('evasion', 0)
        return calculate_evasion_modifier(dexterity, effects_mod)
    
    def get_initiative(self) -> int:
        """
        Berechnet die Initiative basierend auf Geschicklichkeit und Statuseffekten.
        
        Returns:
            int: Der aktuelle Initiativewert
        """
        base_initiative = self.get_attribute('DEX') * 2
        initiative_mod = self.status_mods.get('initiative', 0)
        return base_initiative + initiative_mod
    
    def is_alive(self) -> bool:
        """
        Prüft, ob der Charakter noch lebt.
        
        Returns:
            bool: True, wenn HP > 0, sonst False
        """
        return self.hp > 0
    
    def can_act(self) -> bool:
        """
        Prüft, ob der Charakter handeln kann (nicht betäubt, etc.).
        
        Returns:
            bool: True, wenn der Charakter handeln kann, sonst False
        """
        return self.status_flags.get('can_act', True) and self.is_alive()
    
    def can_be_targeted(self) -> bool:
        """
        Prüft, ob der Charakter als Ziel ausgewählt werden kann.
        
        Returns:
            bool: True, wenn der Charakter ein gültiges Ziel ist, sonst False
        """
        return self.status_flags.get('can_be_targeted', True) and self.is_alive()
    
    def has_tag(self, tag: str) -> bool:
        """
        Prüft, ob der Charakter einen bestimmten Tag hat.
        
        Args:
            tag (str): Der zu prüfende Tag
            
        Returns:
            bool: True, wenn der Tag vorhanden ist, sonst False
        """
        return tag in self.tags
    
    def has_enough_resource(self, skill: SkillDefinition) -> bool:
        """
        Prüft, ob der Charakter genug Ressourcen für den Skill hat.
        
        Args:
            skill (SkillDefinition): Der zu prüfende Skill
            
        Returns:
            bool: True, wenn genug Ressourcen vorhanden sind, sonst False
        """
        cost_value = skill.get_cost_value()
        cost_type = skill.get_cost_type()
        
        if cost_type == 'NONE' or cost_value <= 0:
            return True
        
        resource_map = {
            'MANA': self.mana,
            'STAMINA': self.stamina,
            'ENERGY': self.energy,
        }
        
        current_resource = resource_map.get(cost_type, 0)
        return current_resource >= cost_value
    
    def spend_resource(self, skill: SkillDefinition) -> bool:
        """
        Verbraucht Ressourcen für einen Skill.
        
        Args:
            skill (SkillDefinition): Der Skill, für den Ressourcen verbraucht werden
            
        Returns:
            bool: True, wenn erfolgreich, False wenn nicht genug Ressourcen vorhanden waren
        """
        cost_value = skill.get_cost_value()
        cost_type = skill.get_cost_type()
        
        if cost_type == 'NONE' or cost_value <= 0:
            return True
        
        # Prüfen, ob genug Ressourcen vorhanden sind
        if not self.has_enough_resource(skill):
            return False
        
        # Ressourcen verbrauchen
        if cost_type == 'MANA':
            self.mana -= cost_value
        elif cost_type == 'STAMINA':
            self.stamina -= cost_value
        elif cost_type == 'ENERGY':
            self.energy -= cost_value
        
        return True
    
    def apply_status_effect(self, effect_id: str, duration: int, potency: int) -> None:
        """
        Wendet einen Statuseffekt auf den Charakter an.
        
        Args:
            effect_id (str): Die ID des Statuseffekts
            duration (int): Die Dauer in Runden
            potency (int): Die Stärke des Effekts
        """
        # Statuseffekt erstellen
        effect = create_status_effect(effect_id, duration, potency)
        if not effect:
            logger.warning(f"Konnte Statuseffekt {effect_id} nicht erstellen")
            return
        
        # Prüfen, ob der Effekt bereits aktiv ist
        if effect_id in self.active_effects:
            existing_effect = self.active_effects[effect_id]
            # Dauer auf das Maximum setzen (Refresh)
            existing_effect.duration = max(existing_effect.duration, duration)
            # Potenz überschreiben (kein Stacken)
            existing_effect.potency = potency
            logger.debug(f"Statuseffekt {effect_id} bei {self.name} erneuert/überschrieben")
        else:
            # Neuen Effekt anwenden
            self.active_effects[effect_id] = effect
            effect.on_apply(self)
            logger.debug(f"Statuseffekt {effect_id} auf {self.name} angewendet")
    
    def remove_status_effect(self, effect_id: str) -> None:
        """
        Entfernt einen Statuseffekt vom Charakter.
        
        Args:
            effect_id (str): Die ID des zu entfernenden Statuseffekts
        """
        if effect_id in self.active_effects:
            effect = self.active_effects[effect_id]
            effect.on_remove(self)
            del self.active_effects[effect_id]
            logger.debug(f"Statuseffekt {effect_id} von {self.name} entfernt")
    
    def process_status_effects(self) -> None:
        """
        Verarbeitet alle aktiven Statuseffekte für eine Runde.
        """
        effects_to_remove = []
        
        for effect_id, effect in self.active_effects.items():
            # Effekt-Tick verarbeiten
            is_active = effect.tick(self)
            if not is_active:
                effects_to_remove.append(effect_id)
        
        # Abgelaufene Effekte entfernen
        for effect_id in effects_to_remove:
            del self.active_effects[effect_id]
    
    def take_damage(self, damage: int, damage_type: str) -> Tuple[int, bool]:
        """
        Lässt den Charakter Schaden nehmen, unter Berücksichtigung von Rüstung/Resistenz.
        
        Args:
            damage (int): Der Rohe Schaden
            damage_type (str): Der Schadenstyp (PHYSICAL, MAGICAL, HOLY, etc.)
            
        Returns:
            Tuple[int, bool]: Der tatsächlich zugefügte Schaden und ob der Charakter dadurch stirbt
        """
        # Schutzschild-Punkte zuerst anwenden, wenn vorhanden
        if self.shield_points > 0:
            absorbed = min(self.shield_points, damage)
            self.shield_points -= absorbed
            damage -= absorbed
            logger.debug(f"{self.name}'s Schild absorbiert {absorbed} Schaden, {self.shield_points} Schildpunkte übrig")
            if damage <= 0:
                return absorbed, False
        
        # Passende Verteidigung basierend auf Schadenstyp wählen
        defense = 0
        if damage_type == 'PHYSICAL':
            defense = self.get_combat_value('armor')
        elif damage_type in ('MAGICAL', 'HOLY', 'DARK'):
            defense = self.get_combat_value('magic_resist')
        
        # Schadenreduzierung durch Verteidigung
        reduced_damage = max(1, damage - defense)  # Mindestens 1 Schaden
        self.hp -= reduced_damage
        
        # Lebendstatus prüfen
        is_dead = self.hp <= 0
        if is_dead:
            self.hp = 0
            logger.info(f"{self.name} wurde besiegt!")
        else:
            logger.debug(f"{self.name} nimmt {reduced_damage} Schaden ({damage} - {defense}), verbleibende HP: {self.hp}")
        
        return reduced_damage, is_dead
    
    def take_raw_damage(self, damage: int) -> Tuple[int, bool]:
        """
        Lässt den Charakter direkten Schaden nehmen, der Rüstung und Resistenzen ignoriert.
        
        Args:
            damage (int): Der Schaden
            
        Returns:
            Tuple[int, bool]: Der tatsächlich zugefügte Schaden und ob der Charakter dadurch stirbt
        """
        self.hp -= damage
        is_dead = self.hp <= 0
        if is_dead:
            self.hp = 0
            logger.info(f"{self.name} wurde durch direkten Schaden besiegt!")
        else:
            logger.debug(f"{self.name} nimmt {damage} direkten Schaden, verbleibende HP: {self.hp}")
        
        return damage, is_dead
    
    def heal(self, amount: int) -> int:
        """
        Heilt den Charakter um die angegebene Menge.
        
        Args:
            amount (int): Die Heilungsmenge
            
        Returns:
            int: Die tatsächlich geheilte Menge
        """
        if not self.is_alive():
            logger.debug(f"{self.name} ist tot und kann nicht geheilt werden")
            return 0
        
        max_hp = self.get_max_hp()
        old_hp = self.hp
        self.hp = min(max_hp, self.hp + amount)
        actual_healing = self.hp - old_hp
        
        if actual_healing > 0:
            logger.debug(f"{self.name} wird um {actual_healing} HP geheilt, neue HP: {self.hp}/{max_hp}")
        
        return actual_healing
    
    def restore_resource(self, resource_type: str, amount: int) -> int:
        """
        Stellt eine Ressource (Mana, Stamina, Energy) wieder her.
        
        Args:
            resource_type (str): Der Ressourcentyp ('MANA', 'STAMINA', 'ENERGY')
            amount (int): Die Menge
            
        Returns:
            int: Die tatsächlich wiederhergestellte Menge
        """
        if resource_type == 'MANA':
            max_value = self.base_combat_values.get('base_mana', 0)
            old_value = self.mana
            self.mana = min(max_value, self.mana + amount)
            return self.mana - old_value
        
        elif resource_type == 'STAMINA':
            max_value = self.base_combat_values.get('base_stamina', 0)
            old_value = self.stamina
            self.stamina = min(max_value, self.stamina + amount)
            return self.stamina - old_value
        
        elif resource_type == 'ENERGY':
            max_value = self.base_combat_values.get('base_energy', 0)
            old_value = self.energy
            self.energy = min(max_value, self.energy + amount)
            return self.energy - old_value
        
        return 0
    
    def gain_xp(self, amount: int) -> bool:
        """
        Lässt den Charakter Erfahrungspunkte erhalten und prüft auf Level-Aufstieg.
        
        Args:
            amount (int): Die Menge an XP
            
        Returns:
            bool: True, wenn ein Level-Aufstieg stattfand, sonst False
        """
        if not self.is_alive():
            return False
        
        self.xp += amount
        logger.debug(f"{self.name} erhält {amount} XP, neue Gesamtsumme: {self.xp}")
        
        # Diese Funktion macht noch keinen Level-Up - das überlassen wir dem Leveling-Service,
        # der über diese Funktion informiert wird und dann die level_up-Methode aufruft.
        
        # In einer späteren Implementierung würden wir hier ein Event auslösen,
        # das vom Leveling-System abonniert wird.
        return False
    
    def level_up(self) -> None:
        """
        Führt einen Level-Aufstieg durch.
        Diese Funktion wird vom Leveling-Service aufgerufen.
        """
        self.level += 1
        logger.info(f"{self.name} ist auf Level {self.level} aufgestiegen!")
        
        # Volle Heilung und Ressourcenwiederherstellung
        max_hp = self.get_max_hp()
        self.hp = max_hp
        
        for resource_type in ['MANA', 'STAMINA', 'ENERGY']:
            max_resource = self.base_combat_values.get(f'base_{resource_type.lower()}', 0)
            if resource_type == 'MANA':
                self.mana = max_resource
            elif resource_type == 'STAMINA':
                self.stamina = max_resource
            elif resource_type == 'ENERGY':
                self.energy = max_resource


===== /workspaces/python-rpg-projekt/src/game_logic/effects.py =====
"""
Status-Effekte

Enthält die Status-Effekt-Klassen und deren Logik.
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List

from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class StatusEffect(ABC):
    """
    Abstrakte Basisklasse für Status-Effekte.
    
    Alle konkreten Status-Effekte müssen von dieser Klasse erben und
    die abstrakten Methoden implementieren.
    """
    
    def __init__(self, duration: int, potency: int):
        """
        Initialisiert einen Status-Effekt.
        
        Args:
            duration (int): Die Dauer des Effekts in Runden
            potency (int): Die Stärke des Effekts
        """
        self.duration = duration
        self.potency = potency
        self.name = self.__class__.__name__
    
    @abstractmethod
    def on_apply(self, target: Any) -> None:
        """
        Wird aufgerufen, wenn der Effekt auf ein Ziel angewendet wird.
        
        Args:
            target (Any): Das Ziel, auf das der Effekt angewendet wird
        """
        pass
    
    @abstractmethod
    def on_tick(self, target: Any) -> None:
        """
        Wird in jeder Runde aufgerufen, solange der Effekt aktiv ist.
        
        Args:
            target (Any): Das Ziel mit dem aktiven Effekt
        """
        pass
    
    @abstractmethod
    def on_remove(self, target: Any) -> None:
        """
        Wird aufgerufen, wenn der Effekt endet oder entfernt wird.
        
        Args:
            target (Any): Das Ziel, von dem der Effekt entfernt wird
        """
        pass
    
    def tick(self, target: Any) -> bool:
        """
        Verarbeitet einen Tick (eine Runde) des Effekts und reduziert die Dauer.
        
        Args:
            target (Any): Das Ziel mit dem aktiven Effekt
            
        Returns:
            bool: True, wenn der Effekt noch aktiv ist, False wenn er endet
        """
        # Effekt anwenden
        self.on_tick(target)
        
        # Dauer reduzieren
        self.duration -= 1
        
        # Prüfen, ob der Effekt endet
        if self.duration <= 0:
            self.on_remove(target)
            return False
        
        return True
    
    def __str__(self) -> str:
        """String-Repräsentation des Effekts"""
        return f"{self.name} (Dauer: {self.duration}, Stärke: {self.potency})"


# Konkrete Status-Effekt-Implementierungen

class Burning(StatusEffect):
    """Brennend: Verursacht Schaden über Zeit"""
    
    def on_apply(self, target: Any) -> None:
        logger.debug(f"{target.name} brennt! (Stärke: {self.potency})")
    
    def on_tick(self, target: Any) -> None:
        # Direkter Schaden, der Rüstung ignoriert
        damage = self.potency
        target.take_raw_damage(damage)
        logger.debug(f"{target.name} erleidet {damage} Feuerschaden durch Brennen")
    
    def on_remove(self, target: Any) -> None:
        logger.debug(f"{target.name} brennt nicht mehr")


class Stunned(StatusEffect):
    """Betäubt: Verhindert Aktionen"""
    
    def on_apply(self, target: Any) -> None:
        target.status_flags['can_act'] = False
        logger.debug(f"{target.name} ist betäubt und kann nicht handeln")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.status_flags['can_act'] = True
        logger.debug(f"{target.name} ist nicht mehr betäubt")


class Slowed(StatusEffect):
    """Verlangsamt: Reduziert Initiative und Ausweichen"""
    
    def on_apply(self, target: Any) -> None:
        target.status_mods['initiative'] -= 5 * self.potency
        target.status_mods['evasion'] -= self.potency
        logger.debug(f"{target.name} ist verlangsamt (Initiative -5, Ausweichen -{self.potency})")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.status_mods['initiative'] += 5 * self.potency
        target.status_mods['evasion'] += self.potency
        logger.debug(f"{target.name} ist nicht mehr verlangsamt")


class Weakened(StatusEffect):
    """Geschwächt: Reduziert Stärke"""
    
    def on_apply(self, target: Any) -> None:
        target.status_mods['STR'] -= self.potency
        logger.debug(f"{target.name} ist geschwächt (STR -{self.potency})")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.status_mods['STR'] += self.potency
        logger.debug(f"{target.name} ist nicht mehr geschwächt")


class AccuracyDown(StatusEffect):
    """Genauigkeit reduziert: Reduziert Treffergenauigkeit"""
    
    def on_apply(self, target: Any) -> None:
        target.status_mods['accuracy'] -= self.potency
        logger.debug(f"{target.name} hat reduzierte Genauigkeit (-{self.potency})")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.status_mods['accuracy'] += self.potency
        logger.debug(f"{target.name} hat keine reduzierte Genauigkeit mehr")


class InitiativeUp(StatusEffect):
    """Initiative erhöht: Erhöht die Initiative"""
    
    def on_apply(self, target: Any) -> None:
        target.status_mods['initiative'] += self.potency
        logger.debug(f"{target.name} hat erhöhte Initiative (+{self.potency})")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.status_mods['initiative'] -= self.potency
        logger.debug(f"{target.name} hat keine erhöhte Initiative mehr")


class Shielded(StatusEffect):
    """Geschützt: Absorbiert Schaden"""
    
    def on_apply(self, target: Any) -> None:
        target.shield_points = self.potency
        logger.debug(f"{target.name} hat einen Schutzschild ({self.potency} Punkte)")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.shield_points = 0
        logger.debug(f"{target.name} hat keinen Schutzschild mehr")


class DefenseUp(StatusEffect):
    """Verteidigung erhöht: Erhöht Rüstung und Magieresistenz"""
    
    def on_apply(self, target: Any) -> None:
        target.status_mods['armor'] += self.potency
        target.status_mods['magic_resist'] += self.potency
        logger.debug(f"{target.name} hat erhöhte Verteidigung (Rüstung/Magieresistenz +{self.potency})")
    
    def on_tick(self, target: Any) -> None:
        # Nichts zu tun bei jedem Tick - der Effekt ist beim Anwenden eingetreten
        pass
    
    def on_remove(self, target: Any) -> None:
        target.status_mods['armor'] -= self.potency
        target.status_mods['magic_resist'] -= self.potency
        logger.debug(f"{target.name} hat keine erhöhte Verteidigung mehr")


# Factory für Status-Effekte
def create_status_effect(effect_id: str, duration: int, potency: int) -> Optional[StatusEffect]:
    """
    Erstellt einen Status-Effekt basierend auf der ID.
    
    Args:
        effect_id (str): Die ID des Status-Effekts
        duration (int): Die Dauer in Runden
        potency (int): Die Stärke des Effekts
        
    Returns:
        Optional[StatusEffect]: Der erstellte Status-Effekt oder None, wenn die ID ungültig ist
    """
    effect_classes = {
        'BURNING': Burning,
        'STUNNED': Stunned,
        'SLOWED': Slowed,
        'WEAKENED': Weakened,
        'ACCURACY_DOWN': AccuracyDown,
        'INITIATIVE_UP': InitiativeUp,
        'SHIELDED': Shielded,
        'DEFENSE_UP': DefenseUp,
    }
    
    effect_class = effect_classes.get(effect_id)
    if not effect_class:
        logger.error(f"Unbekannter Status-Effekt: {effect_id}")
        return None
    
    return effect_class(duration, potency)


===== /workspaces/python-rpg-projekt/src/game_logic/leveling.py =====
"""
Leveling-System

Enthält Funktionen und Klassen für das Leveling-System.
"""
from typing import Dict, Any, List, Optional

from src.game_logic.formulas import calculate_xp_for_level
from src.game_logic.entities import CharacterInstance
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


class LevelingService:
    """
    Service zur Verwaltung von Erfahrungspunkten und Level-Aufstiegen.
    
    Diese Klasse verwaltet die XP-Vergabe und Level-Up-Logik für alle Charaktere.
    Sie ist vom konkreten Charakter-Zustand entkoppelt.
    """
    
    def __init__(self):
        """Initialisiert den Leveling-Service."""
        # Hier könnten zusätzliche Initialisierungen stattfinden, z.B.
        # das Laden von Level-Up-Belohnungen oder -Boni aus Konfigurationsdateien
        pass
    
    def award_xp(self, character: CharacterInstance, amount: int) -> bool:
        """
        Vergibt XP an einen Charakter und prüft auf Level-Aufstieg.
        
        Args:
            character (CharacterInstance): Der Charakter, der XP erhält
            amount (int): Die Menge an XP
            
        Returns:
            bool: True, wenn ein Level-Aufstieg stattfand, sonst False
        """
        if not character.is_alive():
            logger.debug(f"Keine XP für {character.name}, da nicht am Leben")
            return False
        
        # XP vergeben
        character.xp += amount
        logger.info(f"{character.name} erhält {amount} XP, neue Gesamtsumme: {character.xp}")
        
        # Prüfen, ob ein Level-Aufstieg möglich ist
        current_level = character.level
        new_level = self.calculate_level_from_xp(character.xp)
        
        if new_level > current_level:
            # Level-Aufstieg durchführen
            levels_gained = new_level - current_level
            logger.info(f"{character.name} steigt {levels_gained} Level auf!")
            
            # Für jeden gewonnenen Level die Boni anwenden
            for _ in range(levels_gained):
                self._apply_level_up(character)
            
            return True
        
        return False
    
    def calculate_level_from_xp(self, xp: int) -> int:
        """
        Berechnet das Level basierend auf XP.
        
        Args:
            xp (int): Die Gesamtsumme an XP
            
        Returns:
            int: Das daraus resultierende Level
        """
        level = 1
        while True:
            xp_for_next = calculate_xp_for_level(level + 1)
            if xp_for_next > xp:
                break
            level += 1
        
        return level
    
    def get_xp_for_next_level(self, character: CharacterInstance) -> int:
        """
        Berechnet die XP, die für das nächste Level benötigt werden.
        
        Args:
            character (CharacterInstance): Der Charakter
            
        Returns:
            int: Die benötigte XP für das nächste Level
        """
        next_level = character.level + 1
        return calculate_xp_for_level(next_level)
    
    def get_xp_progress_percentage(self, character: CharacterInstance) -> float:
        """
        Berechnet den XP-Fortschritt in Prozent zum nächsten Level.
        
        Args:
            character (CharacterInstance): Der Charakter
            
        Returns:
            float: Der Fortschritt in Prozent (0-100)
        """
        current_level_xp = calculate_xp_for_level(character.level)
        next_level_xp = calculate_xp_for_level(character.level + 1)
        
        if next_level_xp <= current_level_xp:  # Sicherheit für Edge-Cases
            return 100.0
        
        xp_for_level = next_level_xp - current_level_xp
        current_xp_in_level = character.xp - current_level_xp
        
        progress = (current_xp_in_level / xp_for_level) * 100.0
        return max(0.0, min(100.0, progress))  # Auf 0-100% beschränken
    
    def _apply_level_up(self, character: CharacterInstance) -> None:
        """
        Wendet die Level-Up-Logik auf einen Charakter an.
        
        Args:
            character (CharacterInstance): Der Charakter, der aufsteigt
        """
        character.level += 1
        logger.info(f"{character.name} ist auf Level {character.level} aufgestiegen!")
        
        # Volle Heilung und Ressourcenwiederherstellung
        max_hp = character.get_max_hp()
        character.hp = max_hp
        
        for resource_type in ['MANA', 'STAMINA', 'ENERGY']:
            resource_key = f"base_{resource_type.lower()}"
            max_resource = character.base_combat_values.get(resource_key, 0)
            if max_resource > 0:
                if resource_type == 'MANA':
                    character.mana = max_resource
                elif resource_type == 'STAMINA':
                    character.stamina = max_resource
                elif resource_type == 'ENERGY':
                    character.energy = max_resource
        
        # Hier könnten weitere Level-Up-Boni angewendet werden, z.B.:
        # - Neue Skills freischalten
        # - Attributpunkte vergeben
        # - Kampfwerte erhöhen
        # Diese Logik würde in späteren Versionen implementiert werden.


# Globale Instanz des Leveling-Service
leveling_service = LevelingService()


def get_leveling_service() -> LevelingService:
    """
    Gibt die globale Instanz des Leveling-Service zurück.
    
    Returns:
        LevelingService: Die globale Instanz
    """
    return leveling_service


===== /workspaces/python-rpg-projekt/src/game_logic/__init__.py =====
"""
Game Logic Paket

Enthält die Kernlogik des Spiels und das Spielzustandsmanagement.
"""


===== /workspaces/python-rpg-projekt/src/game_logic/formulas.py =====
"""
Formeln und Berechnungen

Enthält grundlegende Berechnungsformeln für Spiel-Mechaniken wie
Attributboni, HP-Berechnung, Trefferchance usw.
"""
import math
from typing import Optional

from src.config.config import get_config
from src.utils.logging_setup import get_logger


# Logger für dieses Modul
logger = get_logger(__name__)


def calculate_attribute_bonus(attribute_value: int) -> int:
    """
    Berechnet den Bonus/Malus für einen Attributwert.
    Formel: (Attributwert - 10) // 2 (ganzzahlige Division)
    
    Args:
        attribute_value (int): Der Attributwert (z.B. STR, DEX)
        
    Returns:
        int: Der Bonus/Malus für diesen Attributwert
    """
    return (attribute_value - 10) // 2


def calculate_max_hp(base_hp: int, constitution: int) -> int:
    """
    Berechnet die maximalen Lebenspunkte.
    Formel: Basis-HP + (Konstitution * 5)
    
    Args:
        base_hp (int): Die Basis-Lebenspunkte
        constitution (int): Der Konstitutionswert (CON)
        
    Returns:
        int: Die maximalen Lebenspunkte
    """
    return base_hp + (constitution * 5)


def calculate_damage(
    base_damage: Optional[int], 
    attribute_value: int, 
    multiplier: float = 1.0
) -> int:
    """
    Berechnet den Schaden einer Aktion.
    Formel: floor((Basis-Schaden + Attribut-Bonus) * Multiplikator)
    
    Args:
        base_damage (Optional[int]): Der Basis-Schaden (None nutzt Standardwert)
        attribute_value (int): Der relevante Attributwert (z.B. STR, INT)
        multiplier (float): Ein Multiplikator für den Schaden (Standard: 1.0)
        
    Returns:
        int: Der berechnete Schaden (abgerundet)
    """
    config = get_config()
    if base_damage is None:
        base_damage = config.game_settings.get('base_weapon_damage', 5)
        
    attribute_bonus = calculate_attribute_bonus(attribute_value)
    return math.floor((base_damage + attribute_bonus) * multiplier)


def calculate_healing(
    base_healing: int,
    attribute_value: int,
    multiplier: float = 1.0
) -> int:
    """
    Berechnet die Heilung einer Aktion.
    Formel: floor((Basis-Heilung + Attribut-Bonus) * Multiplikator)
    
    Args:
        base_healing (int): Die Basis-Heilung
        attribute_value (int): Der relevante Attributwert (z.B. WIS)
        multiplier (float): Ein Multiplikator für die Heilung (Standard: 1.0)
        
    Returns:
        int: Die berechnete Heilung (abgerundet)
    """
    attribute_bonus = calculate_attribute_bonus(attribute_value)
    return math.floor((base_healing + attribute_bonus) * multiplier)


def calculate_damage_reduction(damage: int, defense: int) -> int:
    """
    Berechnet den reduzierten Schaden nach Anwendung der Verteidigung.
    Formel: max(min_damage, Schaden - Verteidigung)
    
    Args:
        damage (int): Der ursprüngliche Schaden
        defense (int): Der Verteidigungswert (Rüstung oder Magieresistenz)
        
    Returns:
        int: Der reduzierte Schaden
    """
    config = get_config()
    min_damage = config.game_settings.get('min_damage', 1)
    
    reduced_damage = max(min_damage, damage - defense)
    return reduced_damage


def calculate_hit_chance(accuracy: int, evasion: int) -> int:
    """
    Berechnet die Trefferchance basierend auf Genauigkeit und Ausweichen.
    Formel: max(min_chance, min(max_chance, base_chance + (Genauigkeit*Faktor) - (Ausweichen*Faktor)))
    
    Args:
        accuracy (int): Der Genauigkeitswert des Angreifers
        evasion (int): Der Ausweichenwert des Ziels
        
    Returns:
        int: Die Trefferchance in Prozent (5-95)
    """
    config = get_config()
    base_chance = config.game_settings.get('hit_chance_base', 90)
    accuracy_factor = config.game_settings.get('hit_chance_accuracy_factor', 3)
    evasion_factor = config.game_settings.get('hit_chance_evasion_factor', 2)
    min_chance = config.game_settings.get('hit_chance_min', 5)
    max_chance = config.game_settings.get('hit_chance_max', 95)
    
    # Berechnung mit Abrundung auf ganze Prozente
    hit_chance = base_chance + (accuracy * accuracy_factor) - (evasion * evasion_factor)
    
    # Auf den erlaubten Bereich beschränken
    hit_chance = max(min_chance, min(max_chance, hit_chance))
    
    return hit_chance


def calculate_xp_for_level(level: int) -> int:
    """
    Berechnet die benötigte XP für ein bestimmtes Level.
    Formel: ceiling(xp_level_base * (xp_level_factor ^ (level - 1)))
    
    Args:
        level (int): Das zu berechnende Level
        
    Returns:
        int: Die benötigte XP für dieses Level
    """
    config = get_config()
    xp_base = config.game_settings.get('xp_level_base', 100)
    xp_factor = config.game_settings.get('xp_level_factor', 1.5)
    
    # Level 1 benötigt 0 XP, da es das Startlevel ist
    if level <= 1:
        return 0
    
    # XP für Level berechnen und aufrunden
    required_xp = math.ceil(xp_base * (xp_factor ** (level - 1)))
    return required_xp


def calculate_accuracy_modifier(dexterity: int, effects_mod: int = 0) -> int:
    """
    Berechnet den Genauigkeitsmodifikator basierend auf Geschicklichkeit und Effekten.
    
    Args:
        dexterity (int): Der Geschicklichkeitswert
        effects_mod (int): Modifikator durch Status-Effekte
        
    Returns:
        int: Der Gesamtmodifikator für Genauigkeit
    """
    base_mod = calculate_attribute_bonus(dexterity)
    return base_mod + effects_mod


def calculate_evasion_modifier(dexterity: int, effects_mod: int = 0) -> int:
    """
    Berechnet den Ausweichmodifikator basierend auf Geschicklichkeit und Effekten.
    
    Args:
        dexterity (int): Der Geschicklichkeitswert
        effects_mod (int): Modifikator durch Status-Effekte
        
    Returns:
        int: Der Gesamtmodifikator für Ausweichen
    """
    base_mod = calculate_attribute_bonus(dexterity)
    return base_mod + effects_mod


===== /workspaces/python-rpg-projekt/src/definitions/skill.py =====
"""
Skill-Definition

Definiert die Struktur eines Skills.
"""
from typing import Dict, List, Optional, Any
from dataclasses import dataclass


@dataclass
class StatusEffectDefinition:
    """
    Definition eines durch einen Skill anwendbaren Status-Effekts.
    
    Attribute:
        id (str): Die ID des Status-Effekts
        duration (int): Die Dauer in Runden
        potency (int): Die Stärke des Effekts
    """
    id: str
    duration: int
    potency: int
    
    @staticmethod
    def from_dict(data: Dict[str, Any]) -> 'StatusEffectDefinition':
        """
        Erstellt eine StatusEffectDefinition aus einer Dictionary.
        
        Args:
            data (Dict[str, Any]): Die Rohdaten aus der JSON5-Datei
            
        Returns:
            StatusEffectDefinition: Eine neue StatusEffectDefinition-Instanz
        """
        return StatusEffectDefinition(
            id=data.get('id', ''),
            duration=data.get('duration', 1),
            potency=data.get('potency', 1),
        )


@dataclass
class SkillDefinition:
    """
    Repräsentiert einen Skill mit allen notwendigen Eigenschaften.
    
    Attribute:
        id (str): Die eindeutige ID des Skills
        name (str): Der angezeigte Name
        description (str): Die Beschreibung
        cost (Dict[str, Any]): Die Kosten (Wert und Typ)
        effects (Dict[str, Any]): Die Effekte (Schaden, Attribut, etc.)
        applies_effects (List[StatusEffectDefinition]): Angewandte Status-Effekte
    """
    id: str
    name: str
    description: str
    cost: Dict[str, Any]
    effects: Dict[str, Any]
    applies_effects: List[StatusEffectDefinition]
    
    @staticmethod
    def from_dict(skill_id: str, data: Dict[str, Any]) -> 'SkillDefinition':
        """
        Erstellt eine SkillDefinition-Instanz aus einer Dictionary.
        
        Args:
            skill_id (str): Die ID des Skills
            data (Dict[str, Any]): Die Rohdaten aus der JSON5-Datei
            
        Returns:
            SkillDefinition: Eine neue SkillDefinition-Instanz
        """
        applies_effects = []
        if 'applies_effects' in data:
            applies_effects = [StatusEffectDefinition.from_dict(effect) for effect in data['applies_effects']]
            
        return SkillDefinition(
            id=skill_id,
            name=data.get('name', skill_id),
            description=data.get('description', ''),
            cost=data.get('cost', {'value': 0, 'type': 'NONE'}),
            effects=data.get('effects', {}),
            applies_effects=applies_effects,
        )
    
    def get_cost_value(self) -> int:
        """
        Gibt den Kostenwert des Skills zurück.
        
        Returns:
            int: Der Kostenwert
        """
        return self.cost.get('value', 0)
    
    def get_cost_type(self) -> str:
        """
        Gibt den Kostentyp des Skills zurück.
        
        Returns:
            str: Der Kostentyp (z.B. 'MANA', 'STAMINA')
        """
        return self.cost.get('type', 'NONE')
    
    def get_base_damage(self, default_damage: Optional[int] = None) -> Optional[int]:
        """
        Gibt den Basisschaden des Skills zurück.
        
        Args:
            default_damage (Optional[int]): Der Standardwert, falls base_damage null ist
            
        Returns:
            Optional[int]: Der Basisschaden oder der Standardwert
        """
        base_damage = self.effects.get('base_damage')
        if base_damage is None and default_damage is not None:
            return default_damage
        return base_damage
    
    def get_scaling_attribute(self) -> str:
        """
        Gibt das Skalierungsattribut des Skills zurück.
        
        Returns:
            str: Das Skalierungsattribut (z.B. 'STR', 'INT')
        """
        return self.effects.get('scaling_attribute', '')
    
    def get_damage_type(self) -> str:
        """
        Gibt den Schadenstyp des Skills zurück.
        
        Returns:
            str: Der Schadenstyp (z.B. 'PHYSICAL', 'MAGICAL')
        """
        return self.effects.get('damage_type', 'PHYSICAL')
    
    def get_multiplier(self) -> float:
        """
        Gibt den Schadensmultiplikator des Skills zurück.
        
        Returns:
            float: Der Multiplikator (z.B. 1.0, 1.5)
        """
        return self.effects.get('multiplier', 1.0)
    
    def is_self_effect(self) -> bool:
        """
        Prüft, ob der Skill einen Selbst-Effekt hat.
        
        Returns:
            bool: True, wenn es ein Selbst-Effekt ist, sonst False
        """
        return self.effects.get('self_effect', False)
    
    def is_area_effect(self) -> bool:
        """
        Prüft, ob der Skill einen Flächeneffekt hat.
        
        Returns:
            bool: True, wenn es ein Flächeneffekt ist, sonst False
        """
        return 'area_type' in self.effects
    
    def get_area_type(self) -> str:
        """
        Gibt den Typ des Flächeneffekts zurück.
        
        Returns:
            str: Der Typ des Flächeneffekts (z.B. 'CLEAVE', 'SPLASH')
        """
        return self.effects.get('area_type', '')


===== /workspaces/python-rpg-projekt/src/definitions/__init__.py =====
"""
Definitions Paket

Enthält Klassen und Funktionen zur Definition von Spielobjekten und dem Laden von JSON5-Daten.
"""


===== /workspaces/python-rpg-projekt/src/definitions/item.py =====
"""
Item-Definition (Platzhalter)

Definiert die Struktur eines Items.
"""
from typing import Dict, List, Any
from dataclasses import dataclass


@dataclass
class ItemDefinition:
    """
    Repräsentiert ein Item mit allen notwendigen Eigenschaften (Platzhalter).
    
    Attribute:
        id (str): Die eindeutige ID des Items
        name (str): Der angezeigte Name
        description (str): Die Beschreibung
        item_type (str): Der Typ des Items (z.B. WEAPON, ARMOR)
        properties (Dict[str, Any]): Die Eigenschaften des Items
        tags (List[str]): Tags für das Item
    """
    id: str
    name: str
    description: str
    item_type: str
    properties: Dict[str, Any]
    tags: List[str]
    
    @staticmethod
    def from_dict(item_id: str, data: Dict[str, Any]) -> 'ItemDefinition':
        """
        Erstellt eine ItemDefinition-Instanz aus einer Dictionary.
        
        Args:
            item_id (str): Die ID des Items
            data (Dict[str, Any]): Die Rohdaten aus der JSON5-Datei
            
        Returns:
            ItemDefinition: Eine neue ItemDefinition-Instanz
        """
        return ItemDefinition(
            id=item_id,
            name=data.get('name', item_id),
            description=data.get('description', ''),
            item_type=data.get('item_type', 'MISC'),
            properties=data.get('properties', {}),
            tags=data.get('tags', []),
        )


===== /workspaces/python-rpg-projekt/src/definitions/loader.py =====
"""
Loader für JSON5-Daten

Lädt JSON5-Dateien und konvertiert sie in Python-Objekte.
"""
import os
import json5
from typing import Dict, Any, List, Type, TypeVar, Optional

from .character import CharacterTemplate, OpponentTemplate
from .skill import SkillDefinition
from .item import ItemDefinition

# Type-Variable für generisches Laden
T = TypeVar('T')


def load_json5_file(filepath: str) -> Dict[str, Any]:
    """
    Lädt eine JSON5-Datei und gibt den Inhalt als Dictionary zurück.
    
    Args:
        filepath (str): Der Pfad zur JSON5-Datei
        
    Returns:
        Dict[str, Any]: Die geladenen Daten
        
    Raises:
        FileNotFoundError: Wenn die Datei nicht gefunden wird
        json5.Json5Error: Wenn die Datei kein gültiges JSON5 enthält
    """
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"JSON5-Datei nicht gefunden: {filepath}")
    
    with open(filepath, 'r', encoding='utf-8') as file:
        try:
            return json5.load(file)
        except Exception as e:
            raise json5.Json5Error(f"Fehler beim Laden der JSON5-Datei {filepath}: {str(e)}")


def load_templates(json_path: str, 
                  template_class: Type[T], 
                  prefix: Optional[str] = None) -> Dict[str, T]:
    """
    Lädt Templates aus einer JSON5-Datei.
    
    Args:
        json_path (str): Der Pfad zur JSON5-Datei
        template_class (Type[T]): Die Klasse, in die die Daten konvertiert werden sollen
        prefix (Optional[str]): Ein optionales Präfix für die IDs
        
    Returns:
        Dict[str, T]: Ein Dictionary mit den geladenen Templates
    """
    data = load_json5_file(json_path)
    results = {}
    
    for template_id, template_data in data.items():
        full_id = f"{prefix}_{template_id}" if prefix else template_id
        results[full_id] = template_class.from_dict(full_id, template_data)
    
    return results


def load_characters(json_path: str) -> Dict[str, CharacterTemplate]:
    """
    Lädt Charakterdefinitionen aus einer JSON5-Datei.
    
    Args:
        json_path (str): Der Pfad zur characters.json5
        
    Returns:
        Dict[str, CharacterTemplate]: Ein Dictionary mit den geladenen Charakteren
    """
    return load_templates(json_path, CharacterTemplate)


def load_opponents(json_path: str) -> Dict[str, OpponentTemplate]:
    """
    Lädt Gegnerdefinitionen aus einer JSON5-Datei.
    
    Args:
        json_path (str): Der Pfad zur opponents.json5
        
    Returns:
        Dict[str, OpponentTemplate]: Ein Dictionary mit den geladenen Gegnern
    """
    return load_templates(json_path, OpponentTemplate)


def load_skills(json_path: str) -> Dict[str, SkillDefinition]:
    """
    Lädt Skilldefinitionen aus einer JSON5-Datei.
    
    Args:
        json_path (str): Der Pfad zur skills.json5
        
    Returns:
        Dict[str, SkillDefinition]: Ein Dictionary mit den geladenen Skills
    """
    return load_templates(json_path, SkillDefinition)


def load_items(json_path: str) -> Dict[str, ItemDefinition]:
    """
    Lädt Itemdefinitionen aus einer JSON5-Datei.
    
    Args:
        json_path (str): Der Pfad zur items.json5
        
    Returns:
        Dict[str, ItemDefinition]: Ein Dictionary mit den geladenen Items
    """
    return load_templates(json_path, ItemDefinition)


===== /workspaces/python-rpg-projekt/src/definitions/character.py =====
"""
Charakter-Definition

Definiert die Struktur eines Charakter-Templates.
"""
from typing import Dict, List, Optional, Any
from dataclasses import dataclass


@dataclass
class CharacterTemplate:
    """
    Repräsentiert ein Charakter-Template mit allen Basiseigenschaften.
    
    Attribute:
        id (str): Die eindeutige ID des Charakters/der Klasse
        name (str): Der angezeigte Name
        description (str): Die Beschreibung
        primary_attributes (Dict[str, int]): Die Primärattribute (STR, DEX, etc.)
        combat_values (Dict[str, int]): Kampfwerte (HP, Mana, etc.)
        skills (List[str]): IDs der verfügbaren Skills
        tags (List[str]): Tags für den Charakter (z.B. WARRIOR, MELEE)
    """
    id: str
    name: str
    description: str
    primary_attributes: Dict[str, int]
    combat_values: Dict[str, int]
    skills: List[str]
    tags: List[str]
    
    @staticmethod
    def from_dict(char_id: str, data: Dict[str, Any]) -> 'CharacterTemplate':
        """
        Erstellt eine CharacterTemplate-Instanz aus einer Dictionary.
        
        Args:
            char_id (str): Die ID des Charakters
            data (Dict[str, Any]): Die Rohdaten aus der JSON5-Datei
            
        Returns:
            CharacterTemplate: Eine neue CharacterTemplate-Instanz
        """
        return CharacterTemplate(
            id=char_id,
            name=data.get('name', char_id),
            description=data.get('description', ''),
            primary_attributes=data.get('primary_attributes', {}),
            combat_values=data.get('combat_values', {}),
            skills=data.get('skills', []),
            tags=data.get('tags', []),
        )
    
    def get_attribute(self, attribute: str) -> int:
        """
        Gibt den Wert eines Primärattributs zurück.
        
        Args:
            attribute (str): Der Name des Attributs (z.B. 'STR')
            
        Returns:
            int: Der Wert des Attributs oder 0, wenn nicht vorhanden
        """
        return self.primary_attributes.get(attribute, 0)
    
    def get_combat_value(self, value: str) -> int:
        """
        Gibt den Wert eines Kampfwerts zurück.
        
        Args:
            value (str): Der Name des Kampfwerts (z.B. 'base_hp')
            
        Returns:
            int: Der Wert oder 0, wenn nicht vorhanden
        """
        return self.combat_values.get(value, 0)
    
    def has_tag(self, tag: str) -> bool:
        """
        Prüft, ob der Charakter einen bestimmten Tag hat.
        
        Args:
            tag (str): Der zu prüfende Tag
            
        Returns:
            bool: True, wenn der Tag vorhanden ist, sonst False
        """
        return tag in self.tags


class OpponentTemplate(CharacterTemplate):
    """
    Erweitert CharacterTemplate um gegner-spezifische Eigenschaften.
    
    Zusätzliche Attribute:
        level (int): Das Level des Gegners
        xp_reward (int): Die XP-Belohnung bei Besiegen des Gegners
        ai_strategy (str): Die zu verwendende KI-Strategie-ID
        weaknesses (List[str]): Schwächen gegen bestimmte Schadenstypen
    """
    
    def __init__(self, 
                 id: str,
                 name: str,
                 description: str,
                 primary_attributes: Dict[str, int],
                 combat_values: Dict[str, int],
                 skills: List[str],
                 tags: List[str],
                 level: int,
                 xp_reward: int,
                 ai_strategy: str,
                 weaknesses: Optional[List[str]] = None):
        super().__init__(id, name, description, primary_attributes, 
                         combat_values, skills, tags)
        self.level = level
        self.xp_reward = xp_reward
        self.ai_strategy = ai_strategy
        self.weaknesses = weaknesses or []
    
    @staticmethod
    def from_dict(opp_id: str, data: Dict[str, Any]) -> 'OpponentTemplate':
        """
        Erstellt eine OpponentTemplate-Instanz aus einer Dictionary.
        
        Args:
            opp_id (str): Die ID des Gegners
            data (Dict[str, Any]): Die Rohdaten aus der JSON5-Datei
            
        Returns:
            OpponentTemplate: Eine neue OpponentTemplate-Instanz
        """
        return OpponentTemplate(
            id=opp_id,
            name=data.get('name', opp_id),
            description=data.get('description', ''),
            primary_attributes=data.get('primary_attributes', {}),
            combat_values=data.get('combat_values', {}),
            skills=data.get('skills', []),
            tags=data.get('tags', []),
            level=data.get('level', 1),
            xp_reward=data.get('xp_reward', 0),
            ai_strategy=data.get('ai_strategy', 'basic_melee'),
            weaknesses=data.get('weaknesses', []),
        )


===== /workspaces/python-rpg-projekt/src/definitions/json_data/skills.json5 =====
{
  // Basisangriffe
  "basic_attack_free": {
    "name": "Angriff",
    "description": "Ein einfacher Angriff, der keine Ressourcen kostet.",
    "cost": {
      "value": 0,
      "type": "NONE"
    },
    "effects": {
      "base_damage": 3,
      "scaling_attribute": "STR",
      "damage_type": "PHYSICAL",
      "multiplier": 1.0
    }
  },
  
  "basic_strike_phys": {
    "name": "Schlag",
    "description": "Ein kräftiger Schlag mit einer Nahkampfwaffe.",
    "cost": {
      "value": 5,
      "type": "STAMINA"
    },
    "effects": {
      "base_damage": null,  // Nutzt den Standard-Waffenschaden
      "scaling_attribute": "STR",
      "damage_type": "PHYSICAL",
      "multiplier": 1.0
    }
  },
  
  // [Rest der Datei bleibt unverändert]
  "basic_magic_bolt": {
    "name": "Magischer Pfeil",
    "description": "Ein einfacher magischer Energiepfeil.",
    "cost": {
      "value": 5,
      "type": "MANA"
    },
    "effects": {
      "base_damage": null,  // Nutzt den Standard-Waffenschaden
      "scaling_attribute": "INT",
      "damage_type": "MAGICAL",
      "multiplier": 1.0
    }
  },
  
  "basic_holy_spark": {
    "name": "Heiliger Funke",
    "description": "Ein Funke heiliger Energie.",
    "cost": {
      "value": 5,
      "type": "MANA"
    },
    "effects": {
      "base_damage": null,  // Nutzt den Standard-Waffenschaden
      "scaling_attribute": "WIS",
      "damage_type": "HOLY",
      "multiplier": 1.0
    }
  },
  
  "basic_strike_finesse": {
    "name": "Präziser Stich",
    "description": "Ein präziser Stich mit einer Klinge.",
    "cost": {
      "value": 5,
      "type": "ENERGY"
    },
    "effects": {
      "base_damage": null,  // Nutzt den Standard-Waffenschaden
      "scaling_attribute": "DEX",
      "damage_type": "PHYSICAL",
      "multiplier": 1.0
    }
  },
  
  "basic_shot_phys": {
    "name": "Schuss",
    "description": "Ein einfacher Schuss mit einer Fernkampfwaffe.",
    "cost": {
      "value": 5,
      "type": "STAMINA"
    },
    "effects": {
      "base_damage": null,  // Nutzt den Standard-Waffenschaden
      "scaling_attribute": "DEX",
      "damage_type": "PHYSICAL",
      "multiplier": 1.0
    }
  },
  
  // Krieger-Skills
  "power_strike": {
    "name": "Mächtiger Schlag",
    "description": "Ein kraftvoller Schlag, der zusätzlichen Schaden verursacht.",
    "cost": {
      "value": 15,
      "type": "STAMINA"
    },
    "effects": {
      "base_damage": 6,
      "scaling_attribute": "STR",
      "damage_type": "PHYSICAL",
      "multiplier": 1.5
    }
  },
  
  "shield_bash": {
    "name": "Schildschlag",
    "description": "Ein Schlag mit dem Schild, der den Gegner betäubt.",
    "cost": {
      "value": 20,
      "type": "STAMINA"
    },
    "effects": {
      "base_damage": 2,
      "scaling_attribute": "STR",
      "damage_type": "PHYSICAL",
      "multiplier": 1.0
    },
    "applies_effects": [
      {
        "id": "STUNNED",
        "duration": 1,
        "potency": 1
      }
    ]
  },
  
  "cleave": {
    "name": "Rundumschlag",
    "description": "Ein weiter Schwung, der mehrere Gegner treffen kann.",
    "cost": {
      "value": 25,
      "type": "STAMINA"
    },
    "effects": {
      "base_damage": 7,
      "scaling_attribute": "STR",
      "damage_type": "PHYSICAL",
      "multiplier": 1.2,
      "area_type": "CLEAVE"
    }
  },
  
  // Magier-Skills
  "fireball": {
    "name": "Feuerball",
    "description": "Ein explodierender Feuerball, der den Gegner verbrennt.",
    "cost": {
      "value": 20,
      "type": "MANA"
    },
    "effects": {
      "base_damage": 8,
      "scaling_attribute": "INT",
      "damage_type": "MAGICAL",
      "multiplier": 1.5
    },
    "applies_effects": [
      {
        "id": "BURNING",
        "duration": 2,
        "potency": 3
      }
    ]
  },
  
  "frostbolt": {
    "name": "Frostblitz",
    "description": "Ein Geschoss aus eisiger Kälte, das den Gegner verlangsamt.",
    "cost": {
      "value": 15,
      "type": "MANA"
    },
    "effects": {
      "base_damage": 6,
      "scaling_attribute": "INT",
      "damage_type": "MAGICAL",
      "multiplier": 1.2
    },
    "applies_effects": [
      {
        "id": "SLOWED",
        "duration": 2,
        "potency": 2
      }
    ]
  },
  
  "arcane_barrier": {
    "name": "Arkane Barriere",
    "description": "Eine magische Barriere, die Schaden absorbiert.",
    "cost": {
      "value": 30,
      "type": "MANA"
    },
    "effects": {},
    "applies_effects": [
      {
        "id": "SHIELDED",
        "duration": 3,
        "potency": 15
      }
    ],
    "is_self_effect": true
  },
  
  // Schurken-Skills
  "precise_stab": {
    "name": "Präziser Stich",
    "description": "Ein präziser Stich an eine verwundbare Stelle.",
    "cost": {
      "value": 15,
      "type": "ENERGY"
    },
    "effects": {
      "base_damage": 7,
      "scaling_attribute": "DEX",
      "damage_type": "PHYSICAL",
      "multiplier": 1.4,
      "critical_chance": 25,
      "critical_multiplier": 1.5
    }
  },
  
  "distraction": {
    "name": "Ablenkung",
    "description": "Lenkt den Gegner ab und reduziert seine Treffsicherheit.",
    "cost": {
      "value": 10,
      "type": "ENERGY"
    },
    "effects": {},
    "applies_effects": [
      {
        "id": "ACCURACY_DOWN",
        "duration": 2,
        "potency": 3
      }
    ]
  },
  
  "sprint": {
    "name": "Sprint",
    "description": "Erhöht vorübergehend die eigene Initiative.",
    "cost": {
      "value": 15,
      "type": "ENERGY"
    },
    "effects": {},
    "applies_effects": [
      {
        "id": "INITIATIVE_UP",
        "duration": 3,
        "potency": 20
      }
    ],
    "is_self_effect": true
  },
  
  // Kleriker-Skills
  "heal": {
    "name": "Heilung",
    "description": "Heilt Verletzungen des Ziels.",
    "cost": {
      "value": 20,
      "type": "MANA"
    },
    "effects": {
      "base_healing": 15,
      "scaling_attribute": "WIS",
      "healing_multiplier": 1.5
    }
  },
  
  "holy_light": {
    "name": "Heiliges Licht",
    "description": "Ein Strahl heiligen Lichts, besonders effektiv gegen Untote.",
    "cost": {
      "value": 25,
      "type": "MANA"
    },
    "effects": {
      "base_damage": 8,
      "scaling_attribute": "WIS",
      "damage_type": "HOLY",
      "multiplier": 1.2,
      "bonus_vs_type": "UNDEAD",
      "bonus_multiplier": 2.0
    }
  },
  
  "protective_ward": {
    "name": "Schutzfeld",
    "description": "Erhöht die Verteidigung des Ziels.",
    "cost": {
      "value": 20,
      "type": "MANA"
    },
    "effects": {},
    "applies_effects": [
      {
        "id": "DEFENSE_UP",
        "duration": 3,
        "potency": 3
      }
    ]
  },
  
  // Gegner-Skills
  "weakening_curse": {
    "name": "Schwächungsfluch",
    "description": "Ein Fluch, der die Stärke des Opfers reduziert.",
    "cost": {
      "value": 10,
      "type": "MANA"
    },
    "effects": {},
    "applies_effects": [
      {
        "id": "WEAKENED",
        "duration": 3,
        "potency": 3
      }
    ]
  },
  
  "heal_lesser": {
    "name": "Geringe Heilung",
    "description": "Heilt einen geringen Teil der Verletzungen.",
    "cost": {
      "value": 10,
      "type": "MANA"
    },
    "effects": {
      "base_healing": 10,
      "scaling_attribute": "WIS",
      "healing_multiplier": 0.3
    }
  },
  
  "area_fire_blast": {
    "name": "Flächenbrand",
    "description": "Eine Explosion aus Feuer, die mehrere Gegner trifft.",
    "cost": {
      "value": 25,
      "type": "MANA"
    },
    "effects": {
      "base_damage": 6,
      "scaling_attribute": "INT",
      "damage_type": "MAGICAL",
      "multiplier": 1.0,
      "area_type": "SPLASH"
    },
    "applies_effects": [
      {
        "id": "BURNING",
        "duration": 1,
        "potency": 2
      }
    ]
  }
}


===== /workspaces/python-rpg-projekt/src/definitions/json_data/characters.json5 =====
{
  /* 
   * Charakter-Templates
   * 
   * Diese Datei definiert die Basis-Templates für Spielercharaktere.
   * Jeder Charakter hat Primärattribute, Kampfwerte und verfügbare Skills.
   */
  
  "krieger": {
    "name": "Krieger", // Angezeigter Name
    "description": "Ein starker Nahkämpfer mit hoher Verteidigung und physischem Schaden",
    "primary_attributes": {
      "STR": 14, // Stärke
      "DEX": 10, // Geschicklichkeit
      "INT": 8,  // Intelligenz
      "CON": 12, // Konstitution
      "WIS": 8,  // Weisheit
    },
    "combat_values": {
      "base_hp": 50,       // Basis-Lebenspunkte (wird durch CON erhöht)
      "base_stamina": 100, // Ausdauer (Krieger-Ressource)
      "base_mana": 0,      // Keine Mana für Krieger
      "base_energy": 0,    // Keine Energie für Krieger
      "armor": 5,          // Physische Schadensreduktion
      "magic_resist": 1,   // Magische Schadensreduktion
    },
    "tags": ["WARRIOR", "MELEE"],
    "skills": [
      "basic_strike_phys", // Standard-Nahkampfangriff
      "power_strike",      // Stärkerer Nahkampfangriff
      "shield_bash",       // Angriff mit Betäubung
      "cleave",            // Angriff auf mehrere Ziele
    ],
  },
  
  "magier": {
    "name": "Magier",
    "description": "Ein mächtiger Zauberwirker mit starken magischen Angriffen",
    "primary_attributes": {
      "STR": 8,
      "DEX": 10,
      "INT": 14,
      "CON": 9,
      "WIS": 11,
    },
    "combat_values": {
      "base_hp": 50,
      "base_mana": 120,    // Mana (Magier-Ressource)
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 1,
      "magic_resist": 4,
    },
    "tags": ["MAGE", "CASTER"],
    "skills": [
      "basic_magic_bolt", // Standard-Magieangriff
      "fireball",         // Flächenangriff mit Burning-Effekt
      "frostbolt",        // Angriff mit Slowed-Effekt
      "arcane_barrier",   // Defensive Fähigkeit
    ],
  },
  
  "schurke": {
    "name": "Schurke",
    "description": "Ein geschickter Nahkämpfer mit hohem Schaden und Ausweichen",
    "primary_attributes": {
      "STR": 10,
      "DEX": 14,
      "INT": 8,
      "CON": 10,
      "WIS": 8,
    },
    "combat_values": {
      "base_hp": 50,
      "base_mana": 0,
      "base_stamina": 0,
      "base_energy": 100,  // Energie (Schurken-Ressource)
      "armor": 3,
      "magic_resist": 2,
    },
    "tags": ["ROGUE", "MELEE"],
    "skills": [
      "basic_strike_finesse", // Standard-Finesse-Angriff
      "precise_stab",         // Präziser Angriff
      "distraction",          // Ablenkungsmanöver
      "sprint",               // Erhöht Initiative
    ],
  },
  
  "kleriker": {
    "name": "Kleriker",
    "description": "Ein göttlicher Zauberwirker mit Heil- und Unterstützungsfähigkeiten",
    "primary_attributes": {
      "STR": 10,
      "DEX": 8,
      "INT": 10,
      "CON": 11,
      "WIS": 13,
    },
    "combat_values": {
      "base_hp": 50,
      "base_mana": 110,    // Mana (Kleriker-Ressource)
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 4,
      "magic_resist": 3,
    },
    "tags": ["CLERIC", "CASTER", "SUPPORT"],
    "skills": [
      "basic_holy_spark", // Standard-Heiliger Angriff
      "heal",             // Heilung
      "holy_light",       // Starker Angriff gegen Untote
      "protective_ward",  // Schutzbarriere
    ],
  },
}


===== /workspaces/python-rpg-projekt/src/definitions/json_data/opponents.json5 =====
{
  /* 
   * Gegner-Definitionen
   * 
   * Diese Datei definiert alle Gegner-Templates im Spiel.
   * Jeder Gegner hat Primärattribute, Kampfwerte, Skills und einen XP-Wert.
   */
  
  "goblin_lv1": {
    "name": "Goblin",
    "description": "Ein kleiner, schwacher Goblin",
    "level": 1,
    "primary_attributes": {
      "STR": 8,
      "DEX": 12,
      "INT": 6,
      "CON": 9,
      "WIS": 6,
    },
    "combat_values": {
      "base_hp": 50,
      "base_mana": 0,
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 2,
      "magic_resist": 1,
    },
    "tags": ["GOBLINOID", "HUMANOID"],
    "skills": [
      "basic_strike_phys",
    ],
    "xp_reward": 50,
    "ai_strategy": "basic_melee", // Bezieht sich auf die KI-Strategie in src/ai/strategies/
  },
  
  "goblin_archer_lv2": {
    "name": "Goblin Bogenschütze",
    "description": "Ein Goblin mit Bogen und besserer Ausrüstung",
    "level": 2,
    "primary_attributes": {
      "STR": 7,
      "DEX": 14,
      "INT": 7,
      "CON": 8,
      "WIS": 7,
    },
    "combat_values": {
      "base_hp": 50,
      "base_mana": 0,
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 1,
      "magic_resist": 1,
    },
    "tags": ["GOBLINOID", "HUMANOID", "RANGED"],
    "skills": [
      "basic_shot_phys",
    ],
    "xp_reward": 75,
    "ai_strategy": "basic_ranged",
  },
  
  "goblin_schamane_lv3": {
    "name": "Goblin Schamane",
    "description": "Ein magisch begabter Goblin",
    "level": 3,
    "primary_attributes": {
      "STR": 6,
      "DEX": 10,
      "INT": 14,
      "CON": 9,
      "WIS": 12,
    },
    "combat_values": {
      "base_hp": 50,
      "base_mana": 100,
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 1,
      "magic_resist": 3,
    },
    "tags": ["GOBLINOID", "HUMANOID", "CASTER"],
    "skills": [
      "basic_magic_bolt",
      "weakening_curse",
      "heal_lesser",
    ],
    "xp_reward": 100,
    "ai_strategy": "support_caster",
  },
  
  "skeleton_lv2": {
    "name": "Skelett",
    "description": "Ein zum Leben erwecktes Skelett",
    "level": 2,
    "primary_attributes": {
      "STR": 10,
      "DEX": 8,
      "INT": 5,
      "CON": 10,
      "WIS": 5,
    },
    "combat_values": {
      "base_hp": 60,
      "base_mana": 0,
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 3,
      "magic_resist": 1,
    },
    "tags": ["UNDEAD", "SKELETON"],
    "skills": [
      "basic_strike_phys",
    ],
    "xp_reward": 75,
    "ai_strategy": "basic_melee",
    "weaknesses": ["HOLY"], // Zusätzliche Schwäche gegen heiligen Schaden
  },
  
  "wolf_lv1": {
    "name": "Wolf",
    "description": "Ein hungriger Wolf",
    "level": 1,
    "primary_attributes": {
      "STR": 9,
      "DEX": 14,
      "INT": 4,
      "CON": 8,
      "WIS": 8,
    },
    "combat_values": {
      "base_hp": 40,
      "base_mana": 0,
      "base_stamina": 0,
      "base_energy": 0,
      "armor": 1,
      "magic_resist": 1,
      "initiative_bonus": 10, // Wölfe sind schneller und haben einen Initiative-Bonus
    },
    "tags": ["BEAST", "ANIMAL"],
    "skills": [
      "basic_strike_phys",
    ],
    "xp_reward": 40,
    "ai_strategy": "basic_melee",
  },
}


===== /workspaces/python-rpg-projekt/docs/ENTSCHEIDUNGEN.md =====
# Wichtige Projekt-Entscheidungen

Dieses Dokument protokolliert wichtige Designentscheidungen, die während der Entwicklung getroffen wurden.

## 2025-05-08: Projektstart und grundlegende Strukturentscheidungen

- **Entscheidung**: Verwendung von json5 für Konfigurationsdateien und Spieldefinitionen
  - **Begründung**: Ermöglicht Kommentare und eine flexiblere Syntax für bessere Lesbarkeit und Wartbarkeit
  - **Alternativen**: Standard JSON (weniger lesbar), YAML (zusätzliche Abhängigkeit)

- **Entscheidung**: Modulare Projektstruktur mit klarer Trennung von Daten und Logik
  - **Begründung**: Verbessert Wartbarkeit und Erweiterbarkeit, folgt dem Single Responsibility Prinzip
  - **Implikation**: Mehr Initial-Setup, aber bessere Langzeitentwicklung

## 2025-05-08: Logging-System und Konfigurationsverwaltung

- **Entscheidung**: Implementierung eines zentralen Logging-Systems mit konfigurierbaren Levels
  - **Begründung**: Ermöglicht feinere Kontrolle über die Ausgaben, unterstützt sowohl Konsolen- als auch Datei-Logs
  - **Implikation**: Logger werden über eine zentrale Funktion (get_logger) bezogen, vereinheitlicht den Logging-Ansatz

- **Entscheidung**: Konfigurationsdaten werden zentral über ein Singleton-Objekt verwaltet
  - **Begründung**: Vermeidet Duplizierung von Konfigurationslesevorgängen, stellt konsistente Konfiguration im gesamten Projekt sicher
  - **Alternativen**: Direktes Laden in einzelnen Modulen (würde zu Duplizierung führen)
  - **Implikation**: Änderungen an der Konfiguration sind sofort im gesamten Projekt verfügbar

- **Entscheidung**: Mehrere Betriebsmodi für das Spiel (manual, auto, train, evaluate)
  - **Begründung**: Unterstützt verschiedene Anwendungsfälle (interaktives Spielen, automatische Simulation, RL-Training und -Evaluierung)
  - **Implikation**: Erfordert eine klare Trennung der Logik für die verschiedenen Modi

## 2025-05-08: Regelbasierte KI-Architektur

- **Entscheidung**: Implementierung einer flexiblen, regelbasierten KI-Architektur mit Strategie-Pattern
  - **Begründung**: Ermöglicht verschiedene Verhaltensweisen für unterschiedliche Gegnertypen
  - **Alternativen**: Feste Logik pro Gegner (nicht erweiterbar), komplexe RL-basierte KI (zu früh im Projekt)
  - **Implikation**: Einfache Erweiterbarkeit um neue Strategien, klare Trennung von Entscheidungslogik und Charakterzustand

- **Entscheidung**: Drei Basis-KI-Strategien: Nahkampf, Fernkampf, Unterstützung
  - **Begründung**: Deckt die Grundbedürfnisse des Spiels ab und passt zu den definierten Gegnertypen
  - **Implikation**: Verschiedene Gegner verhalten sich taktisch unterschiedlich, was zu abwechslungsreichen Kampferfahrungen führt

- **Entscheidung**: Einsatz eines AI-Dispatchers zur dynamischen Strategieauswahl
  - **Begründung**: Zentralisierte Zuordnung von Charakteren zu Strategien, vereinfacht die Nutzung im Code
  - **Implikation**: Strategien können zur Laufzeit gewechselt werden, erleichtert Testing und Erweiterung

## 2025-05-08: CLI-Simulation und Game Loop

- **Entscheidung**: Implementierung einer CLI-basierten Simulation für automatische Kampfabläufe
  - **Begründung**: Ermöglicht frühes Testen des Spielsystems ohne komplexe UI-Implementierung
  - **Alternativen**: Sofortige Implementierung einer GUI (zu zeitaufwendig), reines Backend ohne Ausgabe (schlecht für Testing)
  - **Implikation**: Schnelle Iteration und Validierung der Spielmechaniken, einfaches Testen von Balance-Änderungen

- **Entscheidung**: Formatierte Konsolenausgabe mit visuellen Elementen (Balken, Farbcodes)
  - **Begründung**: Verbessert die Lesbarkeit und Benutzerfreundlichkeit der Textausgabe
  - **Implikation**: Bessere Benutzererfahrung in der CLI-Phase, kann später durch grafische UI ersetzt werden

- **Entscheidung**: Zufällige Generierung von Gegnern basierend auf Spieler-Level
  - **Begründung**: Schafft Abwechslung und passt die Herausforderung dynamisch an
  - **Implikation**: Ermöglicht Spieltests mit verschiedenen Gegnertypen und Schwierigkeitsgraden


===== /workspaces/python-rpg-projekt/docs/IMPLEMENTIERUNGSDETAILS.md =====
# Implementierungsdetails des RPG-Systems

**Datum: 2025-05-08**

Dieses Dokument beschreibt die konkreten technischen Implementierungsdetails, die im Rahmen des Python-RPG-Projekts umgesetzt wurden. Es ergänzt die Spiel-Definitionen aus dem ANNEX_GAME_DEFINITIONS_SUMMARY und erklärt, wie die konzeptionellen Mechaniken im Code realisiert wurden.

## 1. Initiative & Zugreihenfolge

Die zuvor offene Frage der Initiative wurde wie folgt implementiert:

- **Basis-Initiative-Formel**: `base_initiative = DEX * 2`
- **Gesamtinitiative**: `gesamt_initiative = base_initiative + status_mods['initiative']`

Bei der Berechnung der Zugreihenfolge in einem Kampf:
1. Für jeden lebenden Charakter wird die Initiative berechnet
2. Charaktere werden absteigend nach Initiative sortiert (höchste Initiative zuerst)
3. In jeder Runde wird diese Reihenfolge neu berechnet, um Status-Effekt-Änderungen zu berücksichtigen

Implementiert in: `src/game_logic/entities.py` (get_initiative-Methode) und `src/game_logic/combat.py` (calculate_turn_order-Methode)

## 2. Status-Effekte

Status-Effekte wurden als polymorphe Klassen implementiert, die alle von einer gemeinsamen abstrakten Basisklasse `StatusEffect` erben:

### Kern-Effekt-Mechanik
- Jeder Effekt hat eine **Dauer** (Rundenzahl) und eine **Stärke** (potency)
- Effekte implementieren drei Hauptmethoden:
  - `on_apply(target)`: Wird beim ersten Anwenden des Effekts aufgerufen
  - `on_tick(target)`: Wird in jeder Runde aufgerufen
  - `on_remove(target)`: Wird beim Ablaufen des Effekts aufgerufen

### Implementierte Effekte

| Effekt-ID | Beschreibung | Implementierung |
|-----------|--------------|----------------|
| BURNING | Verursacht Schaden über Zeit | Direkter Schaden (ignoriert Rüstung): potency Punkte pro Runde |
| STUNNED | Verhindert Aktionen | Setzt 'can_act' auf False |
| SLOWED | Reduziert Initiative und Ausweichen | Initiative -5*potency, Ausweichen -potency |
| WEAKENED | Reduziert Stärke | STR -potency |
| ACCURACY_DOWN | Reduziert Treffergenauigkeit | Genauigkeit -potency |
| INITIATIVE_UP | Erhöht Initiative | Initiative +potency |
| SHIELDED | Absorbiert Schaden | Erzeugt shield_points in Höhe von potency |
| DEFENSE_UP | Erhöht Rüstung und Magieresistenz | Rüstung +potency, Magieresistenz +potency |

### Stapel-Mechanik
Wenn ein bereits aktiver Effekt erneut angewendet wird:
- Die Dauer wird auf MAX(alte_dauer, neue_dauer) gesetzt (Refresh)
- Die Stärke wird auf den neuen Wert überschrieben (kein Stapeln)

Implementiert in: `src/game_logic/effects.py`

## 3. Schild-Mechanismus

Ein Schutzschildmechanismus wurde implementiert, der nicht explizit im ursprünglichen Dokument definiert war:

- Charaktere haben ein `shield_points`-Attribut (standardmäßig 0)
- Bei Schadensanwendung wird zuerst der Schild reduziert, bevor HP verloren gehen
- Der SHIELDED-Status-Effekt setzt die Schildpunkte auf den Stärkewert des Effekts
- Nach Ablauf des Effekts werden Schildpunkte auf 0 zurückgesetzt

Implementiert in: `src/game_logic/entities.py` (take_damage-Methode)

## 4. KI-Strategien

Drei verschiedene KI-Strategien wurden implementiert, die unterschiedliche Kampfverhalten für Gegner ermöglichen:

### BasicMeleeStrategy
- **Priorität**: Schwächere Ziele, starke Angriffe
- **Zielauswahl**: 80% schwächstes Ziel, 20% zufällig
- **Skill-Auswahl**: Bevorzugt offensive Skills, wählt mit 70% Chance den stärksten Angriff

### BasicRangedStrategy
- **Priorität**: Taktische Ziele (Magier/Heiler), Status-Effekte
- **Zielauswahl**: 70% Zauberkundige, 60% schwächstes Ziel, Rest zufällig
- **Skill-Auswahl**: Bevorzugt Skills mit Status-Effekten (60% Chance)

### SupportCasterStrategy
- **Priorität**: 1. Heilung, 2. Verbündeten-Buffs, 3. Gegner-Debuffs, 4. Angriffe
- **Zielauswahl für Heilung**: Am stärksten verletzter Verbündeter
- **Zielauswahl für Debuff**: Starke Gegner oder Zauberkundige

Implementiert in: `src/ai/strategies/`

## 5. Flächeneffekt-Logik

Die Multi-Target-Logik für Skills wurde implementiert:

### Flächeneffekt-Typen:
- **CLEAVE**: Trifft das Hauptziel und ein sekundäres Ziel
- **SPLASH**: Trifft alle Ziele im Bereich (implementiert als Hauptziel + alle anderen Ziele)

Die Auswahl der sekundären Ziele erfolgt in den KI-Strategien und wird vom Kampfsystem bei der Schadensberechnung berücksichtigt.

Implementiert in: `src/ai/strategies/*.py` und `src/game_logic/combat.py`

## 6. XP- und Level-System

Das XP- und Level-System wurde als separater Service implementiert:

- **Benötigte XP für Level**: `math.ceil(xp_level_base * (xp_level_factor ^ (level - 1)))`
- **Level-Up-Effekte**: Vollständige Wiederherstellung von HP und allen Ressourcen
- **XP-Vergabe**: Auf alle überlebenden Spieler gleichmäßig verteilt

Implementiert in: `src/game_logic/leveling.py`

## 7. Trefferchance und Schadensberechnung

Die Trefferchance- und Schadensformeln wurden wie folgt implementiert:

### Trefferchance

hit_chance = base_chance + (accuracy * accuracy_factor) - (evasion * evasion_factor) hit_chance = max(min_chance, min(max_chance, hit_chance))


### Schadensberechnung

raw_damage = floor((base_damage + attribute_bonus) * multiplier) final_damage = max(min_damage, raw_damage - defense)


Für Gegner mit spezifischen Schwächen:

if has_weakness: multiplier *= bonus_multiplier


Implementiert in: `src/game_logic/formulas.py` und `src/game_logic/combat.py`

## 8. CLI-Simulation

Die Spielsimulation wurde als CLI-basierte automatische Kampfsimulation implementiert:

- Zufällige Auswahl von Spielercharakteren aus verfügbaren Templates
- Zufällige Generierung von Gegnern mit Level-Anpassung basierend auf Spieler-Durchschnittslevel
- Automatische Kampfabwicklung mit visueller Ausgabe (Lebensbalken, formatierte Nachrichten)
- XP-Vergabe und Level-Ups nach erfolgreichen Kämpfen

Implementiert in: `src/ui/cli_main_loop.py` und `src/ui/cli_output.py`



